
Clover_LV_Shock_Sensors_F334R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005204  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153ea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f2c  00000000  00000000  00035426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  00039648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b94  00000000  00000000  0003a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001990c  00000000  00000000  0005c374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca15f  00000000  00000000  00075c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fddf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f10  00000000  00000000  0013fe30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005374 	.word	0x08005374

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005374 	.word	0x08005374

080001c8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b43      	ldr	r3, [pc, #268]	; (80002f8 <MX_ADC1_Init+0x130>)
 80001ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <MX_ADC1_Init+0x130>)
 80001f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001fa:	4b3f      	ldr	r3, [pc, #252]	; (80002f8 <MX_ADC1_Init+0x130>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000202:	2201      	movs	r2, #1
 8000204:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000208:	2201      	movs	r2, #1
 800020a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <MX_ADC1_Init+0x130>)
 800020e:	2200      	movs	r2, #0
 8000210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000214:	4b38      	ldr	r3, [pc, #224]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000216:	2200      	movs	r2, #0
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <MX_ADC1_Init+0x130>)
 800021c:	2201      	movs	r2, #1
 800021e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000228:	2204      	movs	r2, #4
 800022a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800022c:	4b32      	ldr	r3, [pc, #200]	; (80002f8 <MX_ADC1_Init+0x130>)
 800022e:	2201      	movs	r2, #1
 8000230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000236:	2204      	movs	r2, #4
 8000238:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <MX_ADC1_Init+0x130>)
 800023c:	2200      	movs	r2, #0
 800023e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000242:	2200      	movs	r2, #0
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000246:	482c      	ldr	r0, [pc, #176]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000248:	f001 f8c8 	bl	80013dc <HAL_ADC_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000252:	f000 fbd0 	bl	80009f6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800025a:	f107 031c 	add.w	r3, r7, #28
 800025e:	4619      	mov	r1, r3
 8000260:	4825      	ldr	r0, [pc, #148]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000262:	f001 fd0d 	bl	8001c80 <HAL_ADCEx_MultiModeConfigChannel>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800026c:	f000 fbc3 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000270:	2301      	movs	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800027c:	2302      	movs	r3, #2
 800027e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	481a      	ldr	r0, [pc, #104]	; (80002f8 <MX_ADC1_Init+0x130>)
 800028e:	f001 fa37 	bl	8001700 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000298:	f000 fbad 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800029c:	2302      	movs	r3, #2
 800029e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4619      	mov	r1, r3
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <MX_ADC1_Init+0x130>)
 80002aa:	f001 fa29 	bl	8001700 <HAL_ADC_ConfigChannel>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80002b4:	f000 fb9f 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002b8:	2303      	movs	r3, #3
 80002ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002bc:	2303      	movs	r3, #3
 80002be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <MX_ADC1_Init+0x130>)
 80002c6:	f001 fa1b 	bl	8001700 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80002d0:	f000 fb91 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002d4:	2304      	movs	r3, #4
 80002d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002d8:	2304      	movs	r3, #4
 80002da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4619      	mov	r1, r3
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_ADC1_Init+0x130>)
 80002e2:	f001 fa0d 	bl	8001700 <HAL_ADC_ConfigChannel>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80002ec:	f000 fb83 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	3728      	adds	r7, #40	; 0x28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000028 	.word	0x20000028

080002fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	463b      	mov	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000312:	4b3c      	ldr	r3, [pc, #240]	; (8000404 <MX_ADC2_Init+0x108>)
 8000314:	4a3c      	ldr	r2, [pc, #240]	; (8000408 <MX_ADC2_Init+0x10c>)
 8000316:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000318:	4b3a      	ldr	r3, [pc, #232]	; (8000404 <MX_ADC2_Init+0x108>)
 800031a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800031e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000320:	4b38      	ldr	r3, [pc, #224]	; (8000404 <MX_ADC2_Init+0x108>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000326:	4b37      	ldr	r3, [pc, #220]	; (8000404 <MX_ADC2_Init+0x108>)
 8000328:	2201      	movs	r2, #1
 800032a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800032c:	4b35      	ldr	r3, [pc, #212]	; (8000404 <MX_ADC2_Init+0x108>)
 800032e:	2201      	movs	r2, #1
 8000330:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000332:	4b34      	ldr	r3, [pc, #208]	; (8000404 <MX_ADC2_Init+0x108>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033a:	4b32      	ldr	r3, [pc, #200]	; (8000404 <MX_ADC2_Init+0x108>)
 800033c:	2200      	movs	r2, #0
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000340:	4b30      	ldr	r3, [pc, #192]	; (8000404 <MX_ADC2_Init+0x108>)
 8000342:	2201      	movs	r2, #1
 8000344:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000346:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <MX_ADC2_Init+0x108>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800034c:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_ADC2_Init+0x108>)
 800034e:	2204      	movs	r2, #4
 8000350:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000352:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <MX_ADC2_Init+0x108>)
 8000354:	2201      	movs	r2, #1
 8000356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <MX_ADC2_Init+0x108>)
 800035c:	2204      	movs	r2, #4
 800035e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000360:	4b28      	ldr	r3, [pc, #160]	; (8000404 <MX_ADC2_Init+0x108>)
 8000362:	2200      	movs	r2, #0
 8000364:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000366:	4b27      	ldr	r3, [pc, #156]	; (8000404 <MX_ADC2_Init+0x108>)
 8000368:	2200      	movs	r2, #0
 800036a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800036c:	4825      	ldr	r0, [pc, #148]	; (8000404 <MX_ADC2_Init+0x108>)
 800036e:	f001 f835 	bl	80013dc <HAL_ADC_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000378:	f000 fb3d 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800037c:	2301      	movs	r3, #1
 800037e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000380:	2301      	movs	r3, #1
 8000382:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000394:	463b      	mov	r3, r7
 8000396:	4619      	mov	r1, r3
 8000398:	481a      	ldr	r0, [pc, #104]	; (8000404 <MX_ADC2_Init+0x108>)
 800039a:	f001 f9b1 	bl	8001700 <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80003a4:	f000 fb27 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ac:	2302      	movs	r3, #2
 80003ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003b0:	463b      	mov	r3, r7
 80003b2:	4619      	mov	r1, r3
 80003b4:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_ADC2_Init+0x108>)
 80003b6:	f001 f9a3 	bl	8001700 <HAL_ADC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80003c0:	f000 fb19 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003c4:	2303      	movs	r3, #3
 80003c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003c8:	2303      	movs	r3, #3
 80003ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003cc:	463b      	mov	r3, r7
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_ADC2_Init+0x108>)
 80003d2:	f001 f995 	bl	8001700 <HAL_ADC_ConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80003dc:	f000 fb0b 	bl	80009f6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003e0:	2304      	movs	r3, #4
 80003e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80003e4:	2304      	movs	r3, #4
 80003e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_ADC2_Init+0x108>)
 80003ee:	f001 f987 	bl	8001700 <HAL_ADC_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80003f8:	f000 fafd 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000078 	.word	0x20000078
 8000408:	50000100 	.word	0x50000100

0800040c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800042c:	d156      	bne.n	80004dc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800042e:	4b5b      	ldr	r3, [pc, #364]	; (800059c <HAL_ADC_MspInit+0x190>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	4a59      	ldr	r2, [pc, #356]	; (800059c <HAL_ADC_MspInit+0x190>)
 8000436:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000438:	4b58      	ldr	r3, [pc, #352]	; (800059c <HAL_ADC_MspInit+0x190>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d10b      	bne.n	8000458 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000440:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a56      	ldr	r2, [pc, #344]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 8000446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044a:	6153      	str	r3, [r2, #20]
 800044c:	4b54      	ldr	r3, [pc, #336]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000454:	61bb      	str	r3, [r7, #24]
 8000456:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a50      	ldr	r2, [pc, #320]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 800045e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	4b4e      	ldr	r3, [pc, #312]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000470:	230f      	movs	r3, #15
 8000472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000474:	2303      	movs	r3, #3
 8000476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 031c 	add.w	r3, r7, #28
 8000480:	4619      	mov	r1, r3
 8000482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000486:	f002 f83f 	bl	8002508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800048a:	4b46      	ldr	r3, [pc, #280]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 800048c:	4a46      	ldr	r2, [pc, #280]	; (80005a8 <HAL_ADC_MspInit+0x19c>)
 800048e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000490:	4b44      	ldr	r3, [pc, #272]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000496:	4b43      	ldr	r3, [pc, #268]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800049c:	4b41      	ldr	r3, [pc, #260]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80004a2:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004aa:	4b3e      	ldr	r3, [pc, #248]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004b4:	2220      	movs	r2, #32
 80004b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004b8:	4b3a      	ldr	r3, [pc, #232]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004be:	4839      	ldr	r0, [pc, #228]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004c0:	f001 ff17 	bl	80022f2 <HAL_DMA_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80004ca:	f000 fa94 	bl	80009f6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a34      	ldr	r2, [pc, #208]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004d2:	639a      	str	r2, [r3, #56]	; 0x38
 80004d4:	4a33      	ldr	r2, [pc, #204]	; (80005a4 <HAL_ADC_MspInit+0x198>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80004da:	e05a      	b.n	8000592 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a32      	ldr	r2, [pc, #200]	; (80005ac <HAL_ADC_MspInit+0x1a0>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d155      	bne.n	8000592 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <HAL_ADC_MspInit+0x190>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a2b      	ldr	r2, [pc, #172]	; (800059c <HAL_ADC_MspInit+0x190>)
 80004ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <HAL_ADC_MspInit+0x190>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d10b      	bne.n	8000510 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a28      	ldr	r2, [pc, #160]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 80004fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000502:	6153      	str	r3, [r2, #20]
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 8000516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051a:	6153      	str	r3, [r2, #20]
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <HAL_ADC_MspInit+0x194>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000528:	23f0      	movs	r3, #240	; 0xf0
 800052a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	2303      	movs	r3, #3
 800052e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f001 ffe3 	bl	8002508 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <HAL_ADC_MspInit+0x1a8>)
 8000546:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 800055c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000560:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 8000564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000568:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 800056c:	2220      	movs	r2, #32
 800056e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 8000578:	f001 febb 	bl	80022f2 <HAL_DMA_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8000582:	f000 fa38 	bl	80009f6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_ADC_MspInit+0x1a4>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000592:	bf00      	nop
 8000594:	3730      	adds	r7, #48	; 0x30
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000150 	.word	0x20000150
 80005a0:	40021000 	.word	0x40021000
 80005a4:	200000c8 	.word	0x200000c8
 80005a8:	40020008 	.word	0x40020008
 80005ac:	50000100 	.word	0x50000100
 80005b0:	2000010c 	.word	0x2000010c
 80005b4:	4002001c 	.word	0x4002001c

080005b8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_CAN_Init+0x60>)
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_CAN_Init+0x64>)
 80005c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_CAN_Init+0x60>)
 80005c4:	2210      	movs	r2, #16
 80005c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_CAN_Init+0x60>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_CAN_Init+0x60>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_CAN_Init+0x60>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_CAN_Init+0x60>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_CAN_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_CAN_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_CAN_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_CAN_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_CAN_Init+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_CAN_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_CAN_Init+0x60>)
 8000606:	f001 fc67 	bl	8001ed8 <HAL_CAN_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000610:	f000 f9f1 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000154 	.word	0x20000154
 800061c:	40006400 	.word	0x40006400

08000620 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <HAL_CAN_MspInit+0x80>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d129      	bne.n	8000696 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_CAN_MspInit+0x84>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <HAL_CAN_MspInit+0x84>)
 8000648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_CAN_MspInit+0x84>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_CAN_MspInit+0x84>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <HAL_CAN_MspInit+0x84>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_CAN_MspInit+0x84>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000672:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000684:	2309      	movs	r3, #9
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f001 ff39 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40006400 	.word	0x40006400
 80006a4:	40021000 	.word	0x40021000

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_DMA_Init+0x48>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_DMA_Init+0x48>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_DMA_Init+0x48>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	200b      	movs	r0, #11
 80006cc:	f001 fddb 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d0:	200b      	movs	r0, #11
 80006d2:	f001 fdf4 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200c      	movs	r0, #12
 80006dc:	f001 fdd3 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006e0:	200c      	movs	r0, #12
 80006e2:	f001 fdec 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <MX_GPIO_Init+0xe8>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a33      	ldr	r2, [pc, #204]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a2d      	ldr	r2, [pc, #180]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_GPIO_Init+0xe8>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xe8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|LED11_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <MX_GPIO_Init+0xec>)
 8000772:	f002 f83b 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	21f0      	movs	r1, #240	; 0xf0
 800077a:	481a      	ldr	r0, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800077c:	f002 f836 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED10_Pin|LED11_Pin;
 8000780:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MX_GPIO_Init+0xec>)
 800079a:	f001 feb5 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN01_Pin|BTN00_Pin;
 800079e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0xec>)
 80007b4:	f001 fea8 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin;
 80007b8:	23f0      	movs	r3, #240	; 0xf0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_GPIO_Init+0xf0>)
 80007d0:	f001 fe9a 	bl	8002508 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000800 	.word	0x48000800
 80007e4:	48000400 	.word	0x48000400

080007e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_I2C1_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_I2C1_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_I2C1_Init+0x74>)
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_I2C1_Init+0x7c>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_I2C1_Init+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <MX_I2C1_Init+0x74>)
 8000824:	f001 fffa 	bl	800281c <HAL_I2C_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082e:	f000 f8e2 	bl	80009f6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_I2C1_Init+0x74>)
 8000836:	f002 f880 	bl	800293a <HAL_I2CEx_ConfigAnalogFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 f8d9 	bl	80009f6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_I2C1_Init+0x74>)
 8000848:	f002 f8c2 	bl	80029d0 <HAL_I2CEx_ConfigDigitalFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f8d0 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000017c 	.word	0x2000017c
 8000860:	40005400 	.word	0x40005400
 8000864:	2000090e 	.word	0x2000090e

08000868 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d128      	bne.n	80008dc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a8:	2312      	movs	r3, #18
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b4:	2304      	movs	r3, #4
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <HAL_I2C_MspInit+0x84>)
 80008c0:	f001 fe22 	bl	8002508 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fd0c 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f819 	bl	800092e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff fefa 	bl	80006f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000900:	f7ff fed2 	bl	80006a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000904:	f7ff fc60 	bl	80001c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000908:	f7ff fcf8 	bl	80002fc <MX_ADC2_Init>
  MX_CAN_Init();
 800090c:	f7ff fe54 	bl	80005b8 <MX_CAN_Init>
  MX_I2C1_Init();
 8000910:	f7ff ff6a 	bl	80007e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000914:	f000 f8e8 	bl	8000ae8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000918:	f000 f98a 	bl	8000c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 800091c:	f000 fa08 	bl	8000d30 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000920:	f000 fa88 	bl	8000e34 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000924:	f000 fbf4 	bl	8001110 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000928:	f000 fc22 	bl	8001170 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x3c>

0800092e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b096      	sub	sp, #88	; 0x58
 8000932:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000938:	2228      	movs	r2, #40	; 0x28
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fd11 	bl	8005364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000964:	2303      	movs	r3, #3
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	2301      	movs	r3, #1
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2310      	movs	r3, #16
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000982:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000984:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800098e:	4618      	mov	r0, r3
 8000990:	f002 f86a 	bl	8002a68 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x70>
  {
    Error_Handler();
 800099a:	f000 f82c 	bl	80009f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2102      	movs	r1, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 f892 	bl	8003ae4 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009c6:	f000 f816 	bl	80009f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80009ca:	f241 0321 	movw	r3, #4129	; 0x1021
 80009ce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fab6 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009ea:	f000 f804 	bl	80009f6 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3758      	adds	r7, #88	; 0x58
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fa:	b672      	cpsid	i
}
 80009fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fe:	e7fe      	b.n	80009fe <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 fc82 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DMA1_Channel1_IRQHandler+0x10>)
 8000aa2:	f001 fc6d 	bl	8002380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000c8 	.word	0x200000c8

08000ab0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ab6:	f001 fc63 	bl	8002380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000010c 	.word	0x2000010c

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	; 0x40
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b26:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <MX_TIM1_Init+0x144>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b36:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b44:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b50:	4835      	ldr	r0, [pc, #212]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b52:	f003 fb33 	bl	80041bc <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b5c:	f7ff ff4b 	bl	80009f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482e      	ldr	r0, [pc, #184]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b6e:	f003 fc6f 	bl	8004450 <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b78:	f7ff ff3d 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b7c:	482a      	ldr	r0, [pc, #168]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000b7e:	f003 fb74 	bl	800426a <HAL_TIM_IC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b88:	f7ff ff35 	bl	80009f6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b90:	2350      	movs	r3, #80	; 0x50
 8000b92:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000ba8:	f003 fd1b 	bl	80045e2 <HAL_TIM_SlaveConfigSynchro>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000bb2:	f7ff ff20 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4816      	ldr	r0, [pc, #88]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000bd0:	f003 fba2 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bda:	f7ff ff0c 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000be2:	2302      	movs	r3, #2
 8000be4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2204      	movs	r2, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000bf0:	f003 fb92 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bfa:	f7ff fefc 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_TIM1_Init+0x140>)
 8000c10:	f003 ffe2 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000c1a:	f7ff feec 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3740      	adds	r7, #64	; 0x40
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001c8 	.word	0x200001c8
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c86:	4829      	ldr	r0, [pc, #164]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000c88:	f003 faef 	bl	800426a <HAL_TIM_IC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000c92:	f7ff feb0 	bl	80009f6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c96:	2304      	movs	r3, #4
 8000c98:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c9a:	2350      	movs	r3, #80	; 0x50
 8000c9c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000cb2:	f003 fc96 	bl	80045e2 <HAL_TIM_SlaveConfigSynchro>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cbc:	f7ff fe9b 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000cda:	f003 fb1d 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000ce4:	f7ff fe87 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000cfa:	f003 fb0d 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d04:	f7ff fe77 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_TIM2_Init+0xfc>)
 8000d16:	f003 ff5f 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000d20:	f7ff fe69 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000214 	.word	0x20000214

08000d30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d5e:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d60:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <MX_TIM3_Init+0x100>)
 8000d62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d84:	4829      	ldr	r0, [pc, #164]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000d86:	f003 fa70 	bl	800426a <HAL_TIM_IC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d90:	f7ff fe31 	bl	80009f6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d94:	2304      	movs	r3, #4
 8000d96:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d98:	2350      	movs	r3, #80	; 0x50
 8000d9a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481f      	ldr	r0, [pc, #124]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000db0:	f003 fc17 	bl	80045e2 <HAL_TIM_SlaveConfigSynchro>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000dba:	f7ff fe1c 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000dd8:	f003 fa9e 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000de2:	f7ff fe08 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000de6:	2302      	movs	r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dea:	2302      	movs	r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2204      	movs	r2, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000df8:	f003 fa8e 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e02:	f7ff fdf8 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_TIM3_Init+0xfc>)
 8000e14:	f003 fee0 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000e1e:	f7ff fdea 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000260 	.word	0x20000260
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e64:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <MX_TIM15_Init+0x104>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000e8e:	4829      	ldr	r0, [pc, #164]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000e90:	f003 f9eb 	bl	800426a <HAL_TIM_IC_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f7ff fdac 	bl	80009f6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ea2:	2350      	movs	r3, #80	; 0x50
 8000ea4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481e      	ldr	r0, [pc, #120]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000eba:	f003 fb92 	bl	80045e2 <HAL_TIM_SlaveConfigSynchro>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000ec4:	f7ff fd97 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000ee2:	f003 fa19 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 8000eec:	f7ff fd83 	bl	80009f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2204      	movs	r2, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000f02:	f003 fa09 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 8000f0c:	f7ff fd73 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_TIM15_Init+0x100>)
 8000f1e:	f003 fe5b 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000f28:	f7ff fd65 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200002ac 	.word	0x200002ac
 8000f38:	40014000 	.word	0x40014000

08000f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_TIM_Base_MspInit+0x80>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d129      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_TIM_Base_MspInit+0x84>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_TIM_Base_MspInit+0x84>)
 8000f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_TIM_Base_MspInit+0x84>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_TIM_Base_MspInit+0x84>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_TIM_Base_MspInit+0x84>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_TIM_Base_MspInit+0x84>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 faab 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40012c00 	.word	0x40012c00
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d12a      	bne.n	800103c <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b45      	ldr	r3, [pc, #276]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a44      	ldr	r2, [pc, #272]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001028:	2301      	movs	r3, #1
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f001 fa67 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800103a:	e05b      	b.n	80010f4 <HAL_TIM_IC_MspInit+0x130>
  else if(tim_icHandle->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <HAL_TIM_IC_MspInit+0x13c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d128      	bne.n	8001098 <HAL_TIM_IC_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 8001064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001086:	2302      	movs	r3, #2
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <HAL_TIM_IC_MspInit+0x140>)
 8001092:	f001 fa39 	bl	8002508 <HAL_GPIO_Init>
}
 8001096:	e02d      	b.n	80010f4 <HAL_TIM_IC_MspInit+0x130>
  else if(tim_icHandle->Instance==TIM15)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_TIM_IC_MspInit+0x144>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d128      	bne.n	80010f4 <HAL_TIM_IC_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_TIM_IC_MspInit+0x138>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80010e4:	2301      	movs	r3, #1
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <HAL_TIM_IC_MspInit+0x148>)
 80010f0:	f001 fa0a 	bl	8002508 <HAL_GPIO_Init>
}
 80010f4:	bf00      	nop
 80010f6:	3738      	adds	r7, #56	; 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	40000400 	.word	0x40000400
 8001104:	48000800 	.word	0x48000800
 8001108:	40014000 	.word	0x40014000
 800110c:	48000400 	.word	0x48000400

08001110 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART1_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800111c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001154:	f003 fdae 	bl	8004cb4 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f7ff fc4a 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200002f8 	.word	0x200002f8
 800116c:	40013800 	.word	0x40013800

08001170 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <MX_USART3_UART_Init+0x5c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800117c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011b4:	f003 fd7e 	bl	8004cb4 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011be:	f7ff fc1a 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000037c 	.word	0x2000037c
 80011cc:	40004800 	.word	0x40004800

080011d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_UART_MspInit+0xdc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12a      	bne.n	8001248 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	6153      	str	r3, [r2, #20]
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001222:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001234:	2307      	movs	r3, #7
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f001 f961 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001246:	e02d      	b.n	80012a4 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_UART_MspInit+0xe4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d128      	bne.n	80012a4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6153      	str	r3, [r2, #20]
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_UART_MspInit+0xe0>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001282:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001294:	2307      	movs	r3, #7
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <HAL_UART_MspInit+0xe8>)
 80012a0:	f001 f932 	bl	8002508 <HAL_GPIO_Init>
}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40004800 	.word	0x40004800
 80012b8:	48000400 	.word	0x48000400

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490e      	ldr	r1, [pc, #56]	; (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e6:	f7ff fbed 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f004 f817 	bl	800531c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff faff 	bl	80008f0 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001300:	080053cc 	.word	0x080053cc
  ldr r2, =_sbss
 8001304:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001308:	20000404 	.word	0x20000404

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 ffa5 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fb68 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 ffbd 	bl	80022da <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 ff85 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000000 	.word	0x20000000
 8001394:	20000008 	.word	0x20000008
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000400 	.word	0x20000400

080013c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000400 	.word	0x20000400

080013dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09a      	sub	sp, #104	; 0x68
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e172      	b.n	80016e2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d176      	bne.n	80014fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d152      	bne.n	80014bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7fe ffeb 	bl	800040c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d13b      	bne.n	80014bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fce1 	bl	8001e0c <ADC_Disable>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	d12f      	bne.n	80014bc <HAL_ADC_Init+0xe0>
 800145c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001460:	2b00      	cmp	r3, #0
 8001462:	d12b      	bne.n	80014bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800146c:	f023 0302 	bic.w	r3, r3, #2
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001486:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001496:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001498:	4b94      	ldr	r3, [pc, #592]	; (80016ec <HAL_ADC_Init+0x310>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a94      	ldr	r2, [pc, #592]	; (80016f0 <HAL_ADC_Init+0x314>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d8:	d110      	bne.n	80014fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f023 0312 	bic.w	r3, r3, #18
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 80df 	bne.w	80016c8 <HAL_ADC_Init+0x2ec>
 800150a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 80da 	bne.w	80016c8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 80d2 	bne.w	80016c8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001534:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_ADC_Init+0x318>)
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001540:	d102      	bne.n	8001548 <HAL_ADC_Init+0x16c>
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <HAL_ADC_Init+0x31c>)
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e002      	b.n	800154e <HAL_ADC_Init+0x172>
 8001548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800154c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <HAL_ADC_Init+0x192>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_ADC_Init+0x192>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_ADC_Init+0x194>
 800156e:	2300      	movs	r3, #0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d11c      	bne.n	80015ae <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001574:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001576:	2b00      	cmp	r3, #0
 8001578:	d010      	beq.n	800159c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_ADC_Init+0x1ba>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Init+0x1ba>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_ADC_Init+0x1bc>
 8001596:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001598:	2b00      	cmp	r3, #0
 800159a:	d108      	bne.n	80015ae <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800159c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ac:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7e5b      	ldrb	r3, [r3, #25]
 80015b2:	035b      	lsls	r3, r3, #13
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015b8:	2a01      	cmp	r2, #1
 80015ba:	d002      	beq.n	80015c2 <HAL_ADC_Init+0x1e6>
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	e000      	b.n	80015c4 <HAL_ADC_Init+0x1e8>
 80015c2:	2200      	movs	r2, #0
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015d4:	4313      	orrs	r3, r2
 80015d6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d11b      	bne.n	800161a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7e5b      	ldrb	r3, [r3, #25]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	3b01      	subs	r3, #1
 80015f0:	045a      	lsls	r2, r3, #17
 80015f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015f4:	4313      	orrs	r3, r2
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	663b      	str	r3, [r7, #96]	; 0x60
 80015fc:	e00d      	b.n	800161a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001606:	f043 0220 	orr.w	r2, r3, #32
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	2b01      	cmp	r3, #1
 8001620:	d007      	beq.n	8001632 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	4313      	orrs	r3, r2
 800162c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800162e:	4313      	orrs	r3, r2
 8001630:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b00      	cmp	r3, #0
 800163e:	d114      	bne.n	800166a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800164e:	f023 0302 	bic.w	r3, r3, #2
 8001652:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e1b      	ldrb	r3, [r3, #24]
 8001658:	039a      	lsls	r2, r3, #14
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4313      	orrs	r3, r2
 8001664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001666:	4313      	orrs	r3, r2
 8001668:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_ADC_Init+0x320>)
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800167a:	430b      	orrs	r3, r1
 800167c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10c      	bne.n	80016a0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f023 010f 	bic.w	r1, r3, #15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
 800169e:	e007      	b.n	80016b0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 020f 	bic.w	r2, r2, #15
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
 80016c6:	e00a      	b.n	80016de <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f023 0312 	bic.w	r3, r3, #18
 80016d0:	f043 0210 	orr.w	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3768      	adds	r7, #104	; 0x68
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83
 80016f4:	50000300 	.word	0x50000300
 80016f8:	50000100 	.word	0x50000100
 80016fc:	fff0c007 	.word	0xfff0c007

08001700 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001700:	b480      	push	{r7}
 8001702:	b09b      	sub	sp, #108	; 0x6c
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x22>
 800171e:	2302      	movs	r3, #2
 8001720:	e2a4      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x56c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f040 8288 	bne.w	8001c4a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d81c      	bhi.n	800177c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	461a      	mov	r2, r3
 8001756:	231f      	movs	r3, #31
 8001758:	4093      	lsls	r3, r2
 800175a:	43db      	mvns	r3, r3
 800175c:	4019      	ands	r1, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
 800177a:	e063      	b.n	8001844 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b09      	cmp	r3, #9
 8001782:	d81e      	bhi.n	80017c2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	3b1e      	subs	r3, #30
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4019      	ands	r1, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	3b1e      	subs	r3, #30
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
 80017c0:	e040      	b.n	8001844 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b0e      	cmp	r3, #14
 80017c8:	d81e      	bhi.n	8001808 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	3b3c      	subs	r3, #60	; 0x3c
 80017de:	221f      	movs	r2, #31
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4019      	ands	r1, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	3b3c      	subs	r3, #60	; 0x3c
 80017fa:	fa00 f203 	lsl.w	r2, r0, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
 8001806:	e01d      	b.n	8001844 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	3b5a      	subs	r3, #90	; 0x5a
 800181c:	221f      	movs	r2, #31
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	4019      	ands	r1, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	3b5a      	subs	r3, #90	; 0x5a
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 80e5 	bne.w	8001a1e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d91c      	bls.n	8001896 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6999      	ldr	r1, [r3, #24]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	3b1e      	subs	r3, #30
 800186e:	2207      	movs	r2, #7
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	4019      	ands	r1, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	3b1e      	subs	r3, #30
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	619a      	str	r2, [r3, #24]
 8001894:	e019      	b.n	80018ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6959      	ldr	r1, [r3, #20]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	2207      	movs	r2, #7
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4019      	ands	r1, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6898      	ldr	r0, [r3, #8]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	fa00 f203 	lsl.w	r2, r0, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d84f      	bhi.n	800198c <HAL_ADC_ConfigChannel+0x28c>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001927 	.word	0x08001927
 80018fc:	08001949 	.word	0x08001949
 8001900:	0800196b 	.word	0x0800196b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800190a:	4b94      	ldr	r3, [pc, #592]	; (8001b5c <HAL_ADC_ConfigChannel+0x45c>)
 800190c:	4013      	ands	r3, r2
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	0691      	lsls	r1, r2, #26
 8001914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001916:	430a      	orrs	r2, r1
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001922:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001924:	e07e      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800192c:	4b8b      	ldr	r3, [pc, #556]	; (8001b5c <HAL_ADC_ConfigChannel+0x45c>)
 800192e:	4013      	ands	r3, r2
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	0691      	lsls	r1, r2, #26
 8001936:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001938:	430a      	orrs	r2, r1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001944:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001946:	e06d      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800194e:	4b83      	ldr	r3, [pc, #524]	; (8001b5c <HAL_ADC_ConfigChannel+0x45c>)
 8001950:	4013      	ands	r3, r2
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	0691      	lsls	r1, r2, #26
 8001958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800195a:	430a      	orrs	r2, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001966:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001968:	e05c      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001970:	4b7a      	ldr	r3, [pc, #488]	; (8001b5c <HAL_ADC_ConfigChannel+0x45c>)
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	0691      	lsls	r1, r2, #26
 800197a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800197c:	430a      	orrs	r2, r1
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001988:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800198a:	e04b      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	069b      	lsls	r3, r3, #26
 800199c:	429a      	cmp	r2, r3
 800199e:	d107      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	069b      	lsls	r3, r3, #26
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	069b      	lsls	r3, r3, #26
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d107      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	069b      	lsls	r3, r3, #26
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d10a      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a1c:	e001      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a1e:	bf00      	nop
 8001a20:	e000      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a22:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x344>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x344>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x346>
 8001a44:	2300      	movs	r3, #0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 810a 	bne.w	8001c60 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d00f      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a72:	e049      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	d91c      	bls.n	8001ad0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6999      	ldr	r1, [r3, #24]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b1b      	subs	r3, #27
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	4019      	ands	r1, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6898      	ldr	r0, [r3, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1b      	subs	r3, #27
 8001ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	619a      	str	r2, [r3, #24]
 8001ace:	e01b      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6959      	ldr	r1, [r3, #20]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4019      	ands	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6898      	ldr	r0, [r3, #8]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_ADC_ConfigChannel+0x460>)
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b24:	2b11      	cmp	r3, #17
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b38:	2b12      	cmp	r3, #18
 8001b3a:	f040 8091 	bne.w	8001c60 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 808a 	bne.w	8001c60 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b54:	d108      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x468>
 8001b56:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_ADC_ConfigChannel+0x464>)
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e008      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x46e>
 8001b5c:	83fff000 	.word	0x83fff000
 8001b60:	50000300 	.word	0x50000300
 8001b64:	50000100 	.word	0x50000100
 8001b68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b6c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x48e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x48e>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x490>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d150      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d010      	beq.n	8001bbc <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x4b8>
 8001bb6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d13c      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d11d      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x500>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bcc:	d118      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_ADC_ConfigChannel+0x578>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_ADC_ConfigChannel+0x57c>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	0c9a      	lsrs	r2, r3, #18
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bfe:	e02e      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b11      	cmp	r3, #17
 8001c06:	d10b      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x520>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c10:	d106      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1e:	e01e      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d11a      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c34:	e013      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c48:	e00a      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c5c:	e000      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	376c      	adds	r7, #108	; 0x6c
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b099      	sub	sp, #100	; 0x64
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c98:	d102      	bne.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	e002      	b.n	8001ca6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ca4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0a2      	b.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e09b      	b.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d17f      	bne.n	8001dd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d179      	bne.n	8001dd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce0:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001ce2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d040      	beq.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfe:	035b      	lsls	r3, r3, #13
 8001d00:	430b      	orrs	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d06:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d15c      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001d4a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d14b      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d58:	f023 030f 	bic.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	6811      	ldr	r1, [r2, #0]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	6892      	ldr	r2, [r2, #8]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d6c:	e03c      	b.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d78:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d108      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d123      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001dbc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d112      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dca:	f023 030f 	bic.w	r3, r3, #15
 8001dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dd0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dd2:	e009      	b.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001de6:	e000      	b.n	8001dea <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001df6:	4618      	mov	r0, r3
 8001df8:	3764      	adds	r7, #100	; 0x64
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	50000100 	.word	0x50000100
 8001e08:	50000300 	.word	0x50000300

08001e0c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <ADC_Disable+0x2c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <ADC_Disable+0x2c>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <ADC_Disable+0x2e>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d047      	beq.n	8001ece <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030d 	and.w	r3, r3, #13
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10f      	bne.n	8001e6c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0202 	orr.w	r2, r2, #2
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2203      	movs	r2, #3
 8001e62:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e64:	f7ff faae 	bl	80013c4 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e6a:	e029      	b.n	8001ec0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e023      	b.n	8001ed0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e88:	f7ff fa9c 	bl	80013c4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d914      	bls.n	8001ec0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10d      	bne.n	8001ec0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e007      	b.n	8001ed0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d0dc      	beq.n	8001e88 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0ed      	b.n	80020c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fb92 	bl	8000620 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f0c:	f7ff fa5a 	bl	80013c4 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f12:	e012      	b.n	8001f3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f14:	f7ff fa56 	bl	80013c4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d90b      	bls.n	8001f3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2205      	movs	r2, #5
 8001f32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0c5      	b.n	80020c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0e5      	beq.n	8001f14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0202 	bic.w	r2, r2, #2
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f58:	f7ff fa34 	bl	80013c4 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f5e:	e012      	b.n	8001f86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f60:	f7ff fa30 	bl	80013c4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b0a      	cmp	r3, #10
 8001f6c:	d90b      	bls.n	8001f86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e09f      	b.n	80020c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e5      	bne.n	8001f60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e007      	b.n	8001fbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7e5b      	ldrb	r3, [r3, #25]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e007      	b.n	8001fe8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7e9b      	ldrb	r3, [r3, #26]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d108      	bne.n	8002002 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e007      	b.n	8002012 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0220 	bic.w	r2, r2, #32
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7edb      	ldrb	r3, [r3, #27]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d108      	bne.n	800202c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0210 	bic.w	r2, r2, #16
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e007      	b.n	800203c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0210 	orr.w	r2, r2, #16
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7f1b      	ldrb	r3, [r3, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d108      	bne.n	8002056 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0208 	orr.w	r2, r2, #8
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0208 	bic.w	r2, r2, #8
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7f5b      	ldrb	r3, [r3, #29]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d108      	bne.n	8002080 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0204 	orr.w	r2, r2, #4
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e007      	b.n	8002090 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	ea42 0103 	orr.w	r1, r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff3e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff31 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e037      	b.n	8002378 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800231e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8b4 	bl	80024c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}  
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2204      	movs	r2, #4
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d024      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x72>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01f      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0204 	bic.w	r2, r2, #4
 80023ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	2104      	movs	r1, #4
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d06a      	beq.n	80024be <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80023f0:	e065      	b.n	80024be <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2202      	movs	r2, #2
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d02c      	beq.n	800245c <HAL_DMA_IRQHandler+0xdc>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d027      	beq.n	800245c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020a 	bic.w	r2, r2, #10
 8002428:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	2102      	movs	r1, #2
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d035      	beq.n	80024be <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800245a:	e030      	b.n	80024be <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2208      	movs	r2, #8
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d028      	beq.n	80024be <HAL_DMA_IRQHandler+0x13e>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d023      	beq.n	80024be <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 020e 	bic.w	r2, r2, #14
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
    }
  }
}  
 80024bc:	e7ff      	b.n	80024be <HAL_DMA_IRQHandler+0x13e>
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <DMA_CalcBaseAndBitshift+0x34>)
 80024d8:	4413      	add	r3, r2
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <DMA_CalcBaseAndBitshift+0x38>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a06      	ldr	r2, [pc, #24]	; (8002504 <DMA_CalcBaseAndBitshift+0x3c>)
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	bffdfff8 	.word	0xbffdfff8
 8002500:	cccccccd 	.word	0xcccccccd
 8002504:	40020000 	.word	0x40020000

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002516:	e14e      	b.n	80027b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8140 	beq.w	80027b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d005      	beq.n	8002548 <HAL_GPIO_Init+0x40>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d130      	bne.n	80025aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0201 	and.w	r2, r3, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d017      	beq.n	80025e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d123      	bne.n	800263a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	6939      	ldr	r1, [r7, #16]
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 809a 	beq.w	80027b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267c:	4b55      	ldr	r3, [pc, #340]	; (80027d4 <HAL_GPIO_Init+0x2cc>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_GPIO_Init+0x2cc>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_GPIO_Init+0x2cc>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_GPIO_Init+0x2d0>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026be:	d013      	beq.n	80026e8 <HAL_GPIO_Init+0x1e0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a46      	ldr	r2, [pc, #280]	; (80027dc <HAL_GPIO_Init+0x2d4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00d      	beq.n	80026e4 <HAL_GPIO_Init+0x1dc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a45      	ldr	r2, [pc, #276]	; (80027e0 <HAL_GPIO_Init+0x2d8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d007      	beq.n	80026e0 <HAL_GPIO_Init+0x1d8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a44      	ldr	r2, [pc, #272]	; (80027e4 <HAL_GPIO_Init+0x2dc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d101      	bne.n	80026dc <HAL_GPIO_Init+0x1d4>
 80026d8:	2303      	movs	r3, #3
 80026da:	e006      	b.n	80026ea <HAL_GPIO_Init+0x1e2>
 80026dc:	2305      	movs	r3, #5
 80026de:	e004      	b.n	80026ea <HAL_GPIO_Init+0x1e2>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x1e2>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_GPIO_Init+0x1e2>
 80026e8:	2300      	movs	r3, #0
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	f002 0203 	and.w	r2, r2, #3
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	4093      	lsls	r3, r2
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026fa:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_GPIO_Init+0x2d0>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800272c:	4a2e      	ldr	r2, [pc, #184]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002756:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_GPIO_Init+0x2e0>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f aea9 	bne.w	8002518 <HAL_GPIO_Init+0x10>
  }
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000
 80027dc:	48000400 	.word	0x48000400
 80027e0:	48000800 	.word	0x48000800
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002808:	e002      	b.n	8002810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e081      	b.n	8002932 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f810 	bl	8000868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800286c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e006      	b.n	80028a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d104      	bne.n	80028b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69d9      	ldr	r1, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1a      	ldr	r2, [r3, #32]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b20      	cmp	r3, #32
 800294e:	d138      	bne.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800295a:	2302      	movs	r3, #2
 800295c:	e032      	b.n	80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2224      	movs	r2, #36	; 0x24
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800298c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d139      	bne.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e033      	b.n	8002a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f001 b823 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 817d 	beq.w	8002d9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002aa4:	4bbc      	ldr	r3, [pc, #752]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00c      	beq.n	8002aca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab0:	4bb9      	ldr	r3, [pc, #740]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d15c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x10e>
 8002abc:	4bb6      	ldr	r3, [pc, #728]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d155      	bne.n	8002b76 <HAL_RCC_OscConfig+0x10e>
 8002aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ace:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ade:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0x94>
 8002af6:	4ba8      	ldr	r3, [pc, #672]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0xc0>
 8002afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b24:	4b9c      	ldr	r3, [pc, #624]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f042 0220 	orr.w	r2, r2, #32
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f002 021f 	and.w	r2, r2, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 811f 	beq.w	8002d9c <HAL_RCC_OscConfig+0x334>
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8116 	bne.w	8002d9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f000 bfaf 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12e>
 8002b88:	4b83      	ldr	r3, [pc, #524]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a82      	ldr	r2, [pc, #520]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e036      	b.n	8002c04 <HAL_RCC_OscConfig+0x19c>
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x158>
 8002ba6:	4b7c      	ldr	r3, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a78      	ldr	r2, [pc, #480]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e021      	b.n	8002c04 <HAL_RCC_OscConfig+0x19c>
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x184>
 8002bd2:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a70      	ldr	r2, [pc, #448]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6e      	ldr	r3, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6d      	ldr	r2, [pc, #436]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0x19c>
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a69      	ldr	r2, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	f023 020f 	bic.w	r2, r3, #15
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	495f      	ldr	r1, [pc, #380]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d059      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fbc9 	bl	80013c4 <HAL_GetTick>
 8002c32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fbc4 	bl	80013c4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	; 0x64
 8002c46:	d902      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f000 bf43 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
 8002c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_RCC_OscConfig+0x218>
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	e015      	b.n	8002cac <HAL_RCC_OscConfig+0x244>
 8002c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002cc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f042 0220 	orr.w	r2, r2, #32
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f002 021f 	and.w	r2, r2, #31
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ab      	beq.n	8002c38 <HAL_RCC_OscConfig+0x1d0>
 8002ce0:	e05d      	b.n	8002d9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fb6f 	bl	80013c4 <HAL_GetTick>
 8002ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fb6a 	bl	80013c4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d902      	bls.n	8002d02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	f000 bee9 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
 8002d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2cc>
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e015      	b.n	8002d60 <HAL_RCC_OscConfig+0x2f8>
 8002d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_RCC_OscConfig+0x330>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d6c:	fa92 f2a2 	rbit	r2, r2
 8002d70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f042 0220 	orr.w	r2, r2, #32
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ab      	bne.n	8002cec <HAL_RCC_OscConfig+0x284>
 8002d94:	e003      	b.n	8002d9e <HAL_RCC_OscConfig+0x336>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 817d 	beq.w	80030ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002db4:	4ba6      	ldr	r3, [pc, #664]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dc0:	4ba3      	ldr	r3, [pc, #652]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d172      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x44a>
 8002dcc:	4ba0      	ldr	r3, [pc, #640]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d16c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x44a>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_RCC_OscConfig+0x3a0>
 8002e02:	4b93      	ldr	r3, [pc, #588]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e013      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c8>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e2c:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2202      	movs	r2, #2
 8002e32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e3a:	fa92 f2a2 	rbit	r2, r2
 8002e3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCC_OscConfig+0x410>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f000 be2e 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	21f8      	movs	r1, #248	; 0xf8
 8002e8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e96:	fa91 f1a1 	rbit	r1, r1
 8002e9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ea2:	fab1 f181 	clz	r1, r1
 8002ea6:	b2c9      	uxtb	r1, r1
 8002ea8:	408b      	lsls	r3, r1
 8002eaa:	4969      	ldr	r1, [pc, #420]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb0:	e0fd      	b.n	80030ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8088 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x56c>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ed6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	461a      	mov	r2, r3
 8002eec:	2301      	movs	r3, #1
 8002eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fa68 	bl	80013c4 <HAL_GetTick>
 8002ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe fa63 	bl	80013c4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	f000 bde2 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d8>
 8002f3a:	4b45      	ldr	r3, [pc, #276]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0x500>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f72:	fa92 f2a2 	rbit	r2, r2
 8002f76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f002 021f 	and.w	r2, r2, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f202 	lsl.w	r2, r1, r2
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0af      	beq.n	8002efa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	21f8      	movs	r1, #248	; 0xf8
 8002fb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fb8:	fa91 f1a1 	rbit	r1, r1
 8002fbc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fc4:	fab1 f181 	clz	r1, r1
 8002fc8:	b2c9      	uxtb	r1, r1
 8002fca:	408b      	lsls	r3, r1
 8002fcc:	4920      	ldr	r1, [pc, #128]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
 8002fd2:	e06c      	b.n	80030ae <HAL_RCC_OscConfig+0x646>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe f9e0 	bl	80013c4 <HAL_GetTick>
 8003004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300a:	f7fe f9db 	bl	80013c4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	f000 bd5a 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d104      	bne.n	8003054 <HAL_RCC_OscConfig+0x5ec>
 800304a:	4b01      	ldr	r3, [pc, #4]	; (8003050 <HAL_RCC_OscConfig+0x5e8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	e015      	b.n	800307c <HAL_RCC_OscConfig+0x614>
 8003050:	40021000 	.word	0x40021000
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003066:	2302      	movs	r3, #2
 8003068:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800306c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003078:	4bc8      	ldr	r3, [pc, #800]	; (800339c <HAL_RCC_OscConfig+0x934>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2202      	movs	r2, #2
 800307e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003082:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800308e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ad      	bne.n	800300a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8110 	beq.w	80032e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d079      	beq.n	80031c8 <HAL_RCC_OscConfig+0x760>
 80030d4:	2301      	movs	r3, #1
 80030d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	4bab      	ldr	r3, [pc, #684]	; (80033a0 <HAL_RCC_OscConfig+0x938>)
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	461a      	mov	r2, r3
 80030fa:	2301      	movs	r3, #1
 80030fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe f961 	bl	80013c4 <HAL_GetTick>
 8003102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003108:	f7fe f95c 	bl	80013c4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d902      	bls.n	800311e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	f000 bcdb 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
 800311e:	2302      	movs	r3, #2
 8003120:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800315c:	2202      	movs	r2, #2
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003176:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003178:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x934>)
 800317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003184:	2102      	movs	r1, #2
 8003186:	6019      	str	r1, [r3, #0]
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f1a3 	rbit	r1, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800319e:	6019      	str	r1, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0a0      	beq.n	8003108 <HAL_RCC_OscConfig+0x6a0>
 80031c6:	e08d      	b.n	80032e4 <HAL_RCC_OscConfig+0x87c>
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	fa93 f2a3 	rbit	r2, r3
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031ea:	601a      	str	r2, [r3, #0]
  return result;
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x938>)
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	461a      	mov	r2, r3
 8003206:	2300      	movs	r3, #0
 8003208:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe f8db 	bl	80013c4 <HAL_GetTick>
 800320e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003214:	f7fe f8d6 	bl	80013c4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d902      	bls.n	800322a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	f000 bc55 	b.w	8003ad4 <HAL_RCC_OscConfig+0x106c>
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800327a:	2202      	movs	r2, #2
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003294:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x934>)
 8003298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032a2:	2102      	movs	r1, #2
 80032a4:	6019      	str	r1, [r3, #0]
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f1a3 	rbit	r1, r3
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032bc:	6019      	str	r1, [r3, #0]
  return result;
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d197      	bne.n	8003214 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 81a1 	beq.w	800363c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003300:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x934>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_RCC_OscConfig+0x934>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_RCC_OscConfig+0x934>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_RCC_OscConfig+0x934>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003332:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x93c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11a      	bne.n	800337c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_RCC_OscConfig+0x93c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_RCC_OscConfig+0x93c>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe f837 	bl	80013c4 <HAL_GetTick>
 8003356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	e009      	b.n	8003370 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fe f832 	bl	80013c4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	; 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e3b1      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x93c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ef      	beq.n	800335c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10d      	bne.n	80033a8 <HAL_RCC_OscConfig+0x940>
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_OscConfig+0x934>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a02      	ldr	r2, [pc, #8]	; (800339c <HAL_RCC_OscConfig+0x934>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	e03c      	b.n	8003414 <HAL_RCC_OscConfig+0x9ac>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	10908120 	.word	0x10908120
 80033a4:	40007000 	.word	0x40007000
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x96a>
 80033b8:	4bc1      	ldr	r3, [pc, #772]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4ac0      	ldr	r2, [pc, #768]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	4bbe      	ldr	r3, [pc, #760]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4abd      	ldr	r2, [pc, #756]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033ca:	f023 0304 	bic.w	r3, r3, #4
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e020      	b.n	8003414 <HAL_RCC_OscConfig+0x9ac>
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x994>
 80033e2:	4bb7      	ldr	r3, [pc, #732]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4ab6      	ldr	r2, [pc, #728]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6213      	str	r3, [r2, #32]
 80033ee:	4bb4      	ldr	r3, [pc, #720]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4ab3      	ldr	r2, [pc, #716]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6213      	str	r3, [r2, #32]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0x9ac>
 80033fc:	4bb0      	ldr	r3, [pc, #704]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4aaf      	ldr	r2, [pc, #700]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	4bad      	ldr	r3, [pc, #692]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4aac      	ldr	r2, [pc, #688]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8081 	beq.w	8003528 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fd ffcd 	bl	80013c4 <HAL_GetTick>
 800342a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fd ffc8 	bl	80013c4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e345      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003450:	2202      	movs	r2, #2
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003474:	2202      	movs	r2, #2
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fa93 f2a3 	rbit	r2, r3
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800348e:	601a      	str	r2, [r3, #0]
  return result;
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003498:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_OscConfig+0xa4c>
 80034ae:	4b84      	ldr	r3, [pc, #528]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	e013      	b.n	80034dc <HAL_RCC_OscConfig+0xa74>
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034bc:	2202      	movs	r2, #2
 80034be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034e4:	2102      	movs	r1, #2
 80034e6:	6011      	str	r1, [r2, #0]
 80034e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fa92 f1a2 	rbit	r1, r2
 80034f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034fe:	6011      	str	r1, [r2, #0]
  return result;
 8003500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003504:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d084      	beq.n	8003430 <HAL_RCC_OscConfig+0x9c8>
 8003526:	e07f      	b.n	8003628 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fd ff4c 	bl	80013c4 <HAL_GetTick>
 800352c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fd ff47 	bl	80013c4 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e2c4      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003552:	2202      	movs	r2, #2
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003576:	2202      	movs	r2, #2
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	fa93 f2a3 	rbit	r2, r3
 8003588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003590:	601a      	str	r2, [r3, #0]
  return result;
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800359a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0xb4e>
 80035b0:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	e013      	b.n	80035de <HAL_RCC_OscConfig+0xb76>
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035be:	2202      	movs	r2, #2
 80035c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035e6:	2102      	movs	r1, #2
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	fa92 f1a2 	rbit	r1, r2
 80035f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003600:	6011      	str	r1, [r2, #0]
  return result;
 8003602:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003606:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d184      	bne.n	8003532 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003628:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8242 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <HAL_RCC_OscConfig+0xc58>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b08      	cmp	r3, #8
 8003658:	f000 8213 	beq.w	8003a82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b02      	cmp	r3, #2
 800366a:	f040 8162 	bne.w	8003932 <HAL_RCC_OscConfig+0xeca>
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800367a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	fa93 f2a3 	rbit	r2, r3
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003692:	601a      	str	r2, [r3, #0]
  return result;
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800369c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fe86 	bl	80013c4 <HAL_GetTick>
 80036b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	e00c      	b.n	80036d8 <HAL_RCC_OscConfig+0xc70>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fd fe7e 	bl	80013c4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1fd      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036fc:	601a      	str	r2, [r3, #0]
  return result;
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_RCC_OscConfig+0xcba>
 800371c:	4bb0      	ldr	r3, [pc, #704]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e027      	b.n	8003772 <HAL_RCC_OscConfig+0xd0a>
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800372a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800372e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	4b9c      	ldr	r3, [pc, #624]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003776:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800377a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800377e:	6011      	str	r1, [r2, #0]
 8003780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003784:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	fa92 f1a2 	rbit	r1, r2
 800378e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003792:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003796:	6011      	str	r1, [r2, #0]
  return result;
 8003798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800379c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	fab2 f282 	clz	r2, r2
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f042 0220 	orr.w	r2, r2, #32
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f002 021f 	and.w	r2, r2, #31
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d182      	bne.n	80036c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	430b      	orrs	r3, r1
 80037e0:	497f      	ldr	r1, [pc, #508]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003814:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	461a      	mov	r2, r3
 8003828:	2301      	movs	r3, #1
 800382a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd fdca 	bl	80013c4 <HAL_GetTick>
 8003830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003834:	e009      	b.n	800384a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003836:	f7fd fdc5 	bl	80013c4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e144      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800386e:	601a      	str	r2, [r3, #0]
  return result;
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003878:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0xe2c>
 800388e:	4b54      	ldr	r3, [pc, #336]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e027      	b.n	80038e4 <HAL_RCC_OscConfig+0xe7c>
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800389c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	fa92 f1a2 	rbit	r1, r2
 8003900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003904:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003908:	6011      	str	r1, [r2, #0]
  return result;
 800390a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	fab2 f282 	clz	r2, r2
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f042 0220 	orr.w	r2, r2, #32
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	f002 021f 	and.w	r2, r2, #31
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d082      	beq.n	8003836 <HAL_RCC_OscConfig+0xdce>
 8003930:	e0cf      	b.n	8003ad2 <HAL_RCC_OscConfig+0x106a>
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800393a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800393e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f2a3 	rbit	r2, r3
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003956:	601a      	str	r2, [r3, #0]
  return result;
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003960:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800396c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd fd24 	bl	80013c4 <HAL_GetTick>
 800397c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003980:	e009      	b.n	8003996 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003982:	f7fd fd1f 	bl	80013c4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e09e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800399e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039ba:	601a      	str	r2, [r3, #0]
  return result;
 80039bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d104      	bne.n	80039e4 <HAL_RCC_OscConfig+0xf7c>
 80039da:	4b01      	ldr	r3, [pc, #4]	; (80039e0 <HAL_RCC_OscConfig+0xf78>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	e029      	b.n	8003a34 <HAL_RCC_OscConfig+0xfcc>
 80039e0:	40021000 	.word	0x40021000
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	fa93 f2a3 	rbit	r2, r3
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_RCC_OscConfig+0x1078>)
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	fa92 f1a2 	rbit	r1, r2
 8003a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a58:	6011      	str	r1, [r2, #0]
  return result;
 8003a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	fab2 f282 	clz	r2, r2
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	f042 0220 	orr.w	r2, r2, #32
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f002 021f 	and.w	r2, r2, #31
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d180      	bne.n	8003982 <HAL_RCC_OscConfig+0xf1a>
 8003a80:	e027      	b.n	8003ad2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e01e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_OscConfig+0x1078>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aa2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10b      	bne.n	8003ace <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b09e      	sub	sp, #120	; 0x78
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e162      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b90      	ldr	r3, [pc, #576]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d910      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b8d      	ldr	r3, [pc, #564]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 0207 	bic.w	r2, r3, #7
 8003b12:	498b      	ldr	r1, [pc, #556]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b89      	ldr	r3, [pc, #548]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e14a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b82      	ldr	r3, [pc, #520]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	497f      	ldr	r1, [pc, #508]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80dc 	beq.w	8003d10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d13c      	bne.n	8003bda <HAL_RCC_ClockConfig+0xf6>
 8003b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xa6>
 8003b84:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	e00f      	b.n	8003baa <HAL_RCC_ClockConfig+0xc6>
 8003b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	667b      	str	r3, [r7, #100]	; 0x64
 8003b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba6:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bae:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bb2:	fa92 f2a2 	rbit	r2, r2
 8003bb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f042 0220 	orr.w	r2, r2, #32
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d17b      	bne.n	8003cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0f3      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d13c      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x178>
 8003be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x128>
 8003c06:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e00f      	b.n	8003c2c <HAL_RCC_ClockConfig+0x148>
 8003c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c30:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c34:	fa92 f2a2 	rbit	r2, r2
 8003c38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3c:	fab2 f282 	clz	r2, r2
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f042 0220 	orr.w	r2, r2, #32
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f002 021f 	and.w	r2, r2, #31
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13a      	bne.n	8003cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0b2      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e00d      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1bc>
 8003c84:	2302      	movs	r3, #2
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	2302      	movs	r3, #2
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	61ba      	str	r2, [r7, #24]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	fa92 f2a2 	rbit	r2, r2
 8003caa:	617a      	str	r2, [r7, #20]
  return result;
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	fab2 f282 	clz	r2, r2
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	f042 0220 	orr.w	r2, r2, #32
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f002 021f 	and.w	r2, r2, #31
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e079      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	491a      	ldr	r1, [pc, #104]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7fd fb70 	bl	80013c4 <HAL_GetTick>
 8003ce4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fd fb6c 	bl	80013c4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e061      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d214      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 0207 	bic.w	r2, r3, #7
 8003d26:	4906      	ldr	r1, [pc, #24]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <HAL_RCC_ClockConfig+0x25c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e040      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x2de>
 8003d40:	40022000 	.word	0x40022000
 8003d44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_RCC_ClockConfig+0x2e8>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	491a      	ldr	r1, [pc, #104]	; (8003dcc <HAL_RCC_ClockConfig+0x2e8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_RCC_ClockConfig+0x2e8>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4912      	ldr	r1, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x2e8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d86:	f000 f829 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <HAL_RCC_ClockConfig+0x2e8>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d94:	22f0      	movs	r2, #240	; 0xf0
 8003d96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	fa92 f2a2 	rbit	r2, r2
 8003d9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	fab2 f282 	clz	r2, r2
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	40d3      	lsrs	r3, r2
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x2ec>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	fa21 f303 	lsr.w	r3, r1, r3
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <HAL_RCC_ClockConfig+0x2f0>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_RCC_ClockConfig+0x2f4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd fabe 	bl	800133c <HAL_InitTick>
  
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3778      	adds	r7, #120	; 0x78
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	0800538c 	.word	0x0800538c
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b08b      	sub	sp, #44	; 0x2c
 8003de0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d002      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x30>
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x36>
 8003e0a:	e03c      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e0e:	623b      	str	r3, [r7, #32]
      break;
 8003e10:	e03c      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	fa92 f2a2 	rbit	r2, r2
 8003e24:	607a      	str	r2, [r7, #4]
  return result;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	fab2 f282 	clz	r2, r2
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	40d3      	lsrs	r3, r2
 8003e30:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	220f      	movs	r2, #15
 8003e40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	fa92 f2a2 	rbit	r2, r2
 8003e48:	60fa      	str	r2, [r7, #12]
  return result;
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	fab2 f282 	clz	r2, r2
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	40d3      	lsrs	r3, r2
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
 8003e74:	e004      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	623b      	str	r3, [r7, #32]
      break;
 8003e84:	e002      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e88:	623b      	str	r3, [r7, #32]
      break;
 8003e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	372c      	adds	r7, #44	; 0x2c
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	007a1200 	.word	0x007a1200
 8003ea4:	080053a4 	.word	0x080053a4
 8003ea8:	080053b4 	.word	0x080053b4
 8003eac:	003d0900 	.word	0x003d0900

08003eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ece:	f7ff ffef 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003edc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ee0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	fa92 f2a2 	rbit	r2, r2
 8003ee8:	603a      	str	r2, [r7, #0]
  return result;
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	fab2 f282 	clz	r2, r2
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	40d3      	lsrs	r3, r2
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	0800539c 	.word	0x0800539c

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f12:	f7ff ffcd 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003f16:	4601      	mov	r1, r0
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	fa92 f2a2 	rbit	r2, r2
 8003f2c:	603a      	str	r2, [r7, #0]
  return result;
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	fab2 f282 	clz	r2, r2
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	40d3      	lsrs	r3, r2
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	0800539c 	.word	0x0800539c

08003f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b092      	sub	sp, #72	; 0x48
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80cd 	beq.w	800410e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f74:	4b8e      	ldr	r3, [pc, #568]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10e      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b8b      	ldr	r3, [pc, #556]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4a8a      	ldr	r2, [pc, #552]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	61d3      	str	r3, [r2, #28]
 8003f8c:	4b88      	ldr	r3, [pc, #544]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a81      	ldr	r2, [pc, #516]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fd fa05 	bl	80013c4 <HAL_GetTick>
 8003fba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fd fa01 	bl	80013c4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0ea      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fdc:	4b74      	ldr	r3, [pc, #464]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d07d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d076      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	2301      	movs	r3, #1
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	4b5d      	ldr	r3, [pc, #372]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	2300      	movs	r3, #0
 800404a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d045      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fd f9b2 	bl	80013c4 <HAL_GetTick>
 8004060:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	e00a      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fd f9ae 	bl	80013c4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e095      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800407a:	2302      	movs	r3, #2
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	2302      	movs	r3, #2
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	61fb      	str	r3, [r7, #28]
  return result;
 8004092:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d102      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040a8:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	e007      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2202      	movs	r2, #2
 80040c0:	613a      	str	r2, [r7, #16]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	60fa      	str	r2, [r7, #12]
  return result;
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0bd      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	492e      	ldr	r1, [pc, #184]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411a:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4922      	ldr	r1, [pc, #136]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004128:	4313      	orrs	r3, r2
 800412a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f023 0210 	bic.w	r2, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	491a      	ldr	r1, [pc, #104]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	4313      	orrs	r3, r2
 8004148:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004156:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4913      	ldr	r1, [pc, #76]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	4313      	orrs	r3, r2
 8004166:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	490b      	ldr	r1, [pc, #44]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004182:	4313      	orrs	r3, r2
 8004184:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	4904      	ldr	r1, [pc, #16]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3748      	adds	r7, #72	; 0x48
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40007000 	.word	0x40007000
 80041b8:	10908100 	.word	0x10908100

080041bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e049      	b.n	8004262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc feaa 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 fa34 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e049      	b.n	8004310 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fc fe97 	bl	8000fc4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 f9dd 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004332:	2302      	movs	r3, #2
 8004334:	e088      	b.n	8004448 <HAL_TIM_IC_ConfigChannel+0x130>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f000 fa94 	bl	8004880 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 020c 	bic.w	r2, r2, #12
 8004366:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6999      	ldr	r1, [r3, #24]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	619a      	str	r2, [r3, #24]
 800437a:	e060      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b04      	cmp	r3, #4
 8004380:	d11c      	bne.n	80043bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6819      	ldr	r1, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f000 fb00 	bl	8004996 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6999      	ldr	r1, [r3, #24]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	619a      	str	r2, [r3, #24]
 80043ba:	e040      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d11b      	bne.n	80043fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 fb4d 	bl	8004a70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020c 	bic.w	r2, r2, #12
 80043e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	61da      	str	r2, [r3, #28]
 80043f8:	e021      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d11c      	bne.n	800443a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f000 fb6a 	bl	8004ae8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004422:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69d9      	ldr	r1, [r3, #28]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	61da      	str	r2, [r3, #28]
 8004438:	e001      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIM_ConfigClockSource+0x1c>
 8004468:	2302      	movs	r3, #2
 800446a:	e0b6      	b.n	80045da <HAL_TIM_ConfigClockSource+0x18a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800448e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a8:	d03e      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0xd8>
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	f200 8087 	bhi.w	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	f000 8086 	beq.w	80045c6 <HAL_TIM_ConfigClockSource+0x176>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d87f      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d01a      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0xaa>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d87b      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d050      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x11e>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d877      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044d0:	2b50      	cmp	r3, #80	; 0x50
 80044d2:	d03c      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xfe>
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d873      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d058      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x13e>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d86f      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d064      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044e4:	2b30      	cmp	r3, #48	; 0x30
 80044e6:	d86b      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d060      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d867      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05c      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d05a      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x15e>
 80044f8:	e062      	b.n	80045c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6899      	ldr	r1, [r3, #8]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f000 fb45 	bl	8004b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800451c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	609a      	str	r2, [r3, #8]
      break;
 8004526:	e04f      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6899      	ldr	r1, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f000 fb2e 	bl	8004b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454a:	609a      	str	r2, [r3, #8]
      break;
 800454c:	e03c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 f9ec 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2150      	movs	r1, #80	; 0x50
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fafb 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 800456c:	e02c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	461a      	mov	r2, r3
 800457c:	f000 fa48 	bl	8004a10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2160      	movs	r1, #96	; 0x60
 8004586:	4618      	mov	r0, r3
 8004588:	f000 faeb 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 800458c:	e01c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	f000 f9cc 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2140      	movs	r1, #64	; 0x40
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fadb 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 80045ac:	e00c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f000 fad2 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 80045be:	e003      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      break;
 80045c4:	e000      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e031      	b.n	800465e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f8a3 	bl	8004758 <TIM_SlaveTimer_SetConfig>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e018      	b.n	800465e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800464a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a32      	ldr	r2, [pc, #200]	; (8004744 <TIM_Base_SetConfig+0xdc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_Base_SetConfig+0x28>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d003      	beq.n	8004690 <TIM_Base_SetConfig+0x28>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <TIM_Base_SetConfig+0xe0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a27      	ldr	r2, [pc, #156]	; (8004744 <TIM_Base_SetConfig+0xdc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <TIM_Base_SetConfig+0x6a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d00f      	beq.n	80046d2 <TIM_Base_SetConfig+0x6a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <TIM_Base_SetConfig+0xe0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_Base_SetConfig+0x6a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <TIM_Base_SetConfig+0xe4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0x6a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a22      	ldr	r2, [pc, #136]	; (8004750 <TIM_Base_SetConfig+0xe8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0x6a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <TIM_Base_SetConfig+0xec>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <TIM_Base_SetConfig+0xdc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00b      	beq.n	8004728 <TIM_Base_SetConfig+0xc0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a0e      	ldr	r2, [pc, #56]	; (800474c <TIM_Base_SetConfig+0xe4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_Base_SetConfig+0xc0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <TIM_Base_SetConfig+0xe8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_Base_SetConfig+0xc0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <TIM_Base_SetConfig+0xec>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d103      	bne.n	8004730 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	615a      	str	r2, [r3, #20]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40000400 	.word	0x40000400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	f023 0307 	bic.w	r3, r3, #7
 800478a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b70      	cmp	r3, #112	; 0x70
 80047a4:	d01a      	beq.n	80047dc <TIM_SlaveTimer_SetConfig+0x84>
 80047a6:	2b70      	cmp	r3, #112	; 0x70
 80047a8:	d860      	bhi.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
 80047aa:	2b60      	cmp	r3, #96	; 0x60
 80047ac:	d054      	beq.n	8004858 <TIM_SlaveTimer_SetConfig+0x100>
 80047ae:	2b60      	cmp	r3, #96	; 0x60
 80047b0:	d85c      	bhi.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
 80047b2:	2b50      	cmp	r3, #80	; 0x50
 80047b4:	d046      	beq.n	8004844 <TIM_SlaveTimer_SetConfig+0xec>
 80047b6:	2b50      	cmp	r3, #80	; 0x50
 80047b8:	d858      	bhi.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d019      	beq.n	80047f2 <TIM_SlaveTimer_SetConfig+0x9a>
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d854      	bhi.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
 80047c2:	2b30      	cmp	r3, #48	; 0x30
 80047c4:	d055      	beq.n	8004872 <TIM_SlaveTimer_SetConfig+0x11a>
 80047c6:	2b30      	cmp	r3, #48	; 0x30
 80047c8:	d850      	bhi.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d051      	beq.n	8004872 <TIM_SlaveTimer_SetConfig+0x11a>
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d84c      	bhi.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04d      	beq.n	8004872 <TIM_SlaveTimer_SetConfig+0x11a>
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d04b      	beq.n	8004872 <TIM_SlaveTimer_SetConfig+0x11a>
 80047da:	e047      	b.n	800486c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68d9      	ldr	r1, [r3, #12]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f000 f9d4 	bl	8004b98 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80047f0:	e040      	b.n	8004874 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b05      	cmp	r3, #5
 80047f8:	d101      	bne.n	80047fe <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e03b      	b.n	8004876 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004824:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
      break;
 8004842:	e017      	b.n	8004874 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6899      	ldr	r1, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	461a      	mov	r2, r3
 8004852:	f000 f871 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004856:	e00d      	b.n	8004874 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	461a      	mov	r2, r3
 8004866:	f000 f8d3 	bl	8004a10 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800486a:	e003      	b.n	8004874 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
      break;
 8004870:	e000      	b.n	8004874 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004872:	bf00      	nop
  }

  return status;
 8004874:	7dfb      	ldrb	r3, [r7, #23]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a20      	ldr	r2, [pc, #128]	; (800492c <TIM_TI1_SetConfig+0xac>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_TI1_SetConfig+0x46>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d007      	beq.n	80048c6 <TIM_TI1_SetConfig+0x46>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <TIM_TI1_SetConfig+0xb0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_TI1_SetConfig+0x46>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <TIM_TI1_SetConfig+0xb4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <TIM_TI1_SetConfig+0x4a>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <TIM_TI1_SetConfig+0x4c>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e003      	b.n	80048ea <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f023 030a 	bic.w	r3, r3, #10
 8004904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 030a 	and.w	r3, r3, #10
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40000400 	.word	0x40000400
 8004934:	40014000 	.word	0x40014000

08004938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 030a 	bic.w	r3, r3, #10
 8004974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 0210 	bic.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	b29b      	uxth	r3, r3
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 0210 	bic.w	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	031b      	lsls	r3, r3, #12
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 0303 	bic.w	r3, r3, #3
 8004a9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	031b      	lsls	r3, r3, #12
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	031b      	lsls	r3, r3, #12
 8004b40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f043 0307 	orr.w	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e054      	b.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d009      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a13      	ldr	r2, [pc, #76]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10c      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40014000 	.word	0x40014000

08004cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e040      	b.n	8004d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fc fa7a 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2224      	movs	r2, #36	; 0x24
 8004ce0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f82c 	bl	8004d50 <UART_SetConfig>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e022      	b.n	8004d48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f956 	bl	8004fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9dd 	bl	8005100 <UART_CheckIdleState>
 8004d46:	4603      	mov	r3, r0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8a      	ldr	r3, [pc, #552]	; (8004fa4 <UART_SetConfig+0x254>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	6979      	ldr	r1, [r7, #20]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a78      	ldr	r2, [pc, #480]	; (8004fa8 <UART_SetConfig+0x258>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d120      	bne.n	8004e0e <UART_SetConfig+0xbe>
 8004dcc:	4b77      	ldr	r3, [pc, #476]	; (8004fac <UART_SetConfig+0x25c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d817      	bhi.n	8004e08 <UART_SetConfig+0xb8>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x90>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004dfd 	.word	0x08004dfd
 8004de8:	08004e03 	.word	0x08004e03
 8004dec:	08004df7 	.word	0x08004df7
 8004df0:	2300      	movs	r3, #0
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e01d      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004df6:	2302      	movs	r3, #2
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e01a      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e017      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004e02:	2308      	movs	r3, #8
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e014      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e011      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a67      	ldr	r2, [pc, #412]	; (8004fb0 <UART_SetConfig+0x260>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d102      	bne.n	8004e1e <UART_SetConfig+0xce>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e009      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a64      	ldr	r2, [pc, #400]	; (8004fb4 <UART_SetConfig+0x264>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d102      	bne.n	8004e2e <UART_SetConfig+0xde>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e001      	b.n	8004e32 <UART_SetConfig+0xe2>
 8004e2e:	2310      	movs	r3, #16
 8004e30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3a:	d15b      	bne.n	8004ef4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004e3c:	7ffb      	ldrb	r3, [r7, #31]
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d827      	bhi.n	8004e92 <UART_SetConfig+0x142>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <UART_SetConfig+0xf8>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e75 	.word	0x08004e75
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	08004e93 	.word	0x08004e93
 8004e58:	08004e83 	.word	0x08004e83
 8004e5c:	08004e93 	.word	0x08004e93
 8004e60:	08004e93 	.word	0x08004e93
 8004e64:	08004e93 	.word	0x08004e93
 8004e68:	08004e8b 	.word	0x08004e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7ff f82c 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8004e70:	61b8      	str	r0, [r7, #24]
        break;
 8004e72:	e013      	b.n	8004e9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7ff f84a 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004e78:	61b8      	str	r0, [r7, #24]
        break;
 8004e7a:	e00f      	b.n	8004e9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e7c:	4b4e      	ldr	r3, [pc, #312]	; (8004fb8 <UART_SetConfig+0x268>)
 8004e7e:	61bb      	str	r3, [r7, #24]
        break;
 8004e80:	e00c      	b.n	8004e9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e82:	f7fe ffab 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8004e86:	61b8      	str	r0, [r7, #24]
        break;
 8004e88:	e008      	b.n	8004e9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8e:	61bb      	str	r3, [r7, #24]
        break;
 8004e90:	e004      	b.n	8004e9c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	77bb      	strb	r3, [r7, #30]
        break;
 8004e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d074      	beq.n	8004f8c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	005a      	lsls	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d916      	bls.n	8004eee <UART_SetConfig+0x19e>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d212      	bcs.n	8004eee <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f023 030f 	bic.w	r3, r3, #15
 8004ed0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	89fb      	ldrh	r3, [r7, #14]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	89fa      	ldrh	r2, [r7, #14]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e04e      	b.n	8004f8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	77bb      	strb	r3, [r7, #30]
 8004ef2:	e04b      	b.n	8004f8c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d827      	bhi.n	8004f4a <UART_SetConfig+0x1fa>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x1b0>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe ffd0 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8004f28:	61b8      	str	r0, [r7, #24]
        break;
 8004f2a:	e013      	b.n	8004f54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe ffee 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004f30:	61b8      	str	r0, [r7, #24]
        break;
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <UART_SetConfig+0x268>)
 8004f36:	61bb      	str	r3, [r7, #24]
        break;
 8004f38:	e00c      	b.n	8004f54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe ff4f 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8004f3e:	61b8      	str	r0, [r7, #24]
        break;
 8004f40:	e008      	b.n	8004f54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	61bb      	str	r3, [r7, #24]
        break;
 8004f48:	e004      	b.n	8004f54 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	77bb      	strb	r3, [r7, #30]
        break;
 8004f52:	bf00      	nop
    }

    if (pclk != 0U)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085a      	lsrs	r2, r3, #1
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	d908      	bls.n	8004f88 <UART_SetConfig+0x238>
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d204      	bcs.n	8004f88 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	e001      	b.n	8004f8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f98:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	efff69f3 	.word	0xefff69f3
 8004fa8:	40013800 	.word	0x40013800
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40004400 	.word	0x40004400
 8004fb4:	40004800 	.word	0x40004800
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ba:	d10a      	bne.n	80050d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af02      	add	r7, sp, #8
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005110:	f7fc f958 	bl	80013c4 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b08      	cmp	r3, #8
 8005122:	d10e      	bne.n	8005142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f82d 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e023      	b.n	800518a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b04      	cmp	r3, #4
 800514e:	d10e      	bne.n	800516e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f817 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e00d      	b.n	800518a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b09c      	sub	sp, #112	; 0x70
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a2:	e0a5      	b.n	80052f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	f000 80a1 	beq.w	80052f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fc f909 	bl	80013c4 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80051be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d13e      	bne.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005216:	64ba      	str	r2, [r7, #72]	; 0x48
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800521c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e067      	b.n	8005312 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d04f      	beq.n	80052f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525e:	d147      	bne.n	80052f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800527e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800528e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	613b      	str	r3, [r7, #16]
   return(result);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052bc:	623a      	str	r2, [r7, #32]
 80052be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	6a3a      	ldr	r2, [r7, #32]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e5      	bne.n	800529c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e010      	b.n	8005312 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	429a      	cmp	r2, r3
 800530c:	f43f af4a 	beq.w	80051a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3770      	adds	r7, #112	; 0x70
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <__libc_init_array>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	4d0d      	ldr	r5, [pc, #52]	; (8005354 <__libc_init_array+0x38>)
 8005320:	4c0d      	ldr	r4, [pc, #52]	; (8005358 <__libc_init_array+0x3c>)
 8005322:	1b64      	subs	r4, r4, r5
 8005324:	10a4      	asrs	r4, r4, #2
 8005326:	2600      	movs	r6, #0
 8005328:	42a6      	cmp	r6, r4
 800532a:	d109      	bne.n	8005340 <__libc_init_array+0x24>
 800532c:	4d0b      	ldr	r5, [pc, #44]	; (800535c <__libc_init_array+0x40>)
 800532e:	4c0c      	ldr	r4, [pc, #48]	; (8005360 <__libc_init_array+0x44>)
 8005330:	f000 f820 	bl	8005374 <_init>
 8005334:	1b64      	subs	r4, r4, r5
 8005336:	10a4      	asrs	r4, r4, #2
 8005338:	2600      	movs	r6, #0
 800533a:	42a6      	cmp	r6, r4
 800533c:	d105      	bne.n	800534a <__libc_init_array+0x2e>
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	f855 3b04 	ldr.w	r3, [r5], #4
 8005344:	4798      	blx	r3
 8005346:	3601      	adds	r6, #1
 8005348:	e7ee      	b.n	8005328 <__libc_init_array+0xc>
 800534a:	f855 3b04 	ldr.w	r3, [r5], #4
 800534e:	4798      	blx	r3
 8005350:	3601      	adds	r6, #1
 8005352:	e7f2      	b.n	800533a <__libc_init_array+0x1e>
 8005354:	080053c4 	.word	0x080053c4
 8005358:	080053c4 	.word	0x080053c4
 800535c:	080053c4 	.word	0x080053c4
 8005360:	080053c8 	.word	0x080053c8

08005364 <memset>:
 8005364:	4402      	add	r2, r0
 8005366:	4603      	mov	r3, r0
 8005368:	4293      	cmp	r3, r2
 800536a:	d100      	bne.n	800536e <memset+0xa>
 800536c:	4770      	bx	lr
 800536e:	f803 1b01 	strb.w	r1, [r3], #1
 8005372:	e7f9      	b.n	8005368 <memset+0x4>

08005374 <_init>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr

08005380 <_fini>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr
