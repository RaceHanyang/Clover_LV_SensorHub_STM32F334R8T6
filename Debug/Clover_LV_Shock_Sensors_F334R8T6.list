
Clover_LV_Shock_Sensors_F334R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007f08  08007f08  00017f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f50  08007f50  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f50  08007f50  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f50  08007f50  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000004dc  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000055c  2000055c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a019  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f68  00000000  00000000  0003a0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0003e030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  0003f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a59  00000000  00000000  00040948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e555  00000000  00000000  000643a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce21a  00000000  00000000  000828f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150b10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b24  00000000  00000000  00150b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ef0 	.word	0x08007ef0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08007ef0 	.word	0x08007ef0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <GAS_getHclkClk>:
/*
 * uint32_t GAS_getHclkClk(void)
 * Return: HCLK frequency in Hz
 */
uint32_t GAS_getHclkClk(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
	//Get SYSCLK in Hz.
	uint32_t sysclk_freq = HAL_RCC_GetSysClockFreq();
 8000aba:	f005 fa67 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 8000abe:	6238      	str	r0, [r7, #32]
	//Get AHB prescaler.
	uint32_t ahb_prescaler;
	uint32_t ahbClkDiv;
	uint32_t flash_latency;
	RCC_ClkInitTypeDef clk_init_struct;
	HAL_RCC_GetClockConfig(&clk_init_struct, &flash_latency);
 8000ac0:	f107 0214 	add.w	r2, r7, #20
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 fb19 	bl	8006100 <HAL_RCC_GetClockConfig>

	ahbClkDiv = clk_init_struct.AHBCLKDivider;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	61fb      	str	r3, [r7, #28]
	switch(ahbClkDiv)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	2bf0      	cmp	r3, #240	; 0xf0
 8000ad6:	d046      	beq.n	8000b66 <GAS_getHclkClk+0xb2>
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2bf0      	cmp	r3, #240	; 0xf0
 8000adc:	d847      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2be0      	cmp	r3, #224	; 0xe0
 8000ae2:	d03c      	beq.n	8000b5e <GAS_getHclkClk+0xaa>
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	2be0      	cmp	r3, #224	; 0xe0
 8000ae8:	d841      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	2bd0      	cmp	r3, #208	; 0xd0
 8000aee:	d033      	beq.n	8000b58 <GAS_getHclkClk+0xa4>
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	2bd0      	cmp	r3, #208	; 0xd0
 8000af4:	d83b      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	2bc0      	cmp	r3, #192	; 0xc0
 8000afa:	d02a      	beq.n	8000b52 <GAS_getHclkClk+0x9e>
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	2bc0      	cmp	r3, #192	; 0xc0
 8000b00:	d835      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	2bb0      	cmp	r3, #176	; 0xb0
 8000b06:	d021      	beq.n	8000b4c <GAS_getHclkClk+0x98>
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2bb0      	cmp	r3, #176	; 0xb0
 8000b0c:	d82f      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	2ba0      	cmp	r3, #160	; 0xa0
 8000b12:	d018      	beq.n	8000b46 <GAS_getHclkClk+0x92>
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2ba0      	cmp	r3, #160	; 0xa0
 8000b18:	d829      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2b90      	cmp	r3, #144	; 0x90
 8000b1e:	d00f      	beq.n	8000b40 <GAS_getHclkClk+0x8c>
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b90      	cmp	r3, #144	; 0x90
 8000b24:	d823      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <GAS_getHclkClk+0x80>
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2b80      	cmp	r3, #128	; 0x80
 8000b30:	d003      	beq.n	8000b3a <GAS_getHclkClk+0x86>
 8000b32:	e01c      	b.n	8000b6e <GAS_getHclkClk+0xba>
	{
		case RCC_SYSCLK_DIV1:
			ahb_prescaler = 1; break;
 8000b34:	2301      	movs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
 8000b38:	e019      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV2:
			ahb_prescaler = 2; break;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3e:	e016      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV4:
			ahb_prescaler = 4; break;
 8000b40:	2304      	movs	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
 8000b44:	e013      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV8:
			ahb_prescaler = 8; break;
 8000b46:	2308      	movs	r3, #8
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	e010      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV16:
			ahb_prescaler = 16; break;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b50:	e00d      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV64:
			ahb_prescaler = 64; break;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
 8000b56:	e00a      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV128:
			ahb_prescaler = 128; break;
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	e007      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV256:
			ahb_prescaler = 256; break;
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
 8000b64:	e003      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV512:
			ahb_prescaler = 512; break;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6c:	bf00      	nop
	}

	uint32_t hclk_freq = sysclk_freq / ahb_prescaler;
 8000b6e:	6a3a      	ldr	r2, [r7, #32]
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	61bb      	str	r3, [r7, #24]

	return hclk_freq;
 8000b78:	69bb      	ldr	r3, [r7, #24]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <GAS_Adc_init>:
static void GAS_Adc_startAdc(GAS_Adc_adc_t *adc);

SensorHubADC_t SensorHubADC;

void GAS_Adc_init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

#ifdef __USE_ADC1__
		GAS_Adc_adc_t *adc1 = &GAS_Adc_adc1;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <GAS_Adc_init+0x74>)
 8000b8c:	607b      	str	r3, [r7, #4]

		adc1->hadc = &hadc1;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <GAS_Adc_init+0x78>)
 8000b92:	601a      	str	r2, [r3, #0]

		adc1->dataLength = ((adc1->hadc->Instance->SQR1)>>20U);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	0d1a      	lsrs	r2, r3, #20
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	605a      	str	r2, [r3, #4]
		adc1->data = (uint32_t*)malloc(adc1->dataLength*sizeof(uint32_t));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 f8df 	bl	8007d6c <malloc>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	609a      	str	r2, [r3, #8]

		GAS_Adc_startAdc(adc1);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f826 	bl	8000c08 <GAS_Adc_startAdc>

#endif
#ifdef __USE_ADC2__
		GAS_Adc_adc_t *adc2 = &GAS_Adc_adc2;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <GAS_Adc_init+0x7c>)
 8000bbe:	603b      	str	r3, [r7, #0]

		adc2->hadc = &hadc2;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <GAS_Adc_init+0x80>)
 8000bc4:	601a      	str	r2, [r3, #0]

		adc2->dataLength = ((adc2->hadc->Instance->SQR1)>>20U);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	0d1a      	lsrs	r2, r3, #20
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
		adc2->data = (uint32_t*)malloc(adc2->dataLength*sizeof(uint32_t));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 f8c6 	bl	8007d6c <malloc>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	609a      	str	r2, [r3, #8]

		GAS_Adc_startAdc(adc2);
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f000 f80d 	bl	8000c08 <GAS_Adc_startAdc>
#endif
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	2000015c 	.word	0x2000015c
 8000c00:	200000a8 	.word	0x200000a8
 8000c04:	200001ac 	.word	0x200001ac

08000c08 <GAS_Adc_startAdc>:



//TODO: Non DMA functions
static void GAS_Adc_startAdc(GAS_Adc_adc_t *adc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_Start_DMA(adc->hadc, adc->data, adc->dataLength) != HAL_OK)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6899      	ldr	r1, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f001 ffeb 	bl	8002bf8 <HAL_ADC_Start_DMA>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <GAS_Adc_startAdc+0x24>
	{
		GAS_Adc_initErrorTrap();
 8000c28:	f000 f804 	bl	8000c34 <GAS_Adc_initErrorTrap>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <GAS_Adc_initErrorTrap>:

static void GAS_Adc_initErrorTrap(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
	__disable_irq();
	while(1);
 8000c3c:	e7fe      	b.n	8000c3c <GAS_Adc_initErrorTrap+0x8>
	...

08000c40 <GAS_Adc_getValue>:
}

void GAS_Adc_getValue(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
#ifdef __USE_ADC1__
	SensorHubADC.ADC1_IN1 = GAS_Adc_adc1.data[0];
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <GAS_Adc_getValue+0x7c>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000c4e:	801a      	strh	r2, [r3, #0]
	SensorHubADC.ADC1_IN2 = GAS_Adc_adc1.data[1];
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <GAS_Adc_getValue+0x7c>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000c5c:	805a      	strh	r2, [r3, #2]
	SensorHubADC.ADC1_IN3 = GAS_Adc_adc1.data[2];
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <GAS_Adc_getValue+0x7c>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	3308      	adds	r3, #8
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000c6a:	809a      	strh	r2, [r3, #4]
	SensorHubADC.ADC1_IN4 = GAS_Adc_adc1.data[3];
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <GAS_Adc_getValue+0x7c>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	330c      	adds	r3, #12
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000c78:	80da      	strh	r2, [r3, #6]
#endif

#ifdef __USE_ADC2__
	SensorHubADC.ADC2_IN1 = GAS_Adc_adc2.data[0];
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <GAS_Adc_getValue+0x84>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000c84:	811a      	strh	r2, [r3, #8]
	SensorHubADC.ADC2_IN2 = GAS_Adc_adc2.data[1];
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <GAS_Adc_getValue+0x84>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000c92:	815a      	strh	r2, [r3, #10]
	SensorHubADC.ADC2_IN3 = GAS_Adc_adc2.data[2];
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <GAS_Adc_getValue+0x84>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	3308      	adds	r3, #8
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000ca0:	819a      	strh	r2, [r3, #12]
	SensorHubADC.ADC2_IN4 = GAS_Adc_adc2.data[3];
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <GAS_Adc_getValue+0x84>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	330c      	adds	r3, #12
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <GAS_Adc_getValue+0x80>)
 8000cae:	81da      	strh	r2, [r3, #14]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000009c 	.word	0x2000009c
 8000cc0:	200000b4 	.word	0x200000b4
 8000cc4:	200000a8 	.word	0x200000a8

08000cc8 <GAS_Can_txSetting>:
#endif
uint32_t STM32_msgWSS_ID = 0x00334B03;
#endif

void GAS_Can_txSetting(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
#ifdef __USE_ADC1__
	canTxHeader_ADC1.ExtId = STM32_msgADC1_ID;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <GAS_Can_txSetting+0x5c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <GAS_Can_txSetting+0x60>)
 8000cd2:	6053      	str	r3, [r2, #4]
	canTxHeader_ADC1.IDE = CAN_ID_EXT;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <GAS_Can_txSetting+0x60>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	609a      	str	r2, [r3, #8]
	canTxHeader_ADC1.RTR = CAN_RTR_DATA;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <GAS_Can_txSetting+0x60>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
	canTxHeader_ADC1.DLC = 8;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <GAS_Can_txSetting+0x60>)
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	611a      	str	r2, [r3, #16]
#endif
#ifdef __USE_ADC2__
	canTxHeader_ADC2.ExtId = STM32_msgADC2_ID;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <GAS_Can_txSetting+0x64>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <GAS_Can_txSetting+0x68>)
 8000cec:	6053      	str	r3, [r2, #4]
	canTxHeader_ADC2.IDE = CAN_ID_EXT;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <GAS_Can_txSetting+0x68>)
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	609a      	str	r2, [r3, #8]
	canTxHeader_ADC2.RTR = CAN_RTR_DATA;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <GAS_Can_txSetting+0x68>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
	canTxHeader_ADC2.DLC = 8;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <GAS_Can_txSetting+0x68>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	611a      	str	r2, [r3, #16]
#endif
	canTxHeader_WSS.ExtId = STM32_msgWSS_ID;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <GAS_Can_txSetting+0x6c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <GAS_Can_txSetting+0x70>)
 8000d06:	6053      	str	r3, [r2, #4]
	canTxHeader_WSS.IDE = CAN_ID_EXT;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <GAS_Can_txSetting+0x70>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	609a      	str	r2, [r3, #8]
	canTxHeader_WSS.RTR = CAN_RTR_DATA;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <GAS_Can_txSetting+0x70>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
	canTxHeader_WSS.DLC = 8;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <GAS_Can_txSetting+0x70>)
 8000d16:	2208      	movs	r2, #8
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20000000 	.word	0x20000000
 8000d28:	200000c4 	.word	0x200000c4
 8000d2c:	20000004 	.word	0x20000004
 8000d30:	200000e4 	.word	0x200000e4
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000104 	.word	0x20000104

08000d3c <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	//No rx required.
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	GAS_Can_txSetting();
 8000d50:	f7ff ffba 	bl	8000cc8 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8000d54:	f7ff fff2 	bl	8000d3c <GAS_Can_rxSetting>
	if(HAL_CAN_Start(&hcan) != HAL_OK) {
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <GAS_Can_init+0x34>)
 8000d5a:	f002 fdd8 	bl	800390e <HAL_CAN_Start>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <GAS_Can_init+0x1c>
		Error_Handler();
 8000d64:	f000 ffc2 	bl	8001cec <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <GAS_Can_init+0x34>)
 8000d6c:	f002 ff23 	bl	8003bb6 <HAL_CAN_ActivateNotification>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <GAS_Can_init+0x2e>
	{
		Error_Handler();
 8000d76:	f000 ffb9 	bl	8001cec <Error_Handler>
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000288 	.word	0x20000288

08000d84 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	//Modify them according to GAS_BuildConfig.h
	stm32_msgWSS.B.WSS2_RPM = TickToRPM_TIM15(SensorHubPWM.Interval15);
 8000d88:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <GAS_Can_sendMessage+0x138>)
 8000d8a:	8a5b      	ldrh	r3, [r3, #18]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f9ff 	bl	8001190 <TickToRPM_TIM15>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000d98:	805a      	strh	r2, [r3, #2]
	stm32_msgWSS.B.WSS1_RPM = TickToRPM_TIM3(SensorHubPWM.Interval3);
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <GAS_Can_sendMessage+0x138>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f9b2 	bl	8001108 <TickToRPM_TIM3>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000daa:	801a      	strh	r2, [r3, #0]
		stm32_msgWSS.B.dutyFlag.S.TIM2_ERROR = 0;
	}
#endif

#ifdef __USE_TIM3__
	if(SensorHubPWM.DutyRatio3 > dutyUpperBound || SensorHubPWM.DutyRatio3 < dutyLowerBound) {
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <GAS_Can_sendMessage+0x138>)
 8000dae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000db2:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <GAS_Can_sendMessage+0x140>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fe52 	bl	8000a60 <__aeabi_dcmpgt>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10a      	bne.n	8000dd8 <GAS_Can_sendMessage+0x54>
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <GAS_Can_sendMessage+0x138>)
 8000dc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <GAS_Can_sendMessage+0x144>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fe29 	bl	8000a24 <__aeabi_dcmplt>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <GAS_Can_sendMessage+0x60>
		stm32_msgWSS.B.dutyFlag.S.TIM3_ERROR = 1;
 8000dd8:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000dda:	7913      	ldrb	r3, [r2, #4]
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	7113      	strb	r3, [r2, #4]
 8000de2:	e004      	b.n	8000dee <GAS_Can_sendMessage+0x6a>
	} else{
		stm32_msgWSS.B.dutyFlag.S.TIM3_ERROR = 0;
 8000de4:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000de6:	7913      	ldrb	r3, [r2, #4]
 8000de8:	f36f 0382 	bfc	r3, #2, #1
 8000dec:	7113      	strb	r3, [r2, #4]
	}
#endif

#ifdef __USE_TIM15__
	if(SensorHubPWM.DutyRatio15 > dutyUpperBound || SensorHubPWM.DutyRatio15 < dutyLowerBound) {
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <GAS_Can_sendMessage+0x138>)
 8000df0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <GAS_Can_sendMessage+0x140>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	f7ff fe31 	bl	8000a60 <__aeabi_dcmpgt>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10a      	bne.n	8000e1a <GAS_Can_sendMessage+0x96>
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <GAS_Can_sendMessage+0x138>)
 8000e06:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <GAS_Can_sendMessage+0x144>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fe08 	bl	8000a24 <__aeabi_dcmplt>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <GAS_Can_sendMessage+0xa2>
		stm32_msgWSS.B.dutyFlag.S.TIM15_ERROR = 1;
 8000e1a:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000e1c:	7913      	ldrb	r3, [r2, #4]
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	7113      	strb	r3, [r2, #4]
 8000e24:	e004      	b.n	8000e30 <GAS_Can_sendMessage+0xac>
	} else{
		stm32_msgWSS.B.dutyFlag.S.TIM15_ERROR = 0;
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000e28:	7913      	ldrb	r3, [r2, #4]
 8000e2a:	f36f 03c3 	bfc	r3, #3, #1
 8000e2e:	7113      	strb	r3, [r2, #4]
	}
#endif

	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000e30:	4826      	ldr	r0, [pc, #152]	; (8000ecc <GAS_Can_sendMessage+0x148>)
 8000e32:	f002 fe8b 	bl	8003b4c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <GAS_Can_sendMessage+0x14c>)
 8000e3a:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader_WSS, &stm32_msgWSS.TxData[0], &TxMailBox);
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <GAS_Can_sendMessage+0x14c>)
 8000e3e:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <GAS_Can_sendMessage+0x13c>)
 8000e40:	4924      	ldr	r1, [pc, #144]	; (8000ed4 <GAS_Can_sendMessage+0x150>)
 8000e42:	4822      	ldr	r0, [pc, #136]	; (8000ecc <GAS_Can_sendMessage+0x148>)
 8000e44:	f002 fda7 	bl	8003996 <HAL_CAN_AddTxMessage>
	else{
		HAL_GPIO_WritePin(GPIOB, LED01_Pin, GPIO_PIN_RESET);
	}*/

#ifdef __USE_ADC1__
	stm32_msgADC1.B.IN1 = SensorHubADC.ADC1_IN1;
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e4a:	881a      	ldrh	r2, [r3, #0]
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <GAS_Can_sendMessage+0x158>)
 8000e4e:	801a      	strh	r2, [r3, #0]
	stm32_msgADC1.B.IN2 = SensorHubADC.ADC1_IN2;
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e52:	885a      	ldrh	r2, [r3, #2]
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <GAS_Can_sendMessage+0x158>)
 8000e56:	805a      	strh	r2, [r3, #2]
	stm32_msgADC1.B.IN3 = SensorHubADC.ADC1_IN3;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e5a:	889a      	ldrh	r2, [r3, #4]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <GAS_Can_sendMessage+0x158>)
 8000e5e:	809a      	strh	r2, [r3, #4]
	stm32_msgADC1.B.IN4 = SensorHubADC.ADC1_IN4;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e62:	88da      	ldrh	r2, [r3, #6]
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <GAS_Can_sendMessage+0x158>)
 8000e66:	80da      	strh	r2, [r3, #6]
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <GAS_Can_sendMessage+0x148>)
 8000e6a:	f002 fe6f 	bl	8003b4c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <GAS_Can_sendMessage+0x14c>)
 8000e72:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader_ADC1, &stm32_msgADC1.TxData[0], &TxMailBox);
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <GAS_Can_sendMessage+0x14c>)
 8000e76:	4a19      	ldr	r2, [pc, #100]	; (8000edc <GAS_Can_sendMessage+0x158>)
 8000e78:	4919      	ldr	r1, [pc, #100]	; (8000ee0 <GAS_Can_sendMessage+0x15c>)
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <GAS_Can_sendMessage+0x148>)
 8000e7c:	f002 fd8b 	bl	8003996 <HAL_CAN_AddTxMessage>
		HAL_GPIO_WritePin(GPIOB, LED02_Pin, GPIO_PIN_RESET);
	}*/
#endif

#ifdef __USE_ADC2__
	stm32_msgADC2.B.IN1 = SensorHubADC.ADC2_IN1;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e82:	891a      	ldrh	r2, [r3, #8]
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <GAS_Can_sendMessage+0x160>)
 8000e86:	801a      	strh	r2, [r3, #0]
	stm32_msgADC2.B.IN2 = SensorHubADC.ADC2_IN2;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e8a:	895a      	ldrh	r2, [r3, #10]
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <GAS_Can_sendMessage+0x160>)
 8000e8e:	805a      	strh	r2, [r3, #2]
	stm32_msgADC2.B.IN3 = SensorHubADC.ADC2_IN3;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e92:	899a      	ldrh	r2, [r3, #12]
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <GAS_Can_sendMessage+0x160>)
 8000e96:	809a      	strh	r2, [r3, #4]
	stm32_msgADC2.B.IN4 = SensorHubADC.ADC2_IN4;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <GAS_Can_sendMessage+0x154>)
 8000e9a:	89da      	ldrh	r2, [r3, #14]
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <GAS_Can_sendMessage+0x160>)
 8000e9e:	80da      	strh	r2, [r3, #6]
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <GAS_Can_sendMessage+0x148>)
 8000ea2:	f002 fe53 	bl	8003b4c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <GAS_Can_sendMessage+0x14c>)
 8000eaa:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader_ADC2, &stm32_msgADC2.TxData[0], &TxMailBox);
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <GAS_Can_sendMessage+0x14c>)
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <GAS_Can_sendMessage+0x160>)
 8000eb0:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <GAS_Can_sendMessage+0x164>)
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <GAS_Can_sendMessage+0x148>)
 8000eb4:	f002 fd6f 	bl	8003996 <HAL_CAN_AddTxMessage>
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000128 	.word	0x20000128
 8000ec0:	2000011c 	.word	0x2000011c
 8000ec4:	08007f10 	.word	0x08007f10
 8000ec8:	08007f08 	.word	0x08007f08
 8000ecc:	20000288 	.word	0x20000288
 8000ed0:	20000124 	.word	0x20000124
 8000ed4:	20000104 	.word	0x20000104
 8000ed8:	200000b4 	.word	0x200000b4
 8000edc:	200000dc 	.word	0x200000dc
 8000ee0:	200000c4 	.word	0x200000c4
 8000ee4:	200000fc 	.word	0x200000fc
 8000ee8:	200000e4 	.word	0x200000e4

08000eec <GAS_Pwm_init>:

const double dutyLowerBound = 0.0;
const double dutyUpperBound = 1.0;

void GAS_Pwm_init()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
#ifdef __USE_TIM2__
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //main channel
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2); //indirect channel
#endif
#ifdef __USE_TIM3__
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //main channel
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <GAS_Pwm_init+0x28>)
 8000ef4:	f005 fc0c 	bl	8006710 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2); //indirect channel
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <GAS_Pwm_init+0x28>)
 8000efc:	f005 fb20 	bl	8006540 <HAL_TIM_IC_Start>

	//HAL_TIM_Base_Start_IT(&htim3) ;
#endif
#ifdef __USE_TIM15__
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1); //main channel
 8000f00:	2100      	movs	r1, #0
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <GAS_Pwm_init+0x2c>)
 8000f04:	f005 fc04 	bl	8006710 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2); //indirect channel
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <GAS_Pwm_init+0x2c>)
 8000f0c:	f005 fb18 	bl	8006540 <HAL_TIM_IC_Start>

	//HAL_TIM_Base_Start_IT(&htim15) ;
#endif
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003a8 	.word	0x200003a8
 8000f18:	200003f4 	.word	0x200003f4

08000f1c <GAS_Pwm_InterruptServiceRoutine>:
#endif
}
*/

void GAS_Pwm_InterruptServiceRoutine(TIM_HandleTypeDef *htim)
{
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
			}
		}
	}
#endif
#ifdef __USE_TIM3__
	if(htim->Instance == TIM3) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <GAS_Pwm_InterruptServiceRoutine+0x108>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d137      	bne.n	8000f9e <GAS_Pwm_InterruptServiceRoutine+0x82>
		//HAL_GPIO_TogglePin(GPIOB, LED02_Pin);
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7f1b      	ldrb	r3, [r3, #28]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d133      	bne.n	8000f9e <GAS_Pwm_InterruptServiceRoutine+0x82>
			SensorHubPWM.Interval3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f005 ffe3 	bl	8006f04 <HAL_TIM_ReadCapturedValue>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f44:	801a      	strh	r2, [r3, #0]
			SensorHubPWM.DutyCycle3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f46:	2104      	movs	r1, #4
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f005 ffdb 	bl	8006f04 <HAL_TIM_ReadCapturedValue>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f54:	805a      	strh	r2, [r3, #2]
			if(SensorHubPWM.Interval3 > 0) {
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d016      	beq.n	8000f8c <GAS_Pwm_InterruptServiceRoutine+0x70>
				SensorHubPWM.DutyRatio3 = ((double)SensorHubPWM.DutyCycle3) /SensorHubPWM.Interval3;
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f60:	885b      	ldrh	r3, [r3, #2]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa72 	bl	800044c <__aeabi_ui2d>
 8000f68:	4604      	mov	r4, r0
 8000f6a:	460d      	mov	r5, r1
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa7b 	bl	800046c <__aeabi_i2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff fc09 	bl	8000794 <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4928      	ldr	r1, [pc, #160]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}
			SensorHubPWM.updated3 = 1;
 8000f8c:	4a26      	ldr	r2, [pc, #152]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000f8e:	7c13      	ldrb	r3, [r2, #16]
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	7413      	strb	r3, [r2, #16]
			HAL_GPIO_TogglePin(LED00_GPIO_Port, LED00_Pin);
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	4824      	ldr	r0, [pc, #144]	; (800102c <GAS_Pwm_InterruptServiceRoutine+0x110>)
 8000f9a:	f003 fc9d 	bl	80048d8 <HAL_GPIO_TogglePin>
		}
	}
#endif
#ifdef __USE_TIM15__
	if(htim->Instance == TIM15) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <GAS_Pwm_InterruptServiceRoutine+0x114>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d139      	bne.n	800101c <GAS_Pwm_InterruptServiceRoutine+0x100>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f1b      	ldrb	r3, [r3, #28]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d131      	bne.n	8001014 <GAS_Pwm_InterruptServiceRoutine+0xf8>
			SensorHubPWM.Interval15 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f005 ffa6 	bl	8006f04 <HAL_TIM_ReadCapturedValue>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000fbe:	825a      	strh	r2, [r3, #18]
			SensorHubPWM.DutyCycle15 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f005 ff9e 	bl	8006f04 <HAL_TIM_ReadCapturedValue>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000fce:	829a      	strh	r2, [r3, #20]
			if(SensorHubPWM.Interval15 > 0) {
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000fd2:	8a5b      	ldrh	r3, [r3, #18]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d016      	beq.n	8001006 <GAS_Pwm_InterruptServiceRoutine+0xea>
				SensorHubPWM.DutyRatio15 = ((double)SensorHubPWM.DutyCycle15) /SensorHubPWM.Interval15;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000fda:	8a9b      	ldrh	r3, [r3, #20]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa35 	bl	800044c <__aeabi_ui2d>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8000fe8:	8a5b      	ldrh	r3, [r3, #18]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa3e 	bl	800046c <__aeabi_i2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff fbcc 	bl	8000794 <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4909      	ldr	r1, [pc, #36]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8001002:	e9c1 2306 	strd	r2, r3, [r1, #24]
			}
			SensorHubPWM.updated15 = 1;
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <GAS_Pwm_InterruptServiceRoutine+0x10c>)
 8001008:	f892 3020 	ldrb.w	r3, [r2, #32]
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	f882 3020 	strb.w	r3, [r2, #32]
		}
		HAL_GPIO_TogglePin(LED01_GPIO_Port, LED01_Pin);
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <GAS_Pwm_InterruptServiceRoutine+0x110>)
 8001018:	f003 fc5e 	bl	80048d8 <HAL_GPIO_TogglePin>
	}
#endif
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bdb0      	pop	{r4, r5, r7, pc}
 8001024:	40000400 	.word	0x40000400
 8001028:	20000128 	.word	0x20000128
 800102c:	48000400 	.word	0x48000400
 8001030:	40014000 	.word	0x40014000

08001034 <GAS_Pwm_run_100ms>:

void GAS_Pwm_run_100ms() {
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
		SensorHubPWM.DutyRatio2 = (double)0.0;
	}
	SensorHubPWM.updated2 = 0;
#endif
#ifdef __USE_TIM3__
	if(!SensorHubPWM.updated3) {
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 800103a:	7c1b      	ldrb	r3, [r3, #16]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10c      	bne.n	8001060 <GAS_Pwm_run_100ms+0x2c>
		SensorHubPWM.Interval3 = 0;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
		SensorHubPWM.DutyCycle3 = 0;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 800104e:	2200      	movs	r2, #0
 8001050:	805a      	strh	r2, [r3, #2]
		SensorHubPWM.DutyRatio3 = (double)0.0;
 8001052:	4916      	ldr	r1, [pc, #88]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	SensorHubPWM.updated3 = 0;
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 8001062:	7c13      	ldrb	r3, [r2, #16]
 8001064:	f36f 0300 	bfc	r3, #0, #1
 8001068:	7413      	strb	r3, [r2, #16]
#endif
#ifdef __USE_TIM15__
	if(!SensorHubPWM.updated15) {
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 800106c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <GAS_Pwm_run_100ms+0x60>
		SensorHubPWM.Interval15 = 0;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 800107c:	2200      	movs	r2, #0
 800107e:	825a      	strh	r2, [r3, #18]
		SensorHubPWM.DutyCycle15 = 0;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 8001082:	2200      	movs	r2, #0
 8001084:	829a      	strh	r2, [r3, #20]
		SensorHubPWM.DutyRatio15 = (double)0.0;
 8001086:	4909      	ldr	r1, [pc, #36]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	SensorHubPWM.updated15 = 0;
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <GAS_Pwm_run_100ms+0x78>)
 8001096:	f892 3020 	ldrb.w	r3, [r2, #32]
 800109a:	f36f 0300 	bfc	r3, #0, #1
 800109e:	f882 3020 	strb.w	r3, [r2, #32]
#endif
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000128 	.word	0x20000128

080010b0 <PCLK1TIM>:
 * Quite a surprise, stock HAL does not provide a function to look up the clock frequency for timer peripherals.
 * This is a user implemented function that returns "APB1 timer clocks (MHz)" field set on the .ioc configuration.
 * TIM 2,3,6,7 run on this clock.
 * Checkout associated JIRA project for design intentions.
 * */
uint32_t PCLK1TIM(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	uint32_t PCLK1 = HAL_RCC_GetPCLK1Freq();
 80010b6:	f004 ffdf 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 80010ba:	6078      	str	r0, [r7, #4]

	if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <PCLK1TIM+0x28>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <PCLK1TIM+0x1c>
	{
		return PCLK1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	e001      	b.n	80010d0 <PCLK1TIM+0x20>
	}
	else
	{
		return (2 * PCLK1);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	005b      	lsls	r3, r3, #1
	}
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <PCLK2TIM>:

/*
 * Ditto.
 * TIM 15, 16, 17 run on this clock.
 * */
uint32_t PCLK2TIM(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	uint32_t PCLK2 = HAL_RCC_GetPCLK2Freq();
 80010e2:	f004 ffeb 	bl	80060bc <HAL_RCC_GetPCLK2Freq>
 80010e6:	6078      	str	r0, [r7, #4]

	if((RCC->CFGR & RCC_CFGR_PPRE2) == 0)
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <PCLK2TIM+0x28>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <PCLK2TIM+0x1c>
	{
		return PCLK2;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	e001      	b.n	80010fc <PCLK2TIM+0x20>
	}
	else
	{
		return (2 * PCLK2);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	005b      	lsls	r3, r3, #1
	}
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000

08001108 <TickToRPM_TIM3>:
 * TIM3 - 16bit Counter.
 *
 * Ditto
 * */
uint16_t TickToRPM_TIM3(uint16_t Interval)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	return Interval?(2.5/(((double)Interval * (htim3.Init.Prescaler+1))/PCLK1TIM())):0;
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d031      	beq.n	800117c <TickToRPM_TIM3+0x74>
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f996 	bl	800044c <__aeabi_ui2d>
 8001120:	4604      	mov	r4, r0
 8001122:	460d      	mov	r5, r1
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <TickToRPM_TIM3+0x80>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f98e 	bl	800044c <__aeabi_ui2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff fa02 	bl	8000540 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	f7ff ffb4 	bl	80010b0 <PCLK1TIM>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f97e 	bl	800044c <__aeabi_ui2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff fb1c 	bl	8000794 <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4909      	ldr	r1, [pc, #36]	; (800118c <TickToRPM_TIM3+0x84>)
 8001166:	f7ff fb15 	bl	8000794 <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fc7f 	bl	8000a74 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	b29b      	uxth	r3, r3
 800117a:	e000      	b.n	800117e <TickToRPM_TIM3+0x76>
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	200003a8 	.word	0x200003a8
 800118c:	40040000 	.word	0x40040000

08001190 <TickToRPM_TIM15>:

#ifdef __USE_TIM15__
uint16_t TickToRPM_TIM15(uint16_t Interval)
{
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	return Interval?(2.5/(((double)Interval * (htim15.Init.Prescaler+1))/PCLK2TIM())):0;
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d031      	beq.n	8001204 <TickToRPM_TIM15+0x74>
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f952 	bl	800044c <__aeabi_ui2d>
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <TickToRPM_TIM15+0x80>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f94a 	bl	800044c <__aeabi_ui2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f9be 	bl	8000540 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4614      	mov	r4, r2
 80011ca:	461d      	mov	r5, r3
 80011cc:	f7ff ff86 	bl	80010dc <PCLK2TIM>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f93a 	bl	800044c <__aeabi_ui2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fad8 	bl	8000794 <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	f04f 0000 	mov.w	r0, #0
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <TickToRPM_TIM15+0x84>)
 80011ee:	f7ff fad1 	bl	8000794 <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fc3b 	bl	8000a74 <__aeabi_d2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29b      	uxth	r3, r3
 8001202:	e000      	b.n	8001206 <TickToRPM_TIM15+0x76>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
 800120e:	bf00      	nop
 8001210:	200003f4 	.word	0x200003f4
 8001214:	40040000 	.word	0x40040000

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ffc2 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <GAS_Scheduler_init>:
void GAS_Scheduler(void);

int b;

void GAS_Scheduler_init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 * Note:
 * An alias for GAS_getHclkClk().
 */
GAS_INLINE uint32_t GAS_getSystemCoreClock(void)
{
	return GAS_getHclkClk();
 80012b6:	f7ff fbfd 	bl	8000ab4 <GAS_getHclkClk>
 80012ba:	4603      	mov	r3, r0
	uint32_t systemClockFreq = GAS_getSystemCoreClock(); //HCLK in HZ
 80012bc:	607b      	str	r3, [r7, #4]

	SysTick_Config(systemClockFreq/1000);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <GAS_Scheduler_init+0x38>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffcf 	bl	800126c <SysTick_Config>

	//GAS_Vadc_init(); //실행 중 reset
	GAS_Adc_init(); //실행 중 reset
 80012ce:	f7ff fc59 	bl	8000b84 <GAS_Adc_init>
	GAS_Pwm_init();
 80012d2:	f7ff fe0b 	bl	8000eec <GAS_Pwm_init>
	GAS_Can_init();
 80012d6:	f7ff fd39 	bl	8000d4c <GAS_Can_init>
	gTask.flag_initialized = True;
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <GAS_Scheduler_init+0x3c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	711a      	strb	r2, [r3, #4]

}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	10624dd3 	.word	0x10624dd3
 80012ec:	20000154 	.word	0x20000154

080012f0 <GAS_Scheduler_taskCounter_1ms>:

void GAS_Scheduler_taskCounter_1ms(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	GAS_Adc_getValue();
 80012f4:	f7ff fca4 	bl	8000c40 <GAS_Adc_getValue>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	GAS_Can_sendMessage();
 8001300:	f7ff fd40 	bl	8000d84 <GAS_Can_sendMessage>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOB, BlueLED_Pin);
	// HAL_GPIO_WritePin(GPIOB, LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_TogglePin(GPIOB, LED00_Pin/*|LED02_Pin|LED01_Pin|LED00_Pin*/);
	HAL_GPIO_TogglePin(GPIOC, LED10_Pin);
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <GAS_Scheduler_taskCounter_100ms+0x18>)
 8001312:	f003 fae1 	bl	80048d8 <HAL_GPIO_TogglePin>
	GAS_Pwm_run_100ms();
 8001316:	f7ff fe8d 	bl	8001034 <GAS_Pwm_run_100ms>
	//LED03이 Reset LED
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	48000800 	.word	0x48000800

08001324 <GAS_Scheduler_taskCounter_1000ms>:

void GAS_Scheduler_taskCounter_1000ms(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_SYSTICK_Callback>:

//Ref: https://jexe.tistory.com/4
void HAL_SYSTICK_Callback(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_SYSTICK_Callback+0x88>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_SYSTICK_Callback+0x88>)
 8001340:	6013      	str	r3, [r2, #0]
	gTask.flag_1ms = True;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_SYSTICK_Callback+0x8c>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
	if(gTimerCnt % 10 == 0)
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_SYSTICK_Callback+0x88>)
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_SYSTICK_Callback+0x90>)
 800134e:	fb83 2301 	smull	r2, r3, r3, r1
 8001352:	109a      	asrs	r2, r3, #2
 8001354:	17cb      	asrs	r3, r1, #31
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	1aca      	subs	r2, r1, r3
 8001362:	2a00      	cmp	r2, #0
 8001364:	d102      	bne.n	800136c <HAL_SYSTICK_Callback+0x38>
	{
		gTask.flag_10ms = True;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_SYSTICK_Callback+0x8c>)
 8001368:	2201      	movs	r2, #1
 800136a:	705a      	strb	r2, [r3, #1]
	}
	if(gTimerCnt % 100 == 0)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_SYSTICK_Callback+0x88>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_SYSTICK_Callback+0x94>)
 8001372:	fb83 1302 	smull	r1, r3, r3, r2
 8001376:	1159      	asrs	r1, r3, #5
 8001378:	17d3      	asrs	r3, r2, #31
 800137a:	1acb      	subs	r3, r1, r3
 800137c:	2164      	movs	r1, #100	; 0x64
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <HAL_SYSTICK_Callback+0x5a>
	{
		gTask.flag_100ms = True;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_SYSTICK_Callback+0x8c>)
 800138a:	2201      	movs	r2, #1
 800138c:	709a      	strb	r2, [r3, #2]
	}
	if(gTimerCnt % 1000 == 0)
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_SYSTICK_Callback+0x88>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_SYSTICK_Callback+0x98>)
 8001394:	fb83 1302 	smull	r1, r3, r3, r2
 8001398:	1199      	asrs	r1, r3, #6
 800139a:	17d3      	asrs	r3, r2, #31
 800139c:	1acb      	subs	r3, r1, r3
 800139e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a2:	fb01 f303 	mul.w	r3, r1, r3
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <HAL_SYSTICK_Callback+0x7e>
	{
		gTask.flag_1000ms = True;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_SYSTICK_Callback+0x8c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	70da      	strb	r2, [r3, #3]
	}
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20000150 	.word	0x20000150
 80013c0:	20000154 	.word	0x20000154
 80013c4:	66666667 	.word	0x66666667
 80013c8:	51eb851f 	.word	0x51eb851f
 80013cc:	10624dd3 	.word	0x10624dd3

080013d0 <GAS_Scheduler>:

void GAS_Scheduler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	if(gTask.flag_1ms == True)
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <GAS_Scheduler+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d104      	bne.n	80013e8 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <GAS_Scheduler+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 80013e4:	f7ff ff84 	bl	80012f0 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <GAS_Scheduler+0x58>)
 80013ea:	785b      	ldrb	r3, [r3, #1]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d104      	bne.n	80013fc <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <GAS_Scheduler+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 80013f8:	f7ff ff80 	bl	80012fc <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <GAS_Scheduler+0x58>)
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d104      	bne.n	8001410 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <GAS_Scheduler+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 800140c:	f7ff ff7c 	bl	8001308 <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <GAS_Scheduler+0x58>)
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d104      	bne.n	8001424 <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 800141a:	4b03      	ldr	r3, [pc, #12]	; (8001428 <GAS_Scheduler+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 8001420:	f7ff ff80 	bl	8001324 <GAS_Scheduler_taskCounter_1000ms>
	}
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000154 	.word	0x20000154

0800142c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800144e:	4b43      	ldr	r3, [pc, #268]	; (800155c <MX_ADC1_Init+0x130>)
 8001450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <MX_ADC1_Init+0x130>)
 8001458:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800145c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <MX_ADC1_Init+0x130>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001464:	4b3d      	ldr	r3, [pc, #244]	; (800155c <MX_ADC1_Init+0x130>)
 8001466:	2201      	movs	r2, #1
 8001468:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146a:	4b3c      	ldr	r3, [pc, #240]	; (800155c <MX_ADC1_Init+0x130>)
 800146c:	2201      	movs	r2, #1
 800146e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <MX_ADC1_Init+0x130>)
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <MX_ADC1_Init+0x130>)
 800147a:	2200      	movs	r2, #0
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <MX_ADC1_Init+0x130>)
 8001480:	2201      	movs	r2, #1
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <MX_ADC1_Init+0x130>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <MX_ADC1_Init+0x130>)
 800148c:	2204      	movs	r2, #4
 800148e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <MX_ADC1_Init+0x130>)
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <MX_ADC1_Init+0x130>)
 800149a:	2204      	movs	r2, #4
 800149c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <MX_ADC1_Init+0x130>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014a4:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_ADC1_Init+0x130>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014aa:	482c      	ldr	r0, [pc, #176]	; (800155c <MX_ADC1_Init+0x130>)
 80014ac:	f001 fa12 	bl	80028d4 <HAL_ADC_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014b6:	f000 fc19 	bl	8001cec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4825      	ldr	r0, [pc, #148]	; (800155c <MX_ADC1_Init+0x130>)
 80014c6:	f001 ff31 	bl	800332c <HAL_ADCEx_MultiModeConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80014d0:	f000 fc0c 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d8:	2301      	movs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80014e0:	2302      	movs	r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	481a      	ldr	r0, [pc, #104]	; (800155c <MX_ADC1_Init+0x130>)
 80014f2:	f001 fc5b 	bl	8002dac <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80014fc:	f000 fbf6 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001500:	2302      	movs	r3, #2
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001504:	2302      	movs	r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_ADC1_Init+0x130>)
 800150e:	f001 fc4d 	bl	8002dac <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001518:	f000 fbe8 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800151c:	2303      	movs	r3, #3
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001520:	2303      	movs	r3, #3
 8001522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_ADC1_Init+0x130>)
 800152a:	f001 fc3f 	bl	8002dac <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001534:	f000 fbda 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001538:	2304      	movs	r3, #4
 800153a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800153c:	2304      	movs	r3, #4
 800153e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_ADC1_Init+0x130>)
 8001546:	f001 fc31 	bl	8002dac <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001550:	f000 fbcc 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000015c 	.word	0x2000015c

08001560 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <MX_ADC2_Init+0x108>)
 8001578:	4a3c      	ldr	r2, [pc, #240]	; (800166c <MX_ADC2_Init+0x10c>)
 800157a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <MX_ADC2_Init+0x108>)
 800157e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001582:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <MX_ADC2_Init+0x108>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <MX_ADC2_Init+0x108>)
 800158c:	2201      	movs	r2, #1
 800158e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <MX_ADC2_Init+0x108>)
 8001592:	2201      	movs	r2, #1
 8001594:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <MX_ADC2_Init+0x108>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <MX_ADC2_Init+0x108>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a4:	4b30      	ldr	r3, [pc, #192]	; (8001668 <MX_ADC2_Init+0x108>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <MX_ADC2_Init+0x108>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <MX_ADC2_Init+0x108>)
 80015b2:	2204      	movs	r2, #4
 80015b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_ADC2_Init+0x108>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <MX_ADC2_Init+0x108>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <MX_ADC2_Init+0x108>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ca:	4b27      	ldr	r3, [pc, #156]	; (8001668 <MX_ADC2_Init+0x108>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015d0:	4825      	ldr	r0, [pc, #148]	; (8001668 <MX_ADC2_Init+0x108>)
 80015d2:	f001 f97f 	bl	80028d4 <HAL_ADC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80015dc:	f000 fb86 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80015ec:	2302      	movs	r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <MX_ADC2_Init+0x108>)
 80015fe:	f001 fbd5 	bl	8002dac <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001608:	f000 fb70 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800160c:	2302      	movs	r3, #2
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001610:	2302      	movs	r3, #2
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4813      	ldr	r0, [pc, #76]	; (8001668 <MX_ADC2_Init+0x108>)
 800161a:	f001 fbc7 	bl	8002dac <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001624:	f000 fb62 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001628:	2303      	movs	r3, #3
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800162c:	2303      	movs	r3, #3
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <MX_ADC2_Init+0x108>)
 8001636:	f001 fbb9 	bl	8002dac <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001640:	f000 fb54 	bl	8001cec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001644:	2304      	movs	r3, #4
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001648:	2304      	movs	r3, #4
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_ADC2_Init+0x108>)
 8001652:	f001 fbab 	bl	8002dac <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800165c:	f000 fb46 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001ac 	.word	0x200001ac
 800166c:	50000100 	.word	0x50000100

08001670 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001690:	d156      	bne.n	8001740 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_ADC_MspInit+0x190>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a59      	ldr	r2, [pc, #356]	; (8001800 <HAL_ADC_MspInit+0x190>)
 800169a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_ADC_MspInit+0x190>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10b      	bne.n	80016bc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <HAL_ADC_MspInit+0x194>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	4a56      	ldr	r2, [pc, #344]	; (8001804 <HAL_ADC_MspInit+0x194>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6153      	str	r3, [r2, #20]
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <HAL_ADC_MspInit+0x194>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b51      	ldr	r3, [pc, #324]	; (8001804 <HAL_ADC_MspInit+0x194>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a50      	ldr	r2, [pc, #320]	; (8001804 <HAL_ADC_MspInit+0x194>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c6:	6153      	str	r3, [r2, #20]
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <HAL_ADC_MspInit+0x194>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230f      	movs	r3, #15
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f002 ff6b 	bl	80045c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_ADC_MspInit+0x198>)
 80016f0:	4a46      	ldr	r2, [pc, #280]	; (800180c <HAL_ADC_MspInit+0x19c>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_ADC_MspInit+0x198>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_ADC_MspInit+0x198>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_ADC_MspInit+0x198>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_ADC_MspInit+0x198>)
 8001708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_ADC_MspInit+0x198>)
 8001710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001714:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HAL_ADC_MspInit+0x198>)
 8001718:	2220      	movs	r2, #32
 800171a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800171c:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <HAL_ADC_MspInit+0x198>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001722:	4839      	ldr	r0, [pc, #228]	; (8001808 <HAL_ADC_MspInit+0x198>)
 8001724:	f002 fdb7 	bl	8004296 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800172e:	f000 fadd 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a34      	ldr	r2, [pc, #208]	; (8001808 <HAL_ADC_MspInit+0x198>)
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
 8001738:	4a33      	ldr	r2, [pc, #204]	; (8001808 <HAL_ADC_MspInit+0x198>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800173e:	e05a      	b.n	80017f6 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_ADC_MspInit+0x1a0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d155      	bne.n	80017f6 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_ADC_MspInit+0x190>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <HAL_ADC_MspInit+0x190>)
 8001752:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_ADC_MspInit+0x190>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10b      	bne.n	8001774 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_ADC_MspInit+0x194>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a28      	ldr	r2, [pc, #160]	; (8001804 <HAL_ADC_MspInit+0x194>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6153      	str	r3, [r2, #20]
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_ADC_MspInit+0x194>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_ADC_MspInit+0x194>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	4a22      	ldr	r2, [pc, #136]	; (8001804 <HAL_ADC_MspInit+0x194>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	6153      	str	r3, [r2, #20]
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_ADC_MspInit+0x194>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800178c:	23f0      	movs	r3, #240	; 0xf0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f002 ff0f 	bl	80045c4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_ADC_MspInit+0x1a8>)
 80017aa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017cc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017d0:	2220      	movs	r2, #32
 80017d2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017dc:	f002 fd5b 	bl	8004296 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 80017e6:	f000 fa81 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_ADC_MspInit+0x1a4>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	; 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000284 	.word	0x20000284
 8001804:	40021000 	.word	0x40021000
 8001808:	200001fc 	.word	0x200001fc
 800180c:	40020008 	.word	0x40020008
 8001810:	50000100 	.word	0x50000100
 8001814:	20000240 	.word	0x20000240
 8001818:	4002001c 	.word	0x4002001c

0800181c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_CAN_Init+0x64>)
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <MX_CAN_Init+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_CAN_Init+0x64>)
 8001828:	2206      	movs	r2, #6
 800182a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_CAN_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_CAN_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_CAN_Init+0x64>)
 800183a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800183e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_CAN_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_CAN_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_CAN_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_CAN_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_CAN_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_CAN_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_CAN_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_CAN_Init+0x64>)
 800186c:	f001 ff54 	bl	8003718 <HAL_CAN_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001876:	f000 fa39 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000288 	.word	0x20000288
 8001884:	40006400 	.word	0x40006400

08001888 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_CAN_MspInit+0xa0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d139      	bne.n	800191e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_CAN_MspInit+0xa4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_CAN_MspInit+0xa4>)
 80018b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_CAN_MspInit+0xa4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_CAN_MspInit+0xa4>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_CAN_MspInit+0xa4>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	6153      	str	r3, [r2, #20]
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_CAN_MspInit+0xa4>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80018ec:	2309      	movs	r3, #9
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f002 fe63 	bl	80045c4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2014      	movs	r0, #20
 8001904:	f002 fc91 	bl	800422a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001908:	2014      	movs	r0, #20
 800190a:	f002 fcaa 	bl	8004262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2015      	movs	r0, #21
 8001914:	f002 fc89 	bl	800422a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001918:	2015      	movs	r0, #21
 800191a:	f002 fca2 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40006400 	.word	0x40006400
 800192c:	40021000 	.word	0x40021000

08001930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <MX_DMA_Init+0x48>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <MX_DMA_Init+0x48>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <MX_DMA_Init+0x48>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	200b      	movs	r0, #11
 8001954:	f002 fc69 	bl	800422a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001958:	200b      	movs	r0, #11
 800195a:	f002 fc82 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	200c      	movs	r0, #12
 8001964:	f002 fc61 	bl	800422a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001968:	200c      	movs	r0, #12
 800196a:	f002 fc7a 	bl	8004262 <HAL_NVIC_EnableIRQ>

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <MX_GPIO_Init+0xe8>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <MX_GPIO_Init+0xe8>)
 8001998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800199c:	6153      	str	r3, [r2, #20]
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_GPIO_Init+0xe8>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|LED11_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019f8:	481b      	ldr	r0, [pc, #108]	; (8001a68 <MX_GPIO_Init+0xec>)
 80019fa:	f002 ff55 	bl	80048a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	21f0      	movs	r1, #240	; 0xf0
 8001a02:	481a      	ldr	r0, [pc, #104]	; (8001a6c <MX_GPIO_Init+0xf0>)
 8001a04:	f002 ff50 	bl	80048a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED10_Pin|LED11_Pin;
 8001a08:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_GPIO_Init+0xec>)
 8001a22:	f002 fdcf 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN01_Pin|BTN00_Pin;
 8001a26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <MX_GPIO_Init+0xec>)
 8001a3c:	f002 fdc2 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin;
 8001a40:	23f0      	movs	r3, #240	; 0xf0
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_GPIO_Init+0xf0>)
 8001a58:	f002 fdb4 	bl	80045c4 <HAL_GPIO_Init>

}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000400 	.word	0x48000400

08001a70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <MX_I2C1_Init+0x78>)
 8001a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <MX_I2C1_Init+0x7c>)
 8001a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001aac:	f002 ff2e 	bl	800490c <HAL_I2C_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ab6:	f000 f919 	bl	8001cec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aba:	2100      	movs	r1, #0
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001abe:	f002 ffb4 	bl	8004a2a <HAL_I2CEx_ConfigAnalogFilter>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ac8:	f000 f910 	bl	8001cec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001acc:	2100      	movs	r1, #0
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_I2C1_Init+0x74>)
 8001ad0:	f002 fff6 	bl	8004ac0 <HAL_I2CEx_ConfigDigitalFilter>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f000 f907 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002b0 	.word	0x200002b0
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	2000090e 	.word	0x2000090e

08001af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_I2C_MspInit+0x7c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d128      	bne.n	8001b64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_I2C_MspInit+0x80>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <HAL_I2C_MspInit+0x80>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_I2C_MspInit+0x80>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	480b      	ldr	r0, [pc, #44]	; (8001b74 <HAL_I2C_MspInit+0x84>)
 8001b48:	f002 fd3c 	bl	80045c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_I2C_MspInit+0x80>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_I2C_MspInit+0x80>)
 8001b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b56:	61d3      	str	r3, [r2, #28]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_I2C_MspInit+0x80>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400

08001b78 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_IWDG_Init+0x34>)
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <MX_IWDG_Init+0x38>)
 8001b80:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_IWDG_Init+0x34>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_IWDG_Init+0x34>)
 8001b8a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b8e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_IWDG_Init+0x34>)
 8001b92:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b96:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_IWDG_Init+0x34>)
 8001b9a:	f002 ffdd 	bl	8004b58 <HAL_IWDG_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001ba4:	f000 f8a2 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200002fc 	.word	0x200002fc
 8001bb0:	40003000 	.word	0x40003000

08001bb4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	GAS_Pwm_InterruptServiceRoutine(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff f9ad 	bl	8000f1c <GAS_Pwm_InterruptServiceRoutine>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd0:	f000 fdfc 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd4:	f000 f824 	bl	8001c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd8:	f7ff fed0 	bl	800197c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bdc:	f7ff fea8 	bl	8001930 <MX_DMA_Init>
  MX_ADC1_Init();
 8001be0:	f7ff fc24 	bl	800142c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001be4:	f7ff fcbc 	bl	8001560 <MX_ADC2_Init>
  MX_CAN_Init();
 8001be8:	f7ff fe18 	bl	800181c <MX_CAN_Init>
  MX_I2C1_Init();
 8001bec:	f7ff ff40 	bl	8001a70 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001bf0:	f000 f970 	bl	8001ed4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bf4:	f000 fa12 	bl	800201c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bf8:	f000 faae 	bl	8002158 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001bfc:	f000 fb4c 	bl	8002298 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001c00:	f000 fce4 	bl	80025cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c04:	f000 fd12 	bl	800262c <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8001c08:	f7ff ffb6 	bl	8001b78 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001c0c:	f7ff fb50 	bl	80012b0 <GAS_Scheduler_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(GPIOB, LED00_Pin);
	  //HAL_Delay(100);
	  GAS_Scheduler();
 8001c10:	f7ff fbde 	bl	80013d0 <GAS_Scheduler>
	  HAL_IWDG_Refresh(&hiwdg);
 8001c14:	4801      	ldr	r0, [pc, #4]	; (8001c1c <main+0x50>)
 8001c16:	f002 ffee 	bl	8004bf6 <HAL_IWDG_Refresh>
	  GAS_Scheduler();
 8001c1a:	e7f9      	b.n	8001c10 <main+0x44>
 8001c1c:	200002fc 	.word	0x200002fc

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b096      	sub	sp, #88	; 0x58
 8001c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2a:	2228      	movs	r2, #40	; 0x28
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f006 f8a4 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001c56:	230b      	movs	r3, #11
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c64:	2301      	movs	r3, #1
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 ffc7 	bl	8004c18 <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c90:	f000 f82c 	bl	8001cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c94:	230f      	movs	r3, #15
 8001c96:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	2102      	movs	r1, #2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 ffef 	bl	8005c94 <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001cbc:	f000 f816 	bl	8001cec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001cc0:	f241 0321 	movw	r3, #4129	; 0x1021
 8001cc4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 fa45 	bl	8006164 <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ce0:	f000 f804 	bl	8001cec <Error_Handler>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3758      	adds	r7, #88	; 0x58
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_MspInit+0x44>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_MspInit+0x44>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_MspInit+0x44>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_MspInit+0x44>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_MspInit+0x44>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_MspInit+0x44>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 fd64 	bl	8002858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001d90:	f7ff fad0 	bl	8001334 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <DMA1_Channel1_IRQHandler+0x10>)
 8001d9e:	f002 fb20 	bl	80043e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200001fc 	.word	0x200001fc

08001dac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA1_Channel2_IRQHandler+0x10>)
 8001db2:	f002 fb16 	bl	80043e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000240 	.word	0x20000240

08001dc0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <CAN_RX0_IRQHandler+0x10>)
 8001dc6:	f001 ff1c 	bl	8003c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000288 	.word	0x20000288

08001dd4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <CAN_RX1_IRQHandler+0x10>)
 8001dda:	f001 ff12 	bl	8003c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000288 	.word	0x20000288

08001de8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	HAL_GPIO_TogglePin(LED02_GPIO_Port, LED02_Pin);
 8001dec:	2120      	movs	r1, #32
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001df0:	f002 fd72 	bl	80048d8 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8001df6:	f004 fdbf 	bl	8006978 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001dfc:	f004 fdbc 	bl	8006978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	48000400 	.word	0x48000400
 8001e08:	20000310 	.word	0x20000310
 8001e0c:	200003f4 	.word	0x200003f4

08001e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM2_IRQHandler+0x10>)
 8001e16:	f004 fdaf 	bl	8006978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000035c 	.word	0x2000035c

08001e24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <TIM3_IRQHandler+0x18>)
 8001e2e:	f002 fd53 	bl	80048d8 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e32:	4803      	ldr	r0, [pc, #12]	; (8001e40 <TIM3_IRQHandler+0x1c>)
 8001e34:	f004 fda0 	bl	8006978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	48000800 	.word	0x48000800
 8001e40:	200003a8 	.word	0x200003a8

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f005 ff50 	bl	8007d18 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20003000 	.word	0x20003000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	2000030c 	.word	0x2000030c
 8001eac:	20000560 	.word	0x20000560

08001eb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b090      	sub	sp, #64	; 0x40
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f12:	4a41      	ldr	r2, [pc, #260]	; (8002018 <MX_TIM1_Init+0x144>)
 8001f14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f3c:	4835      	ldr	r0, [pc, #212]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f3e:	f004 fa47 	bl	80063d0 <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f48:	f7ff fed0 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f56:	4619      	mov	r1, r3
 8001f58:	482e      	ldr	r0, [pc, #184]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f5a:	f004 fec8 	bl	8006cee <HAL_TIM_ConfigClockSource>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f64:	f7ff fec2 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f68:	482a      	ldr	r0, [pc, #168]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f6a:	f004 fa88 	bl	800647e <HAL_TIM_IC_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001f74:	f7ff feba 	bl	8001cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f7c:	2350      	movs	r3, #80	; 0x50
 8001f7e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	4820      	ldr	r0, [pc, #128]	; (8002014 <MX_TIM1_Init+0x140>)
 8001f94:	f004 ff74 	bl	8006e80 <HAL_TIM_SlaveConfigSynchro>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001f9e:	f7ff fea5 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4816      	ldr	r0, [pc, #88]	; (8002014 <MX_TIM1_Init+0x140>)
 8001fbc:	f004 fdfb 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001fc6:	f7ff fe91 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480e      	ldr	r0, [pc, #56]	; (8002014 <MX_TIM1_Init+0x140>)
 8001fdc:	f004 fdeb 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001fe6:	f7ff fe81 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <MX_TIM1_Init+0x140>)
 8001ffc:	f005 facc 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8002006:	f7ff fe71 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3740      	adds	r7, #64	; 0x40
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000310 	.word	0x20000310
 8002018:	40012c00 	.word	0x40012c00

0800201c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	; 0x40
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204e:	463b      	mov	r3, r7
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002058:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <MX_TIM2_Init+0x138>)
 800205a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8002060:	4b3c      	ldr	r3, [pc, #240]	; (8002154 <MX_TIM2_Init+0x138>)
 8002062:	2247      	movs	r2, #71	; 0x47
 8002064:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <MX_TIM2_Init+0x138>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <MX_TIM2_Init+0x138>)
 800206e:	f04f 32ff 	mov.w	r2, #4294967295
 8002072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b37      	ldr	r3, [pc, #220]	; (8002154 <MX_TIM2_Init+0x138>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <MX_TIM2_Init+0x138>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002080:	4834      	ldr	r0, [pc, #208]	; (8002154 <MX_TIM2_Init+0x138>)
 8002082:	f004 f9a5 	bl	80063d0 <HAL_TIM_Base_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800208c:	f7ff fe2e 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800209a:	4619      	mov	r1, r3
 800209c:	482d      	ldr	r0, [pc, #180]	; (8002154 <MX_TIM2_Init+0x138>)
 800209e:	f004 fe26 	bl	8006cee <HAL_TIM_ConfigClockSource>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80020a8:	f7ff fe20 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020ac:	4829      	ldr	r0, [pc, #164]	; (8002154 <MX_TIM2_Init+0x138>)
 80020ae:	f004 f9e6 	bl	800647e <HAL_TIM_IC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80020b8:	f7ff fe18 	bl	8001cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80020bc:	2304      	movs	r3, #4
 80020be:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80020c0:	2350      	movs	r3, #80	; 0x50
 80020c2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	481f      	ldr	r0, [pc, #124]	; (8002154 <MX_TIM2_Init+0x138>)
 80020d8:	f004 fed2 	bl	8006e80 <HAL_TIM_SlaveConfigSynchro>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80020e2:	f7ff fe03 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ea:	2301      	movs	r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	4815      	ldr	r0, [pc, #84]	; (8002154 <MX_TIM2_Init+0x138>)
 8002100:	f004 fd59 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800210a:	f7ff fdef 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800210e:	2302      	movs	r3, #2
 8002110:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002112:	2302      	movs	r3, #2
 8002114:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	2204      	movs	r2, #4
 800211c:	4619      	mov	r1, r3
 800211e:	480d      	ldr	r0, [pc, #52]	; (8002154 <MX_TIM2_Init+0x138>)
 8002120:	f004 fd49 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 800212a:	f7ff fddf 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002136:	463b      	mov	r3, r7
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <MX_TIM2_Init+0x138>)
 800213c:	f005 fa2c 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8002146:	f7ff fdd1 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	3740      	adds	r7, #64	; 0x40
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000035c 	.word	0x2000035c

08002158 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b090      	sub	sp, #64	; 0x40
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	463b      	mov	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <MX_TIM3_Init+0x138>)
 8002196:	4a3f      	ldr	r2, [pc, #252]	; (8002294 <MX_TIM3_Init+0x13c>)
 8002198:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 288 - 1;
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <MX_TIM3_Init+0x138>)
 800219c:	f240 121f 	movw	r2, #287	; 0x11f
 80021a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <MX_TIM3_Init+0x138>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <MX_TIM3_Init+0x138>)
 80021aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <MX_TIM3_Init+0x138>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <MX_TIM3_Init+0x138>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021bc:	4834      	ldr	r0, [pc, #208]	; (8002290 <MX_TIM3_Init+0x138>)
 80021be:	f004 f907 	bl	80063d0 <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80021c8:	f7ff fd90 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d6:	4619      	mov	r1, r3
 80021d8:	482d      	ldr	r0, [pc, #180]	; (8002290 <MX_TIM3_Init+0x138>)
 80021da:	f004 fd88 	bl	8006cee <HAL_TIM_ConfigClockSource>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80021e4:	f7ff fd82 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80021e8:	4829      	ldr	r0, [pc, #164]	; (8002290 <MX_TIM3_Init+0x138>)
 80021ea:	f004 f948 	bl	800647e <HAL_TIM_IC_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80021f4:	f7ff fd7a 	bl	8001cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021f8:	2304      	movs	r3, #4
 80021fa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80021fc:	2350      	movs	r3, #80	; 0x50
 80021fe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002204:	2300      	movs	r3, #0
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM3_Init+0x138>)
 8002214:	f004 fe34 	bl	8006e80 <HAL_TIM_SlaveConfigSynchro>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800221e:	f7ff fd65 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002226:	2301      	movs	r3, #1
 8002228:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	2200      	movs	r2, #0
 8002238:	4619      	mov	r1, r3
 800223a:	4815      	ldr	r0, [pc, #84]	; (8002290 <MX_TIM3_Init+0x138>)
 800223c:	f004 fcbb 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8002246:	f7ff fd51 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800224a:	2302      	movs	r3, #2
 800224c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	2204      	movs	r2, #4
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_TIM3_Init+0x138>)
 800225c:	f004 fcab 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8002266:	f7ff fd41 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002272:	463b      	mov	r3, r7
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <MX_TIM3_Init+0x138>)
 8002278:	f005 f98e 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8002282:	f7ff fd33 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	3740      	adds	r7, #64	; 0x40
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200003a8 	.word	0x200003a8
 8002294:	40000400 	.word	0x40000400

08002298 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b090      	sub	sp, #64	; 0x40
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ca:	463b      	mov	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022d4:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022d6:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <MX_TIM15_Init+0x140>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 288-1;
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022dc:	f240 121f 	movw	r2, #287	; 0x11f
 80022e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002302:	4834      	ldr	r0, [pc, #208]	; (80023d4 <MX_TIM15_Init+0x13c>)
 8002304:	f004 f864 	bl	80063d0 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 800230e:	f7ff fced 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231c:	4619      	mov	r1, r3
 800231e:	482d      	ldr	r0, [pc, #180]	; (80023d4 <MX_TIM15_Init+0x13c>)
 8002320:	f004 fce5 	bl	8006cee <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800232a:	f7ff fcdf 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <MX_TIM15_Init+0x13c>)
 8002330:	f004 f8a5 	bl	800647e <HAL_TIM_IC_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800233a:	f7ff fcd7 	bl	8001cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800233e:	2304      	movs	r3, #4
 8002340:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002342:	2350      	movs	r3, #80	; 0x50
 8002344:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	481e      	ldr	r0, [pc, #120]	; (80023d4 <MX_TIM15_Init+0x13c>)
 800235a:	f004 fd91 	bl	8006e80 <HAL_TIM_SlaveConfigSynchro>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8002364:	f7ff fcc2 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800236c:	2301      	movs	r3, #1
 800236e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	4619      	mov	r1, r3
 8002380:	4814      	ldr	r0, [pc, #80]	; (80023d4 <MX_TIM15_Init+0x13c>)
 8002382:	f004 fc18 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800238c:	f7ff fcae 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002390:	2302      	movs	r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002394:	2302      	movs	r3, #2
 8002396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2204      	movs	r2, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80023a2:	f004 fc08 	bl	8006bb6 <HAL_TIM_IC_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 80023ac:	f7ff fc9e 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_TIM15_Init+0x13c>)
 80023be:	f005 f8eb 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 80023c8:	f7ff fc90 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	3740      	adds	r7, #64	; 0x40
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200003f4 	.word	0x200003f4
 80023d8:	40014000 	.word	0x40014000

080023dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b090      	sub	sp, #64	; 0x40
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_TIM_Base_MspInit+0x1d8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d132      	bne.n	8002464 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023fe:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	4a6d      	ldr	r2, [pc, #436]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002408:	6193      	str	r3, [r2, #24]
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	6153      	str	r3, [r2, #20]
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800242e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002440:	2306      	movs	r3, #6
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002448:	4619      	mov	r1, r3
 800244a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244e:	f002 f8b9 	bl	80045c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	2018      	movs	r0, #24
 8002458:	f001 fee7 	bl	800422a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800245c:	2018      	movs	r0, #24
 800245e:	f001 ff00 	bl	8004262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002462:	e0a3      	b.n	80025ac <HAL_TIM_Base_MspInit+0x1d0>
  else if(tim_baseHandle->Instance==TIM2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246c:	d132      	bne.n	80024d4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246e:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	6153      	str	r3, [r2, #20]
 8002492:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800249e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b0:	2301      	movs	r3, #1
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024be:	f002 f881 	bl	80045c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	201c      	movs	r0, #28
 80024c8:	f001 feaf 	bl	800422a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024cc:	201c      	movs	r0, #28
 80024ce:	f001 fec8 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 80024d2:	e06b      	b.n	80025ac <HAL_TIM_Base_MspInit+0x1d0>
  else if(tim_baseHandle->Instance==TIM3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a38      	ldr	r2, [pc, #224]	; (80025bc <HAL_TIM_Base_MspInit+0x1e0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d130      	bne.n	8002540 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a35      	ldr	r2, [pc, #212]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	61d3      	str	r3, [r2, #28]
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 80024fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002500:	6153      	str	r3, [r2, #20]
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251e:	2302      	movs	r3, #2
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002526:	4619      	mov	r1, r3
 8002528:	4825      	ldr	r0, [pc, #148]	; (80025c0 <HAL_TIM_Base_MspInit+0x1e4>)
 800252a:	f002 f84b 	bl	80045c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	201d      	movs	r0, #29
 8002534:	f001 fe79 	bl	800422a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002538:	201d      	movs	r0, #29
 800253a:	f001 fe92 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 800253e:	e035      	b.n	80025ac <HAL_TIM_Base_MspInit+0x1d0>
  else if(tim_baseHandle->Instance==TIM15)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_TIM_Base_MspInit+0x1e8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d130      	bne.n	80025ac <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6153      	str	r3, [r2, #20]
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800257a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800258c:	2301      	movs	r3, #1
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	480c      	ldr	r0, [pc, #48]	; (80025c8 <HAL_TIM_Base_MspInit+0x1ec>)
 8002598:	f002 f814 	bl	80045c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2018      	movs	r0, #24
 80025a2:	f001 fe42 	bl	800422a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80025a6:	2018      	movs	r0, #24
 80025a8:	f001 fe5b 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 80025ac:	bf00      	nop
 80025ae:	3740      	adds	r7, #64	; 0x40
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40000400 	.word	0x40000400
 80025c0:	48000800 	.word	0x48000800
 80025c4:	40014000 	.word	0x40014000
 80025c8:	48000400 	.word	0x48000400

080025cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <MX_USART1_UART_Init+0x5c>)
 80025d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80025dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025f2:	220c      	movs	r2, #12
 80025f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_USART1_UART_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_USART1_UART_Init+0x58>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_USART1_UART_Init+0x58>)
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_USART1_UART_Init+0x58>)
 8002610:	f005 f84e 	bl	80076b0 <HAL_UART_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800261a:	f7ff fb67 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000440 	.word	0x20000440
 8002628:	40013800 	.word	0x40013800

0800262c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002632:	4a15      	ldr	r2, [pc, #84]	; (8002688 <MX_USART3_UART_Init+0x5c>)
 8002634:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002638:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800263c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <MX_USART3_UART_Init+0x58>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002652:	220c      	movs	r2, #12
 8002654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_USART3_UART_Init+0x58>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_USART3_UART_Init+0x58>)
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_USART3_UART_Init+0x58>)
 8002670:	f005 f81e 	bl	80076b0 <HAL_UART_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800267a:	f7ff fb37 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200004c4 	.word	0x200004c4
 8002688:	40004800 	.word	0x40004800

0800268c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <HAL_UART_MspInit+0xdc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12a      	bne.n	8002704 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_UART_MspInit+0xe0>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	4a2e      	ldr	r2, [pc, #184]	; (800276c <HAL_UART_MspInit+0xe0>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6193      	str	r3, [r2, #24]
 80026ba:	4b2c      	ldr	r3, [pc, #176]	; (800276c <HAL_UART_MspInit+0xe0>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_UART_MspInit+0xe0>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_UART_MspInit+0xe0>)
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	6153      	str	r3, [r2, #20]
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_UART_MspInit+0xe0>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f0:	2307      	movs	r3, #7
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fe:	f001 ff61 	bl	80045c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002702:	e02d      	b.n	8002760 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_UART_MspInit+0xe4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d128      	bne.n	8002760 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_UART_MspInit+0xe0>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_UART_MspInit+0xe0>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_UART_MspInit+0xe0>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_UART_MspInit+0xe0>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_UART_MspInit+0xe0>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6153      	str	r3, [r2, #20]
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_UART_MspInit+0xe0>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800273e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002750:	2307      	movs	r3, #7
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <HAL_UART_MspInit+0xe8>)
 800275c:	f001 ff32 	bl	80045c4 <HAL_GPIO_Init>
}
 8002760:	bf00      	nop
 8002762:	3730      	adds	r7, #48	; 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40013800 	.word	0x40013800
 800276c:	40021000 	.word	0x40021000
 8002770:	40004800 	.word	0x40004800
 8002774:	48000400 	.word	0x48000400

08002778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800277c:	480d      	ldr	r0, [pc, #52]	; (80027b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800277e:	490e      	ldr	r1, [pc, #56]	; (80027b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <LoopForever+0xe>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002794:	4c0b      	ldr	r4, [pc, #44]	; (80027c4 <LoopForever+0x16>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027a2:	f7ff fb85 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a6:	f005 fabd 	bl	8007d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027aa:	f7ff fa0f 	bl	8001bcc <main>

080027ae <LoopForever>:

LoopForever:
    b LoopForever
 80027ae:	e7fe      	b.n	80027ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80027b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80027bc:	08007f58 	.word	0x08007f58
  ldr r2, =_sbss
 80027c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80027c4:	2000055c 	.word	0x2000055c

080027c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC1_2_IRQHandler>
	...

080027cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_Init+0x28>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_Init+0x28>)
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f001 fd19 	bl	8004214 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e2:	200f      	movs	r0, #15
 80027e4:	f000 f808 	bl	80027f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e8:	f7ff fa86 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000

080027f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_InitTick+0x54>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_InitTick+0x58>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f001 fd31 	bl	800427e <HAL_SYSTICK_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e00e      	b.n	8002844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b0f      	cmp	r3, #15
 800282a:	d80a      	bhi.n	8002842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800282c:	2200      	movs	r2, #0
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f001 fcf9 	bl	800422a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002838:	4a06      	ldr	r2, [pc, #24]	; (8002854 <HAL_InitTick+0x5c>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000000c 	.word	0x2000000c
 8002850:	20000014 	.word	0x20000014
 8002854:	20000010 	.word	0x20000010

08002858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_IncTick+0x20>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x24>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4413      	add	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_IncTick+0x24>)
 800286a:	6013      	str	r3, [r2, #0]
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000014 	.word	0x20000014
 800287c:	20000548 	.word	0x20000548

08002880 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTick;  
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_GetTick+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000548 	.word	0x20000548

08002898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09a      	sub	sp, #104	; 0x68
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e172      	b.n	8002bda <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d176      	bne.n	80029f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d152      	bne.n	80029b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fe fea1 	bl	8001670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13b      	bne.n	80029b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fe85 	bl	800364c <ADC_Disable>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d12f      	bne.n	80029b4 <HAL_ADC_Init+0xe0>
 8002954:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12b      	bne.n	80029b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002964:	f023 0302 	bic.w	r3, r3, #2
 8002968:	f043 0202 	orr.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800297e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800298e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002990:	4b94      	ldr	r3, [pc, #592]	; (8002be4 <HAL_ADC_Init+0x310>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a94      	ldr	r2, [pc, #592]	; (8002be8 <HAL_ADC_Init+0x314>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0c9a      	lsrs	r2, r3, #18
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a6:	e002      	b.n	80029ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d0:	d110      	bne.n	80029f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f023 0312 	bic.w	r3, r3, #18
 80029da:	f043 0210 	orr.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 80df 	bne.w	8002bc0 <HAL_ADC_Init+0x2ec>
 8002a02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 80da 	bne.w	8002bc0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80d2 	bne.w	8002bc0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a24:	f043 0202 	orr.w	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_ADC_Init+0x318>)
 8002a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a38:	d102      	bne.n	8002a40 <HAL_ADC_Init+0x16c>
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_ADC_Init+0x31c>)
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_Init+0x172>
 8002a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a44:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_ADC_Init+0x192>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x192>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_Init+0x194>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d11c      	bne.n	8002aa6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_ADC_Init+0x1ba>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_Init+0x1ba>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_ADC_Init+0x1bc>
 8002a8e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7e5b      	ldrb	r3, [r3, #25]
 8002aaa:	035b      	lsls	r3, r3, #13
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ab0:	2a01      	cmp	r2, #1
 8002ab2:	d002      	beq.n	8002aba <HAL_ADC_Init+0x1e6>
 8002ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_Init+0x1e8>
 8002aba:	2200      	movs	r2, #0
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002acc:	4313      	orrs	r3, r2
 8002ace:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d11b      	bne.n	8002b12 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7e5b      	ldrb	r3, [r3, #25]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	045a      	lsls	r2, r3, #17
 8002aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
 8002af4:	e00d      	b.n	8002b12 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d007      	beq.n	8002b2a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	4313      	orrs	r3, r2
 8002b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b26:	4313      	orrs	r3, r2
 8002b28:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d114      	bne.n	8002b62 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b46:	f023 0302 	bic.w	r3, r3, #2
 8002b4a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e1b      	ldrb	r3, [r3, #24]
 8002b50:	039a      	lsls	r2, r3, #14
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_ADC_Init+0x320>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b72:	430b      	orrs	r3, r1
 8002b74:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10c      	bne.n	8002b98 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	f023 010f 	bic.w	r1, r3, #15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
 8002b96:	e007      	b.n	8002ba8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020f 	bic.w	r2, r2, #15
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bbe:	e00a      	b.n	8002bd6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f023 0312 	bic.w	r3, r3, #18
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3768      	adds	r7, #104	; 0x68
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000000c 	.word	0x2000000c
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	50000300 	.word	0x50000300
 8002bf0:	50000100 	.word	0x50000100
 8002bf4:	fff0c007 	.word	0xfff0c007

08002bf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 80b9 	bne.w	8002d8a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Start_DMA+0x2e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0b4      	b.n	8002d90 <HAL_ADC_Start_DMA+0x198>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002c2e:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <HAL_ADC_Start_DMA+0x1a0>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80a0 	bne.w	8002d7c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fca1 	bl	8003584 <ADC_Enable>
 8002c42:	4603      	mov	r3, r0
 8002c44:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 8092 	bne.w	8002d72 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c62:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_ADC_Start_DMA+0x1a0>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADC_Start_DMA+0x80>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c76:	d115      	bne.n	8002ca4 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d027      	beq.n	8002ce2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ca2:	e01e      	b.n	8002ce2 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb8:	d004      	beq.n	8002cc4 <HAL_ADC_Start_DMA+0xcc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a37      	ldr	r2, [pc, #220]	; (8002d9c <HAL_ADC_Start_DMA+0x1a4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0xea>
 8002cc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cee:	d106      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f023 0206 	bic.w	r2, r3, #6
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <HAL_ADC_Start_DMA+0x1a8>)
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	4a22      	ldr	r2, [pc, #136]	; (8002da4 <HAL_ADC_Start_DMA+0x1ac>)
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <HAL_ADC_Start_DMA+0x1b0>)
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	221c      	movs	r2, #28
 8002d2a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0210 	orr.w	r2, r2, #16
 8002d3a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3340      	adds	r3, #64	; 0x40
 8002d56:	4619      	mov	r1, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f001 fae2 	bl	8004324 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0204 	orr.w	r2, r2, #4
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e00d      	b.n	8002d8e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d7a:	e008      	b.n	8002d8e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d88:	e001      	b.n	8002d8e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	50000300 	.word	0x50000300
 8002d9c:	50000100 	.word	0x50000100
 8002da0:	080034b9 	.word	0x080034b9
 8002da4:	08003533 	.word	0x08003533
 8002da8:	0800354f 	.word	0x0800354f

08002dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b09b      	sub	sp, #108	; 0x6c
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x22>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e2a4      	b.n	8003318 <HAL_ADC_ConfigChannel+0x56c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 8288 	bne.w	80032f6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d81c      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	461a      	mov	r2, r3
 8002e02:	231f      	movs	r3, #31
 8002e04:	4093      	lsls	r3, r2
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
 8002e26:	e063      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d81e      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	4019      	ands	r1, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	3b1e      	subs	r3, #30
 8002e60:	fa00 f203 	lsl.w	r2, r0, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6c:	e040      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b0e      	cmp	r3, #14
 8002e74:	d81e      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	3b3c      	subs	r3, #60	; 0x3c
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4019      	ands	r1, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	3b3c      	subs	r3, #60	; 0x3c
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb2:	e01d      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	3b5a      	subs	r3, #90	; 0x5a
 8002ec8:	221f      	movs	r2, #31
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	4019      	ands	r1, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	3b5a      	subs	r3, #90	; 0x5a
 8002ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80e5 	bne.w	80030ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d91c      	bls.n	8002f42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4019      	ands	r1, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6898      	ldr	r0, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	3b1e      	subs	r3, #30
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	e019      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6959      	ldr	r1, [r3, #20]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	2207      	movs	r2, #7
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4019      	ands	r1, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6898      	ldr	r0, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	08db      	lsrs	r3, r3, #3
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d84f      	bhi.n	8003038 <HAL_ADC_ConfigChannel+0x28c>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08003017 	.word	0x08003017
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fb6:	4b94      	ldr	r3, [pc, #592]	; (8003208 <HAL_ADC_ConfigChannel+0x45c>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	0691      	lsls	r1, r2, #26
 8002fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fd0:	e07e      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd8:	4b8b      	ldr	r3, [pc, #556]	; (8003208 <HAL_ADC_ConfigChannel+0x45c>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	0691      	lsls	r1, r2, #26
 8002fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ff0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ff2:	e06d      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ffa:	4b83      	ldr	r3, [pc, #524]	; (8003208 <HAL_ADC_ConfigChannel+0x45c>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	0691      	lsls	r1, r2, #26
 8003004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003006:	430a      	orrs	r2, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003012:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003014:	e05c      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800301c:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <HAL_ADC_ConfigChannel+0x45c>)
 800301e:	4013      	ands	r3, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	0691      	lsls	r1, r2, #26
 8003026:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003028:	430a      	orrs	r2, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003034:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003036:	e04b      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800305a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800307e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d10a      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80030c8:	e001      	b.n	80030ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80030ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x344>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x344>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x346>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 810a 	bne.w	800330c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00f      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800311e:	e049      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b09      	cmp	r3, #9
 8003140:	d91c      	bls.n	800317c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	3b1b      	subs	r3, #27
 8003154:	2207      	movs	r2, #7
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	4019      	ands	r1, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6898      	ldr	r0, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1b      	subs	r3, #27
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e01b      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6959      	ldr	r1, [r3, #20]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4019      	ands	r1, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6898      	ldr	r0, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_ADC_ConfigChannel+0x460>)
 80031b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d105      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031d0:	2b11      	cmp	r3, #17
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031e4:	2b12      	cmp	r3, #18
 80031e6:	f040 8091 	bne.w	800330c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 808a 	bne.w	800330c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003200:	d108      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x468>
 8003202:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_ADC_ConfigChannel+0x464>)
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e008      	b.n	800321a <HAL_ADC_ConfigChannel+0x46e>
 8003208:	83fff000 	.word	0x83fff000
 800320c:	50000300 	.word	0x50000300
 8003210:	50000100 	.word	0x50000100
 8003214:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003218:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_ADC_ConfigChannel+0x48e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x48e>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_ADC_ConfigChannel+0x490>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d150      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003240:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x4b6>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x4b6>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_ADC_ConfigChannel+0x4b8>
 8003262:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003264:	2b00      	cmp	r3, #0
 8003266:	d13c      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b10      	cmp	r3, #16
 800326e:	d11d      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x500>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003278:	d118      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800327a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003284:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_ADC_ConfigChannel+0x578>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_ADC_ConfigChannel+0x57c>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	0c9a      	lsrs	r2, r3, #18
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800329c:	e002      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f9      	bne.n	800329e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032aa:	e02e      	b.n	800330a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b11      	cmp	r3, #17
 80032b2:	d10b      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x520>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032bc:	d106      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80032be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80032c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032ca:	e01e      	b.n	800330a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b12      	cmp	r3, #18
 80032d2:	d11a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80032d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032e0:	e013      	b.n	800330a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032f4:	e00a      	b.n	800330c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003308:	e000      	b.n	800330c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800330a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003318:	4618      	mov	r0, r3
 800331a:	376c      	adds	r7, #108	; 0x6c
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	2000000c 	.word	0x2000000c
 8003328:	431bde83 	.word	0x431bde83

0800332c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800332c:	b480      	push	{r7}
 800332e:	b099      	sub	sp, #100	; 0x64
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003344:	d102      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003346:	4b5a      	ldr	r3, [pc, #360]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	e002      	b.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800334c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003350:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0a2      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003366:	2302      	movs	r3, #2
 8003368:	e09b      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d17f      	bne.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d179      	bne.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338c:	4b49      	ldr	r3, [pc, #292]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800338e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d040      	beq.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033aa:	035b      	lsls	r3, r3, #13
 80033ac:	430b      	orrs	r3, r1
 80033ae:	431a      	orrs	r2, r3
 80033b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d108      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d15c      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80033f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d14b      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80033fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003404:	f023 030f 	bic.w	r3, r3, #15
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	6892      	ldr	r2, [r2, #8]
 8003410:	430a      	orrs	r2, r1
 8003412:	431a      	orrs	r2, r3
 8003414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003416:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003418:	e03c      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800341a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003424:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d108      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d123      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003468:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800346a:	2b00      	cmp	r3, #0
 800346c:	d112      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003476:	f023 030f 	bic.w	r3, r3, #15
 800347a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800347c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800347e:	e009      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003492:	e000      	b.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800349e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80034a2:	4618      	mov	r0, r3
 80034a4:	3764      	adds	r7, #100	; 0x64
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	50000100 	.word	0x50000100
 80034b4:	50000300 	.word	0x50000300

080034b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d126      	bne.n	8003520 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d115      	bne.n	8003518 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d111      	bne.n	8003518 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff f9bd 	bl	8002898 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800351e:	e004      	b.n	800352a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff f9b3 	bl	80028ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f043 0204 	orr.w	r2, r3, #4
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff f9a3 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d108      	bne.n	80035b0 <ADC_Enable+0x2c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <ADC_Enable+0x2c>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <ADC_Enable+0x2e>
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d143      	bne.n	800363e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	4b22      	ldr	r3, [pc, #136]	; (8003648 <ADC_Enable+0xc4>)
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e02f      	b.n	8003640 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80035f0:	f7ff f946 	bl	8002880 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035f6:	e01b      	b.n	8003630 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f8:	f7ff f942 	bl	8002880 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d914      	bls.n	8003630 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d00d      	beq.n	8003630 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f043 0210 	orr.w	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d1dc      	bne.n	80035f8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	8000003f 	.word	0x8000003f

0800364c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <ADC_Disable+0x2c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <ADC_Disable+0x2c>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <ADC_Disable+0x2e>
 8003678:	2300      	movs	r3, #0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d047      	beq.n	800370e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030d 	and.w	r3, r3, #13
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10f      	bne.n	80036ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0202 	orr.w	r2, r2, #2
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2203      	movs	r2, #3
 80036a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80036a4:	f7ff f8ec 	bl	8002880 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036aa:	e029      	b.n	8003700 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0210 	orr.w	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e023      	b.n	8003710 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036c8:	f7ff f8da 	bl	8002880 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d914      	bls.n	8003700 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10d      	bne.n	8003700 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d0dc      	beq.n	80036c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0ed      	b.n	8003906 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe f8a6 	bl	8001888 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800374c:	f7ff f898 	bl	8002880 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003752:	e012      	b.n	800377a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003754:	f7ff f894 	bl	8002880 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b0a      	cmp	r3, #10
 8003760:	d90b      	bls.n	800377a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2205      	movs	r2, #5
 8003772:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0c5      	b.n	8003906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0e5      	beq.n	8003754 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0202 	bic.w	r2, r2, #2
 8003796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7ff f872 	bl	8002880 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800379e:	e012      	b.n	80037c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037a0:	f7ff f86e 	bl	8002880 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b0a      	cmp	r3, #10
 80037ac:	d90b      	bls.n	80037c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2205      	movs	r2, #5
 80037be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e09f      	b.n	8003906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7e1b      	ldrb	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d108      	bne.n	80037ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e007      	b.n	80037fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7e5b      	ldrb	r3, [r3, #25]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d108      	bne.n	8003818 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e007      	b.n	8003828 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7e9b      	ldrb	r3, [r3, #26]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d108      	bne.n	8003842 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0220 	orr.w	r2, r2, #32
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e007      	b.n	8003852 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0220 	bic.w	r2, r2, #32
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7edb      	ldrb	r3, [r3, #27]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0210 	bic.w	r2, r2, #16
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e007      	b.n	800387c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0210 	orr.w	r2, r2, #16
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7f1b      	ldrb	r3, [r3, #28]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d108      	bne.n	8003896 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e007      	b.n	80038a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7f5b      	ldrb	r3, [r3, #29]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d108      	bne.n	80038c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0204 	orr.w	r2, r2, #4
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e007      	b.n	80038d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	ea42 0103 	orr.w	r1, r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d12e      	bne.n	8003980 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800393a:	f7fe ffa1 	bl	8002880 <HAL_GetTick>
 800393e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003940:	e012      	b.n	8003968 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003942:	f7fe ff9d 	bl	8002880 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b0a      	cmp	r3, #10
 800394e:	d90b      	bls.n	8003968 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2205      	movs	r2, #5
 8003960:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e012      	b.n	800398e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e5      	bne.n	8003942 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e006      	b.n	800398e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003996:	b480      	push	{r7}
 8003998:	b089      	sub	sp, #36	; 0x24
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d003      	beq.n	80039c2 <HAL_CAN_AddTxMessage+0x2c>
 80039ba:	7ffb      	ldrb	r3, [r7, #31]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	f040 80b8 	bne.w	8003b32 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a0 	beq.w	8003b22 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	0e1b      	lsrs	r3, r3, #24
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d907      	bls.n	8003a02 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e09e      	b.n	8003b40 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003a02:	2201      	movs	r2, #1
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	6809      	ldr	r1, [r1, #0]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3318      	adds	r3, #24
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	440b      	add	r3, r1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e00f      	b.n	8003a50 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a44:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3318      	adds	r3, #24
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	440b      	add	r3, r1
 8003a4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	440b      	add	r3, r1
 8003a60:	3304      	adds	r3, #4
 8003a62:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	7d1b      	ldrb	r3, [r3, #20]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d111      	bne.n	8003a90 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3318      	adds	r3, #24
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	3304      	adds	r3, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	6811      	ldr	r1, [r2, #0]
 8003a80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	3318      	adds	r3, #24
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3307      	adds	r3, #7
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	061a      	lsls	r2, r3, #24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3306      	adds	r3, #6
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	3204      	adds	r2, #4
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	ea43 0200 	orr.w	r2, r3, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003ac6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3303      	adds	r3, #3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	061a      	lsls	r2, r3, #24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3301      	adds	r3, #1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	4610      	mov	r0, r2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	6811      	ldr	r1, [r2, #0]
 8003aee:	ea43 0200 	orr.w	r2, r3, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	440b      	add	r3, r1
 8003af8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003afc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3318      	adds	r3, #24
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	6811      	ldr	r1, [r2, #0]
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3318      	adds	r3, #24
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	440b      	add	r3, r1
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e00e      	b.n	8003b40 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e006      	b.n	8003b40 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3724      	adds	r7, #36	; 0x24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b60:	7afb      	ldrb	r3, [r7, #11]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d002      	beq.n	8003b6c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11d      	bne.n	8003ba8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d002      	beq.n	8003bd4 <HAL_CAN_ActivateNotification+0x1e>
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d109      	bne.n	8003be8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6959      	ldr	r1, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e006      	b.n	8003bf6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d07c      	beq.n	8003d42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d023      	beq.n	8003c9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f983 	bl	8003f70 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c6a:	e016      	b.n	8003c9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e00c      	b.n	8003c9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	e002      	b.n	8003c9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f989 	bl	8003fac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d024      	beq.n	8003cee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f963 	bl	8003f84 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cbe:	e016      	b.n	8003cee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e00c      	b.n	8003cee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e002      	b.n	8003cee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f969 	bl	8003fc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d024      	beq.n	8003d42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f943 	bl	8003f98 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d12:	e016      	b.n	8003d42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	e00c      	b.n	8003d42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e002      	b.n	8003d42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f949 	bl	8003fd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00c      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2210      	movs	r2, #16
 8003d64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2208      	movs	r2, #8
 8003d80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f93a 	bl	8003ffc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f921 	bl	8003fe8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2208      	movs	r2, #8
 8003de4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f91c 	bl	8004024 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f903 	bl	8004010 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f906 	bl	8004038 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f8ff 	bl	800404c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d07b      	beq.n	8003f50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d072      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d043      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d03e      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ed0:	2b60      	cmp	r3, #96	; 0x60
 8003ed2:	d02b      	beq.n	8003f2c <HAL_CAN_IRQHandler+0x32a>
 8003ed4:	2b60      	cmp	r3, #96	; 0x60
 8003ed6:	d82e      	bhi.n	8003f36 <HAL_CAN_IRQHandler+0x334>
 8003ed8:	2b50      	cmp	r3, #80	; 0x50
 8003eda:	d022      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x320>
 8003edc:	2b50      	cmp	r3, #80	; 0x50
 8003ede:	d82a      	bhi.n	8003f36 <HAL_CAN_IRQHandler+0x334>
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d019      	beq.n	8003f18 <HAL_CAN_IRQHandler+0x316>
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d826      	bhi.n	8003f36 <HAL_CAN_IRQHandler+0x334>
 8003ee8:	2b30      	cmp	r3, #48	; 0x30
 8003eea:	d010      	beq.n	8003f0e <HAL_CAN_IRQHandler+0x30c>
 8003eec:	2b30      	cmp	r3, #48	; 0x30
 8003eee:	d822      	bhi.n	8003f36 <HAL_CAN_IRQHandler+0x334>
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d002      	beq.n	8003efa <HAL_CAN_IRQHandler+0x2f8>
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d005      	beq.n	8003f04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ef8:	e01d      	b.n	8003f36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f043 0308 	orr.w	r3, r3, #8
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f02:	e019      	b.n	8003f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f043 0310 	orr.w	r3, r3, #16
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f0c:	e014      	b.n	8003f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	f043 0320 	orr.w	r3, r3, #32
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f16:	e00f      	b.n	8003f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f20:	e00a      	b.n	8003f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f2a:	e005      	b.n	8003f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f34:	e000      	b.n	8003f38 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f87c 	bl	8004060 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <__NVIC_SetPriorityGrouping>:
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004090:	4013      	ands	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800409c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	60d3      	str	r3, [r2, #12]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <__NVIC_GetPriorityGrouping>:
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <__NVIC_GetPriorityGrouping+0x18>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 0307 	and.w	r3, r3, #7
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_EnableIRQ>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	db0b      	blt.n	8004102 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	4907      	ldr	r1, [pc, #28]	; (8004110 <__NVIC_EnableIRQ+0x38>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2001      	movs	r0, #1
 80040fa:	fa00 f202 	lsl.w	r2, r0, r2
 80040fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e100 	.word	0xe000e100

08004114 <__NVIC_SetPriority>:
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	6039      	str	r1, [r7, #0]
 800411e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004124:	2b00      	cmp	r3, #0
 8004126:	db0a      	blt.n	800413e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	490c      	ldr	r1, [pc, #48]	; (8004160 <__NVIC_SetPriority+0x4c>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	0112      	lsls	r2, r2, #4
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	440b      	add	r3, r1
 8004138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800413c:	e00a      	b.n	8004154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4908      	ldr	r1, [pc, #32]	; (8004164 <__NVIC_SetPriority+0x50>)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	3b04      	subs	r3, #4
 800414c:	0112      	lsls	r2, r2, #4
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	440b      	add	r3, r1
 8004152:	761a      	strb	r2, [r3, #24]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000e100 	.word	0xe000e100
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <NVIC_EncodePriority>:
{
 8004168:	b480      	push	{r7}
 800416a:	b089      	sub	sp, #36	; 0x24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	2b04      	cmp	r3, #4
 8004184:	bf28      	it	cs
 8004186:	2304      	movcs	r3, #4
 8004188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3304      	adds	r3, #4
 800418e:	2b06      	cmp	r3, #6
 8004190:	d902      	bls.n	8004198 <NVIC_EncodePriority+0x30>
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3b03      	subs	r3, #3
 8004196:	e000      	b.n	800419a <NVIC_EncodePriority+0x32>
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	f04f 32ff 	mov.w	r2, #4294967295
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	401a      	ands	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b0:	f04f 31ff 	mov.w	r1, #4294967295
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	43d9      	mvns	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c0:	4313      	orrs	r3, r2
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <SysTick_Config>:
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041e0:	d301      	bcc.n	80041e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80041e2:	2301      	movs	r3, #1
 80041e4:	e00f      	b.n	8004206 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <SysTick_Config+0x40>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ee:	210f      	movs	r1, #15
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	f7ff ff8e 	bl	8004114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <SysTick_Config+0x40>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <SysTick_Config+0x40>)
 8004200:	2207      	movs	r2, #7
 8004202:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	e000e010 	.word	0xe000e010

08004214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff29 	bl	8004074 <__NVIC_SetPriorityGrouping>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800423c:	f7ff ff3e 	bl	80040bc <__NVIC_GetPriorityGrouping>
 8004240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff ff8e 	bl	8004168 <NVIC_EncodePriority>
 800424c:	4602      	mov	r2, r0
 800424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff5d 	bl	8004114 <__NVIC_SetPriority>
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff31 	bl	80040d8 <__NVIC_EnableIRQ>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffa2 	bl	80041d0 <SysTick_Config>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e037      	b.n	800431c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f940 	bl	8004584 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}  
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_DMA_Start_IT+0x20>
 8004340:	2302      	movs	r3, #2
 8004342:	e04a      	b.n	80043da <HAL_DMA_Start_IT+0xb6>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004352:	2b01      	cmp	r3, #1
 8004354:	d13a      	bne.n	80043cc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f8d4 	bl	8004528 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 020e 	orr.w	r2, r2, #14
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e00f      	b.n	80043ba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 020a 	orr.w	r2, r2, #10
 80043a8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e005      	b.n	80043d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
 80043d6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2204      	movs	r2, #4
 8004400:	409a      	lsls	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d024      	beq.n	8004454 <HAL_DMA_IRQHandler+0x72>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01f      	beq.n	8004454 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2104      	movs	r1, #4
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d06a      	beq.n	8004520 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004452:	e065      	b.n	8004520 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2202      	movs	r2, #2
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02c      	beq.n	80044be <HAL_DMA_IRQHandler+0xdc>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d027      	beq.n	80044be <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 020a 	bic.w	r2, r2, #10
 800448a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	2102      	movs	r1, #2
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d035      	beq.n	8004520 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80044bc:	e030      	b.n	8004520 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2208      	movs	r2, #8
 80044c4:	409a      	lsls	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <HAL_DMA_IRQHandler+0x13e>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d023      	beq.n	8004520 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 020e 	bic.w	r2, r2, #14
 80044e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
    }
  }
}  
 800451e:	e7ff      	b.n	8004520 <HAL_DMA_IRQHandler+0x13e>
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2101      	movs	r1, #1
 8004540:	fa01 f202 	lsl.w	r2, r1, r2
 8004544:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b10      	cmp	r3, #16
 8004554:	d108      	bne.n	8004568 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004566:	e007      	b.n	8004578 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <DMA_CalcBaseAndBitshift+0x34>)
 8004594:	4413      	add	r3, r2
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <DMA_CalcBaseAndBitshift+0x38>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	009a      	lsls	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <DMA_CalcBaseAndBitshift+0x3c>)
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	bffdfff8 	.word	0xbffdfff8
 80045bc:	cccccccd 	.word	0xcccccccd
 80045c0:	40020000 	.word	0x40020000

080045c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	e14e      	b.n	8004872 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8140 	beq.w	800486c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d005      	beq.n	8004604 <HAL_GPIO_Init+0x40>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d130      	bne.n	8004666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800463a:	2201      	movs	r2, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0201 	and.w	r2, r3, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b03      	cmp	r3, #3
 8004670:	d017      	beq.n	80046a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d123      	bne.n	80046f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	08da      	lsrs	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3208      	adds	r2, #8
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	08da      	lsrs	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3208      	adds	r2, #8
 80046f0:	6939      	ldr	r1, [r7, #16]
 80046f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	2203      	movs	r2, #3
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0203 	and.w	r2, r3, #3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 809a 	beq.w	800486c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004738:	4b55      	ldr	r3, [pc, #340]	; (8004890 <HAL_GPIO_Init+0x2cc>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	4a54      	ldr	r2, [pc, #336]	; (8004890 <HAL_GPIO_Init+0x2cc>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6193      	str	r3, [r2, #24]
 8004744:	4b52      	ldr	r3, [pc, #328]	; (8004890 <HAL_GPIO_Init+0x2cc>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004750:	4a50      	ldr	r2, [pc, #320]	; (8004894 <HAL_GPIO_Init+0x2d0>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	3302      	adds	r3, #2
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	220f      	movs	r2, #15
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800477a:	d013      	beq.n	80047a4 <HAL_GPIO_Init+0x1e0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a46      	ldr	r2, [pc, #280]	; (8004898 <HAL_GPIO_Init+0x2d4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00d      	beq.n	80047a0 <HAL_GPIO_Init+0x1dc>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a45      	ldr	r2, [pc, #276]	; (800489c <HAL_GPIO_Init+0x2d8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <HAL_GPIO_Init+0x1d8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a44      	ldr	r2, [pc, #272]	; (80048a0 <HAL_GPIO_Init+0x2dc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_GPIO_Init+0x1d4>
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <HAL_GPIO_Init+0x1e2>
 8004798:	2305      	movs	r3, #5
 800479a:	e004      	b.n	80047a6 <HAL_GPIO_Init+0x1e2>
 800479c:	2302      	movs	r3, #2
 800479e:	e002      	b.n	80047a6 <HAL_GPIO_Init+0x1e2>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_GPIO_Init+0x1e2>
 80047a4:	2300      	movs	r3, #0
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	f002 0203 	and.w	r2, r2, #3
 80047ac:	0092      	lsls	r2, r2, #2
 80047ae:	4093      	lsls	r3, r2
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047b6:	4937      	ldr	r1, [pc, #220]	; (8004894 <HAL_GPIO_Init+0x2d0>)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	3302      	adds	r3, #2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047e8:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047ee:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004812:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004818:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	43db      	mvns	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004866:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <HAL_GPIO_Init+0x2e0>)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3301      	adds	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	f47f aea9 	bne.w	80045d4 <HAL_GPIO_Init+0x10>
  }
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40021000 	.word	0x40021000
 8004894:	40010000 	.word	0x40010000
 8004898:	48000400 	.word	0x48000400
 800489c:	48000800 	.word	0x48000800
 80048a0:	48000c00 	.word	0x48000c00
 80048a4:	40010400 	.word	0x40010400

080048a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
 80048b4:	4613      	mov	r3, r2
 80048b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b8:	787b      	ldrb	r3, [r7, #1]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048ea:	887a      	ldrh	r2, [r7, #2]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4013      	ands	r3, r2
 80048f0:	041a      	lsls	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	43d9      	mvns	r1, r3
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	400b      	ands	r3, r1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	619a      	str	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e081      	b.n	8004a22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd f8dc 	bl	8001af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2224      	movs	r2, #36	; 0x24
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800495c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800496c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	e006      	b.n	8004994 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004992:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d104      	bne.n	80049a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69d9      	ldr	r1, [r3, #28]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d138      	bne.n	8004ab2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e032      	b.n	8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2224      	movs	r2, #36	; 0x24
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d139      	bne.n	8004b4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e033      	b.n	8004b4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e041      	b.n	8004bee <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004b72:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f245 5255 	movw	r2, #21845	; 0x5555
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6852      	ldr	r2, [r2, #4]
 8004b86:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6892      	ldr	r2, [r2, #8]
 8004b90:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004b92:	f7fd fe75 	bl	8002880 <HAL_GetTick>
 8004b96:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b98:	e00f      	b.n	8004bba <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004b9a:	f7fd fe71 	bl	8002880 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b27      	cmp	r3, #39	; 0x27
 8004ba6:	d908      	bls.n	8004bba <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e019      	b.n	8004bee <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e8      	bne.n	8004b9a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d005      	beq.n	8004be2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68d2      	ldr	r2, [r2, #12]
 8004bde:	611a      	str	r2, [r3, #16]
 8004be0:	e004      	b.n	8004bec <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004c06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f001 b823 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 817d 	beq.w	8004f4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c54:	4bbc      	ldr	r3, [pc, #752]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d00c      	beq.n	8004c7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c60:	4bb9      	ldr	r3, [pc, #740]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d15c      	bne.n	8004d26 <HAL_RCC_OscConfig+0x10e>
 8004c6c:	4bb6      	ldr	r3, [pc, #728]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d155      	bne.n	8004d26 <HAL_RCC_OscConfig+0x10e>
 8004c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004c86:	fa93 f3a3 	rbit	r3, r3
 8004c8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d102      	bne.n	8004cac <HAL_RCC_OscConfig+0x94>
 8004ca6:	4ba8      	ldr	r3, [pc, #672]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	e015      	b.n	8004cd8 <HAL_RCC_OscConfig+0xc0>
 8004cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cb0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004cc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004cd4:	4b9c      	ldr	r3, [pc, #624]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cdc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004ce0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004ce4:	fa92 f2a2 	rbit	r2, r2
 8004ce8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004cec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004cf0:	fab2 f282 	clz	r2, r2
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	f042 0220 	orr.w	r2, r2, #32
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	f002 021f 	and.w	r2, r2, #31
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f202 	lsl.w	r2, r1, r2
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 811f 	beq.w	8004f4c <HAL_RCC_OscConfig+0x334>
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 8116 	bne.w	8004f4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f000 bfaf 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d36:	d106      	bne.n	8004d46 <HAL_RCC_OscConfig+0x12e>
 8004d38:	4b83      	ldr	r3, [pc, #524]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a82      	ldr	r2, [pc, #520]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e036      	b.n	8004db4 <HAL_RCC_OscConfig+0x19c>
 8004d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x158>
 8004d56:	4b7c      	ldr	r3, [pc, #496]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7b      	ldr	r2, [pc, #492]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a78      	ldr	r2, [pc, #480]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e021      	b.n	8004db4 <HAL_RCC_OscConfig+0x19c>
 8004d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCC_OscConfig+0x184>
 8004d82:	4b71      	ldr	r3, [pc, #452]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a70      	ldr	r2, [pc, #448]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b6e      	ldr	r3, [pc, #440]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6d      	ldr	r2, [pc, #436]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCC_OscConfig+0x19c>
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a69      	ldr	r2, [pc, #420]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b67      	ldr	r3, [pc, #412]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a66      	ldr	r2, [pc, #408]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004db2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	f023 020f 	bic.w	r2, r3, #15
 8004dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	495f      	ldr	r1, [pc, #380]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d059      	beq.n	8004e92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fd fd4f 	bl	8002880 <HAL_GetTick>
 8004de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fd fd4a 	bl	8002880 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d902      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	f000 bf43 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
 8004dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004e0a:	fa93 f3a3 	rbit	r3, r3
 8004e0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004e12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d102      	bne.n	8004e30 <HAL_RCC_OscConfig+0x218>
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	e015      	b.n	8004e5c <HAL_RCC_OscConfig+0x244>
 8004e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004e4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004e58:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004e64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004e68:	fa92 f2a2 	rbit	r2, r2
 8004e6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004e70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004e74:	fab2 f282 	clz	r2, r2
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	f042 0220 	orr.w	r2, r2, #32
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	f002 021f 	and.w	r2, r2, #31
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ab      	beq.n	8004de8 <HAL_RCC_OscConfig+0x1d0>
 8004e90:	e05d      	b.n	8004f4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fd fcf5 	bl	8002880 <HAL_GetTick>
 8004e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fd fcf0 	bl	8002880 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b64      	cmp	r3, #100	; 0x64
 8004eaa:	d902      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	f000 bee9 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
 8004eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004ebe:	fa93 f3a3 	rbit	r3, r3
 8004ec2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004ec6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x2cc>
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	e015      	b.n	8004f10 <HAL_RCC_OscConfig+0x2f8>
 8004ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004efc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004f00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCC_OscConfig+0x330>)
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004f18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004f1c:	fa92 f2a2 	rbit	r2, r2
 8004f20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004f24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004f28:	fab2 f282 	clz	r2, r2
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	f042 0220 	orr.w	r2, r2, #32
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	f002 021f 	and.w	r2, r2, #31
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ab      	bne.n	8004e9c <HAL_RCC_OscConfig+0x284>
 8004f44:	e003      	b.n	8004f4e <HAL_RCC_OscConfig+0x336>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 817d 	beq.w	800525e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f64:	4ba6      	ldr	r3, [pc, #664]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f70:	4ba3      	ldr	r3, [pc, #652]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d172      	bne.n	8005062 <HAL_RCC_OscConfig+0x44a>
 8004f7c:	4ba0      	ldr	r3, [pc, #640]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d16c      	bne.n	8005062 <HAL_RCC_OscConfig+0x44a>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004f9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x3a0>
 8004fb2:	4b93      	ldr	r3, [pc, #588]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	e013      	b.n	8004fe0 <HAL_RCC_OscConfig+0x3c8>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004fc2:	fa93 f3a3 	rbit	r3, r3
 8004fc6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004fd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004fdc:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004fe6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004fea:	fa92 f2a2 	rbit	r2, r2
 8004fee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004ff2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ff6:	fab2 f282 	clz	r2, r2
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	f042 0220 	orr.w	r2, r2, #32
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	f002 021f 	and.w	r2, r2, #31
 8005006:	2101      	movs	r1, #1
 8005008:	fa01 f202 	lsl.w	r2, r1, r2
 800500c:	4013      	ands	r3, r2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCC_OscConfig+0x410>
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d002      	beq.n	8005028 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f000 be2e 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b75      	ldr	r3, [pc, #468]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	21f8      	movs	r1, #248	; 0xf8
 800503e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005046:	fa91 f1a1 	rbit	r1, r1
 800504a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800504e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005052:	fab1 f181 	clz	r1, r1
 8005056:	b2c9      	uxtb	r1, r1
 8005058:	408b      	lsls	r3, r1
 800505a:	4969      	ldr	r1, [pc, #420]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005060:	e0fd      	b.n	800525e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8088 	beq.w	8005184 <HAL_RCC_OscConfig+0x56c>
 8005074:	2301      	movs	r3, #1
 8005076:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005086:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	461a      	mov	r2, r3
 800509c:	2301      	movs	r3, #1
 800509e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fd fbee 	bl	8002880 <HAL_GetTick>
 80050a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050aa:	f7fd fbe9 	bl	8002880 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	f000 bde2 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80050d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4d8>
 80050ea:	4b45      	ldr	r3, [pc, #276]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	e013      	b.n	8005118 <HAL_RCC_OscConfig+0x500>
 80050f0:	2302      	movs	r3, #2
 80050f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80050fa:	fa93 f3a3 	rbit	r3, r3
 80050fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005102:	2302      	movs	r3, #2
 8005104:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005108:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005114:	4b3a      	ldr	r3, [pc, #232]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2202      	movs	r2, #2
 800511a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800511e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005122:	fa92 f2a2 	rbit	r2, r2
 8005126:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800512a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800512e:	fab2 f282 	clz	r2, r2
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	f042 0220 	orr.w	r2, r2, #32
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	f002 021f 	and.w	r2, r2, #31
 800513e:	2101      	movs	r1, #1
 8005140:	fa01 f202 	lsl.w	r2, r1, r2
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0af      	beq.n	80050aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514a:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	21f8      	movs	r1, #248	; 0xf8
 8005160:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005168:	fa91 f1a1 	rbit	r1, r1
 800516c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005170:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005174:	fab1 f181 	clz	r1, r1
 8005178:	b2c9      	uxtb	r1, r1
 800517a:	408b      	lsls	r3, r1
 800517c:	4920      	ldr	r1, [pc, #128]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
 8005182:	e06c      	b.n	800525e <HAL_RCC_OscConfig+0x646>
 8005184:	2301      	movs	r3, #1
 8005186:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005196:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fd fb66 	bl	8002880 <HAL_GetTick>
 80051b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b8:	e00a      	b.n	80051d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fd fb61 	bl	8002880 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d902      	bls.n	80051d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	f000 bd5a 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
 80051d0:	2302      	movs	r3, #2
 80051d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80051e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e6:	fab3 f383 	clz	r3, r3
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d104      	bne.n	8005204 <HAL_RCC_OscConfig+0x5ec>
 80051fa:	4b01      	ldr	r3, [pc, #4]	; (8005200 <HAL_RCC_OscConfig+0x5e8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	e015      	b.n	800522c <HAL_RCC_OscConfig+0x614>
 8005200:	40021000 	.word	0x40021000
 8005204:	2302      	movs	r3, #2
 8005206:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005216:	2302      	movs	r3, #2
 8005218:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800521c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005228:	4bc8      	ldr	r3, [pc, #800]	; (800554c <HAL_RCC_OscConfig+0x934>)
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2202      	movs	r2, #2
 800522e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005232:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005236:	fa92 f2a2 	rbit	r2, r2
 800523a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800523e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005242:	fab2 f282 	clz	r2, r2
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	f042 0220 	orr.w	r2, r2, #32
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	f002 021f 	and.w	r2, r2, #31
 8005252:	2101      	movs	r1, #1
 8005254:	fa01 f202 	lsl.w	r2, r1, r2
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ad      	bne.n	80051ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8110 	beq.w	8005494 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d079      	beq.n	8005378 <HAL_RCC_OscConfig+0x760>
 8005284:	2301      	movs	r3, #1
 8005286:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800528e:	fa93 f3a3 	rbit	r3, r3
 8005292:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	4bab      	ldr	r3, [pc, #684]	; (8005550 <HAL_RCC_OscConfig+0x938>)
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	461a      	mov	r2, r3
 80052aa:	2301      	movs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ae:	f7fd fae7 	bl	8002880 <HAL_GetTick>
 80052b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fd fae2 	bl	8002880 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d902      	bls.n	80052ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	f000 bcdb 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
 80052ce:	2302      	movs	r3, #2
 80052d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052d8:	fa93 f3a3 	rbit	r3, r3
 80052dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052e8:	2202      	movs	r2, #2
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	fa93 f2a3 	rbit	r2, r3
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530c:	2202      	movs	r2, #2
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	fa93 f2a3 	rbit	r2, r3
 800531e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005326:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005328:	4b88      	ldr	r3, [pc, #544]	; (800554c <HAL_RCC_OscConfig+0x934>)
 800532a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005330:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005334:	2102      	movs	r1, #2
 8005336:	6019      	str	r1, [r3, #0]
 8005338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	fa93 f1a3 	rbit	r1, r3
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800534e:	6019      	str	r1, [r3, #0]
  return result;
 8005350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005354:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2101      	movs	r1, #1
 800536c:	fa01 f303 	lsl.w	r3, r1, r3
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0a0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x6a0>
 8005376:	e08d      	b.n	8005494 <HAL_RCC_OscConfig+0x87c>
 8005378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005388:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	fa93 f2a3 	rbit	r2, r3
 8005392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005396:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800539a:	601a      	str	r2, [r3, #0]
  return result;
 800539c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCC_OscConfig+0x938>)
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ba:	f7fd fa61 	bl	8002880 <HAL_GetTick>
 80053be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c2:	e00a      	b.n	80053da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fd fa5c 	bl	8002880 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d902      	bls.n	80053da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	f000 bc55 	b.w	8005c84 <HAL_RCC_OscConfig+0x106c>
 80053da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053e2:	2202      	movs	r2, #2
 80053e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	fa93 f2a3 	rbit	r2, r3
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005402:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005406:	2202      	movs	r2, #2
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f2a3 	rbit	r2, r3
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542a:	2202      	movs	r2, #2
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	fa93 f2a3 	rbit	r2, r3
 800543c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005440:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005444:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <HAL_RCC_OscConfig+0x934>)
 8005448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800544a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005452:	2102      	movs	r1, #2
 8005454:	6019      	str	r1, [r3, #0]
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	fa93 f1a3 	rbit	r1, r3
 8005464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005468:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800546c:	6019      	str	r1, [r3, #0]
  return result;
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2101      	movs	r1, #1
 800548a:	fa01 f303 	lsl.w	r3, r1, r3
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d197      	bne.n	80053c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 81a1 	beq.w	80057ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b0:	4b26      	ldr	r3, [pc, #152]	; (800554c <HAL_RCC_OscConfig+0x934>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d116      	bne.n	80054ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_RCC_OscConfig+0x934>)
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_RCC_OscConfig+0x934>)
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c6:	61d3      	str	r3, [r2, #28]
 80054c8:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_RCC_OscConfig+0x934>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80054d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80054e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ea:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <HAL_RCC_OscConfig+0x93c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11a      	bne.n	800552c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f6:	4b17      	ldr	r3, [pc, #92]	; (8005554 <HAL_RCC_OscConfig+0x93c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <HAL_RCC_OscConfig+0x93c>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7fd f9bd 	bl	8002880 <HAL_GetTick>
 8005506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	e009      	b.n	8005520 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550c:	f7fd f9b8 	bl	8002880 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	; 0x64
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e3b1      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <HAL_RCC_OscConfig+0x93c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800552c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10d      	bne.n	8005558 <HAL_RCC_OscConfig+0x940>
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <HAL_RCC_OscConfig+0x934>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4a02      	ldr	r2, [pc, #8]	; (800554c <HAL_RCC_OscConfig+0x934>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6213      	str	r3, [r2, #32]
 8005548:	e03c      	b.n	80055c4 <HAL_RCC_OscConfig+0x9ac>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	10908120 	.word	0x10908120
 8005554:	40007000 	.word	0x40007000
 8005558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10c      	bne.n	8005582 <HAL_RCC_OscConfig+0x96a>
 8005568:	4bc1      	ldr	r3, [pc, #772]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	4ac0      	ldr	r2, [pc, #768]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6213      	str	r3, [r2, #32]
 8005574:	4bbe      	ldr	r3, [pc, #760]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4abd      	ldr	r2, [pc, #756]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6213      	str	r3, [r2, #32]
 8005580:	e020      	b.n	80055c4 <HAL_RCC_OscConfig+0x9ac>
 8005582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b05      	cmp	r3, #5
 8005590:	d10c      	bne.n	80055ac <HAL_RCC_OscConfig+0x994>
 8005592:	4bb7      	ldr	r3, [pc, #732]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	4ab6      	ldr	r2, [pc, #728]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 8005598:	f043 0304 	orr.w	r3, r3, #4
 800559c:	6213      	str	r3, [r2, #32]
 800559e:	4bb4      	ldr	r3, [pc, #720]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	4ab3      	ldr	r2, [pc, #716]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	6213      	str	r3, [r2, #32]
 80055aa:	e00b      	b.n	80055c4 <HAL_RCC_OscConfig+0x9ac>
 80055ac:	4bb0      	ldr	r3, [pc, #704]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	4aaf      	ldr	r2, [pc, #700]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	6213      	str	r3, [r2, #32]
 80055b8:	4bad      	ldr	r3, [pc, #692]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	4aac      	ldr	r2, [pc, #688]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80055be:	f023 0304 	bic.w	r3, r3, #4
 80055c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8081 	beq.w	80056d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d6:	f7fd f953 	bl	8002880 <HAL_GetTick>
 80055da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055de:	e00b      	b.n	80055f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e0:	f7fd f94e 	bl	8002880 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e345      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
 80055f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005600:	2202      	movs	r2, #2
 8005602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005616:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005620:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005624:	2202      	movs	r2, #2
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	fa93 f2a3 	rbit	r2, r3
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800563e:	601a      	str	r2, [r3, #0]
  return result;
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005648:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f043 0302 	orr.w	r3, r3, #2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d102      	bne.n	8005664 <HAL_RCC_OscConfig+0xa4c>
 800565e:	4b84      	ldr	r3, [pc, #528]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	e013      	b.n	800568c <HAL_RCC_OscConfig+0xa74>
 8005664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005668:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800566c:	2202      	movs	r2, #2
 800566e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005674:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	fa93 f2a3 	rbit	r2, r3
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	4b79      	ldr	r3, [pc, #484]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005690:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005694:	2102      	movs	r1, #2
 8005696:	6011      	str	r1, [r2, #0]
 8005698:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800569c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	fa92 f1a2 	rbit	r1, r2
 80056a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80056ae:	6011      	str	r1, [r2, #0]
  return result;
 80056b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	fab2 f282 	clz	r2, r2
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	f002 021f 	and.w	r2, r2, #31
 80056ca:	2101      	movs	r1, #1
 80056cc:	fa01 f202 	lsl.w	r2, r1, r2
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d084      	beq.n	80055e0 <HAL_RCC_OscConfig+0x9c8>
 80056d6:	e07f      	b.n	80057d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fd f8d2 	bl	8002880 <HAL_GetTick>
 80056dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e0:	e00b      	b.n	80056fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fd f8cd 	bl	8002880 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e2c4      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
 80056fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005702:	2202      	movs	r2, #2
 8005704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	fa93 f2a3 	rbit	r2, r3
 8005714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005718:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005722:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005726:	2202      	movs	r2, #2
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	fa93 f2a3 	rbit	r2, r3
 8005738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005740:	601a      	str	r2, [r3, #0]
  return result;
 8005742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005746:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800574a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574c:	fab3 f383 	clz	r3, r3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d102      	bne.n	8005766 <HAL_RCC_OscConfig+0xb4e>
 8005760:	4b43      	ldr	r3, [pc, #268]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	e013      	b.n	800578e <HAL_RCC_OscConfig+0xb76>
 8005766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800576e:	2202      	movs	r2, #2
 8005770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	fa93 f2a3 	rbit	r2, r3
 8005780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005784:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005792:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005796:	2102      	movs	r1, #2
 8005798:	6011      	str	r1, [r2, #0]
 800579a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800579e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	fa92 f1a2 	rbit	r1, r2
 80057a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80057b0:	6011      	str	r1, [r2, #0]
  return result;
 80057b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	fab2 f282 	clz	r2, r2
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f002 021f 	and.w	r2, r2, #31
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f202 	lsl.w	r2, r1, r2
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d184      	bne.n	80056e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d105      	bne.n	80057ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e0:	4b23      	ldr	r3, [pc, #140]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8242 	beq.w	8005c82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057fe:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <HAL_RCC_OscConfig+0xc58>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b08      	cmp	r3, #8
 8005808:	f000 8213 	beq.w	8005c32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2b02      	cmp	r3, #2
 800581a:	f040 8162 	bne.w	8005ae2 <HAL_RCC_OscConfig+0xeca>
 800581e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005822:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005826:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800582a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005830:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	fa93 f2a3 	rbit	r2, r3
 800583a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005842:	601a      	str	r2, [r3, #0]
  return result;
 8005844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005848:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800584c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584e:	fab3 f383 	clz	r3, r3
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005858:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	461a      	mov	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fd f80c 	bl	8002880 <HAL_GetTick>
 8005868:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586c:	e00c      	b.n	8005888 <HAL_RCC_OscConfig+0xc70>
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005874:	f7fd f804 	bl	8002880 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e1fd      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
 8005888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	fa93 f2a3 	rbit	r2, r3
 80058a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80058ac:	601a      	str	r2, [r3, #0]
  return result;
 80058ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80058b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058b8:	fab3 f383 	clz	r3, r3
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_RCC_OscConfig+0xcba>
 80058cc:	4bb0      	ldr	r3, [pc, #704]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	e027      	b.n	8005922 <HAL_RCC_OscConfig+0xd0a>
 80058d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80058da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	fa93 f2a3 	rbit	r2, r3
 80058ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	fa93 f2a3 	rbit	r2, r3
 8005914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005918:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	4b9c      	ldr	r3, [pc, #624]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005926:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800592a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005934:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	fa92 f1a2 	rbit	r1, r2
 800593e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005942:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005946:	6011      	str	r1, [r2, #0]
  return result;
 8005948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800594c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	fab2 f282 	clz	r2, r2
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	f042 0220 	orr.w	r2, r2, #32
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	f002 021f 	and.w	r2, r2, #31
 8005962:	2101      	movs	r1, #1
 8005964:	fa01 f202 	lsl.w	r2, r1, r2
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d182      	bne.n	8005874 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800596e:	4b88      	ldr	r3, [pc, #544]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	430b      	orrs	r3, r1
 8005990:	497f      	ldr	r1, [pc, #508]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 8005992:	4313      	orrs	r3, r2
 8005994:	604b      	str	r3, [r1, #4]
 8005996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800599a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800599e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	fa93 f2a3 	rbit	r2, r3
 80059b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80059ba:	601a      	str	r2, [r3, #0]
  return result;
 80059bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80059c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	2301      	movs	r3, #1
 80059da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fc ff50 	bl	8002880 <HAL_GetTick>
 80059e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059e4:	e009      	b.n	80059fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fc ff4b 	bl	8002880 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e144      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
 80059fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	fa93 f2a3 	rbit	r2, r3
 8005a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005a1e:	601a      	str	r2, [r3, #0]
  return result;
 8005a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005a28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a2a:	fab3 f383 	clz	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d102      	bne.n	8005a44 <HAL_RCC_OscConfig+0xe2c>
 8005a3e:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	e027      	b.n	8005a94 <HAL_RCC_OscConfig+0xe7c>
 8005a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a48:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a56:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	fa93 f2a3 	rbit	r2, r3
 8005a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a64:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	fa93 f2a3 	rbit	r2, r3
 8005a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a98:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005a9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005aa0:	6011      	str	r1, [r2, #0]
 8005aa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aa6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	fa92 f1a2 	rbit	r1, r2
 8005ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ab4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ab8:	6011      	str	r1, [r2, #0]
  return result;
 8005aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005abe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	fab2 f282 	clz	r2, r2
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	f042 0220 	orr.w	r2, r2, #32
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	f002 021f 	and.w	r2, r2, #31
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d082      	beq.n	80059e6 <HAL_RCC_OscConfig+0xdce>
 8005ae0:	e0cf      	b.n	8005c82 <HAL_RCC_OscConfig+0x106a>
 8005ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	fa93 f2a3 	rbit	r2, r3
 8005afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005b06:	601a      	str	r2, [r3, #0]
  return result;
 8005b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005b10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	461a      	mov	r2, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fc feaa 	bl	8002880 <HAL_GetTick>
 8005b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b30:	e009      	b.n	8005b46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b32:	f7fc fea5 	bl	8002880 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e09e      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
 8005b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	fa93 f2a3 	rbit	r2, r3
 8005b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b6a:	601a      	str	r2, [r3, #0]
  return result;
 8005b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b76:	fab3 f383 	clz	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d104      	bne.n	8005b94 <HAL_RCC_OscConfig+0xf7c>
 8005b8a:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <HAL_RCC_OscConfig+0xf78>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	e029      	b.n	8005be4 <HAL_RCC_OscConfig+0xfcc>
 8005b90:	40021000 	.word	0x40021000
 8005b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b98:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fa93 f2a3 	rbit	r2, r3
 8005bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bcc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	fa93 f2a3 	rbit	r2, r3
 8005bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bda:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <HAL_RCC_OscConfig+0x1078>)
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005be8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005bec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bf6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	fa92 f1a2 	rbit	r1, r2
 8005c00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005c08:	6011      	str	r1, [r2, #0]
  return result;
 8005c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	fab2 f282 	clz	r2, r2
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	f042 0220 	orr.w	r2, r2, #32
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	f002 021f 	and.w	r2, r2, #31
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d180      	bne.n	8005b32 <HAL_RCC_OscConfig+0xf1a>
 8005c30:	e027      	b.n	8005c82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e01e      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c46:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <HAL_RCC_OscConfig+0x1078>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d10b      	bne.n	8005c7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005c66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d001      	beq.n	8005c82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000

08005c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b09e      	sub	sp, #120	; 0x78
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e162      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cac:	4b90      	ldr	r3, [pc, #576]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d910      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b8d      	ldr	r3, [pc, #564]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f023 0207 	bic.w	r2, r3, #7
 8005cc2:	498b      	ldr	r1, [pc, #556]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b89      	ldr	r3, [pc, #548]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e14a      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b82      	ldr	r3, [pc, #520]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	497f      	ldr	r1, [pc, #508]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80dc 	beq.w	8005ec0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d13c      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xf6>
 8005d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d20:	fab3 f383 	clz	r3, r3
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d102      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xa6>
 8005d34:	4b6f      	ldr	r3, [pc, #444]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	e00f      	b.n	8005d5a <HAL_RCC_ClockConfig+0xc6>
 8005d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	667b      	str	r3, [r7, #100]	; 0x64
 8005d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d50:	fa93 f3a3 	rbit	r3, r3
 8005d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d56:	4b67      	ldr	r3, [pc, #412]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d62:	fa92 f2a2 	rbit	r2, r2
 8005d66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d6a:	fab2 f282 	clz	r2, r2
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	f042 0220 	orr.w	r2, r2, #32
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	f002 021f 	and.w	r2, r2, #31
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d17b      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e0f3      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d13c      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x178>
 8005d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da2:	fab3 f383 	clz	r3, r3
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d102      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x128>
 8005db6:	4b4f      	ldr	r3, [pc, #316]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	e00f      	b.n	8005ddc <HAL_RCC_ClockConfig+0x148>
 8005dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc4:	fa93 f3a3 	rbit	r3, r3
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd2:	fa93 f3a3 	rbit	r3, r3
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd8:	4b46      	ldr	r3, [pc, #280]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005de0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de4:	fa92 f2a2 	rbit	r2, r2
 8005de8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dec:	fab2 f282 	clz	r2, r2
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	f042 0220 	orr.w	r2, r2, #32
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	f002 021f 	and.w	r2, r2, #31
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d13a      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0b2      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	fa93 f3a3 	rbit	r3, r3
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1a:	fab3 f383 	clz	r3, r3
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d102      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x1a0>
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	e00d      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1bc>
 8005e34:	2302      	movs	r3, #2
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e40:	2302      	movs	r3, #2
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	fa93 f3a3 	rbit	r3, r3
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2202      	movs	r2, #2
 8005e52:	61ba      	str	r2, [r7, #24]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	fa92 f2a2 	rbit	r2, r2
 8005e5a:	617a      	str	r2, [r7, #20]
  return result;
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	fab2 f282 	clz	r2, r2
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	f042 0220 	orr.w	r2, r2, #32
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	f002 021f 	and.w	r2, r2, #31
 8005e6e:	2101      	movs	r1, #1
 8005e70:	fa01 f202 	lsl.w	r2, r1, r2
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e079      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	491a      	ldr	r1, [pc, #104]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e90:	f7fc fcf6 	bl	8002880 <HAL_GetTick>
 8005e94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e98:	f7fc fcf2 	bl	8002880 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e061      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <HAL_RCC_ClockConfig+0x260>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 020c 	and.w	r2, r3, #12
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1eb      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d214      	bcs.n	8005ef8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 0207 	bic.w	r2, r3, #7
 8005ed6:	4906      	ldr	r1, [pc, #24]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <HAL_RCC_ClockConfig+0x25c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e040      	b.n	8005f72 <HAL_RCC_ClockConfig+0x2de>
 8005ef0:	40022000 	.word	0x40022000
 8005ef4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f04:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <HAL_RCC_ClockConfig+0x2e8>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	491a      	ldr	r1, [pc, #104]	; (8005f7c <HAL_RCC_ClockConfig+0x2e8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f22:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <HAL_RCC_ClockConfig+0x2e8>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4912      	ldr	r1, [pc, #72]	; (8005f7c <HAL_RCC_ClockConfig+0x2e8>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f36:	f000 f829 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <HAL_RCC_ClockConfig+0x2e8>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f44:	22f0      	movs	r2, #240	; 0xf0
 8005f46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	fa92 f2a2 	rbit	r2, r2
 8005f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	fab2 f282 	clz	r2, r2
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	40d3      	lsrs	r3, r2
 8005f5a:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <HAL_RCC_ClockConfig+0x2ec>)
 8005f5c:	5cd3      	ldrb	r3, [r2, r3]
 8005f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <HAL_RCC_ClockConfig+0x2f0>)
 8005f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <HAL_RCC_ClockConfig+0x2f4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fc fc44 	bl	80027f8 <HAL_InitTick>
  
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3778      	adds	r7, #120	; 0x78
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	08007f18 	.word	0x08007f18
 8005f84:	2000000c 	.word	0x2000000c
 8005f88:	20000010 	.word	0x20000010

08005f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08b      	sub	sp, #44	; 0x2c
 8005f90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	2300      	movs	r3, #0
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005fa6:	4b29      	ldr	r3, [pc, #164]	; (800604c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d002      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x30>
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8005fba:	e03c      	b.n	8006036 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005fbe:	623b      	str	r3, [r7, #32]
      break;
 8005fc0:	e03c      	b.n	800603c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005fc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005fcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	fa92 f2a2 	rbit	r2, r2
 8005fd4:	607a      	str	r2, [r7, #4]
  return result;
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	fab2 f282 	clz	r2, r2
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	40d3      	lsrs	r3, r2
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fe2:	5cd3      	ldrb	r3, [r2, r3]
 8005fe4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	220f      	movs	r2, #15
 8005ff0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	fa92 f2a2 	rbit	r2, r2
 8005ff8:	60fa      	str	r2, [r7, #12]
  return result;
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	fab2 f282 	clz	r2, r2
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	40d3      	lsrs	r3, r2
 8006004:	4a14      	ldr	r2, [pc, #80]	; (8006058 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006006:	5cd3      	ldrb	r3, [r2, r3]
 8006008:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006014:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	fbb2 f2f3 	udiv	r2, r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
 8006024:	e004      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4a0c      	ldr	r2, [pc, #48]	; (800605c <HAL_RCC_GetSysClockFreq+0xd0>)
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	623b      	str	r3, [r7, #32]
      break;
 8006034:	e002      	b.n	800603c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006038:	623b      	str	r3, [r7, #32]
      break;
 800603a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800603c:	6a3b      	ldr	r3, [r7, #32]
}
 800603e:	4618      	mov	r0, r3
 8006040:	372c      	adds	r7, #44	; 0x2c
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	007a1200 	.word	0x007a1200
 8006054:	08007f30 	.word	0x08007f30
 8006058:	08007f40 	.word	0x08007f40
 800605c:	003d0900 	.word	0x003d0900

08006060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <HAL_RCC_GetHCLKFreq+0x14>)
 8006066:	681b      	ldr	r3, [r3, #0]
}
 8006068:	4618      	mov	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	2000000c 	.word	0x2000000c

08006078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800607e:	f7ff ffef 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8006082:	4601      	mov	r1, r0
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800608c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006090:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	fa92 f2a2 	rbit	r2, r2
 8006098:	603a      	str	r2, [r7, #0]
  return result;
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	fab2 f282 	clz	r2, r2
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	40d3      	lsrs	r3, r2
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80060a6:	5cd3      	ldrb	r3, [r2, r3]
 80060a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40021000 	.word	0x40021000
 80060b8:	08007f28 	.word	0x08007f28

080060bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80060c2:	f7ff ffcd 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060c6:	4601      	mov	r1, r0
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80060d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80060d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	fa92 f2a2 	rbit	r2, r2
 80060dc:	603a      	str	r2, [r7, #0]
  return result;
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	fab2 f282 	clz	r2, r2
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	40d3      	lsrs	r3, r2
 80060e8:	4a04      	ldr	r2, [pc, #16]	; (80060fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80060ea:	5cd3      	ldrb	r3, [r2, r3]
 80060ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	08007f28 	.word	0x08007f28

08006100 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	220f      	movs	r2, #15
 800610e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006110:	4b12      	ldr	r3, [pc, #72]	; (800615c <HAL_RCC_GetClockConfig+0x5c>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 0203 	and.w	r2, r3, #3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800611c:	4b0f      	ldr	r3, [pc, #60]	; (800615c <HAL_RCC_GetClockConfig+0x5c>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006128:	4b0c      	ldr	r3, [pc, #48]	; (800615c <HAL_RCC_GetClockConfig+0x5c>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006134:	4b09      	ldr	r3, [pc, #36]	; (800615c <HAL_RCC_GetClockConfig+0x5c>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006142:	4b07      	ldr	r3, [pc, #28]	; (8006160 <HAL_RCC_GetClockConfig+0x60>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0207 	and.w	r2, r3, #7
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	601a      	str	r2, [r3, #0]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000
 8006160:	40022000 	.word	0x40022000

08006164 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b092      	sub	sp, #72	; 0x48
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006174:	2300      	movs	r3, #0
 8006176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80cd 	beq.w	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006188:	4b8e      	ldr	r3, [pc, #568]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10e      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006194:	4b8b      	ldr	r3, [pc, #556]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4a8a      	ldr	r2, [pc, #552]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619e:	61d3      	str	r3, [r2, #28]
 80061a0:	4b88      	ldr	r3, [pc, #544]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b2:	4b85      	ldr	r3, [pc, #532]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d118      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061be:	4b82      	ldr	r3, [pc, #520]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a81      	ldr	r2, [pc, #516]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ca:	f7fc fb59 	bl	8002880 <HAL_GetTick>
 80061ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d0:	e008      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d2:	f7fc fb55 	bl	8002880 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b64      	cmp	r3, #100	; 0x64
 80061de:	d901      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e0ea      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e4:	4b78      	ldr	r3, [pc, #480]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061f0:	4b74      	ldr	r3, [pc, #464]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d07d      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800620a:	429a      	cmp	r2, r3
 800620c:	d076      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800620e:	4b6d      	ldr	r3, [pc, #436]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	fa93 f3a3 	rbit	r3, r3
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006228:	fab3 f383 	clz	r3, r3
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	4b66      	ldr	r3, [pc, #408]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	461a      	mov	r2, r3
 8006238:	2301      	movs	r3, #1
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	fa93 f3a3 	rbit	r3, r3
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800624c:	fab3 f383 	clz	r3, r3
 8006250:	b2db      	uxtb	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	4b5d      	ldr	r3, [pc, #372]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	461a      	mov	r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006260:	4a58      	ldr	r2, [pc, #352]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006264:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d045      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fc fb06 	bl	8002880 <HAL_GetTick>
 8006274:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006276:	e00a      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006278:	f7fc fb02 	bl	8002880 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e095      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x256>
 800628e:	2302      	movs	r3, #2
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	2302      	movs	r3, #2
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	fa93 f3a3 	rbit	r3, r3
 80062a4:	61fb      	str	r3, [r7, #28]
  return result;
 80062a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a8:	fab3 f383 	clz	r3, r3
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f043 0302 	orr.w	r3, r3, #2
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d102      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062bc:	4b41      	ldr	r3, [pc, #260]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	e007      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80062c2:	2302      	movs	r3, #2
 80062c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	fa93 f3a3 	rbit	r3, r3
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	4b3d      	ldr	r3, [pc, #244]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2202      	movs	r2, #2
 80062d4:	613a      	str	r2, [r7, #16]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	fa92 f2a2 	rbit	r2, r2
 80062dc:	60fa      	str	r2, [r7, #12]
  return result;
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	fab2 f282 	clz	r2, r2
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	f002 021f 	and.w	r2, r2, #31
 80062f0:	2101      	movs	r1, #1
 80062f2:	fa01 f202 	lsl.w	r2, r1, r2
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0bd      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80062fc:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	492e      	ldr	r1, [pc, #184]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630a:	4313      	orrs	r3, r2
 800630c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800630e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006316:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006320:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800632e:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f023 0203 	bic.w	r2, r3, #3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4922      	ldr	r1, [pc, #136]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633c:	4313      	orrs	r3, r2
 800633e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800634c:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f023 0210 	bic.w	r2, r3, #16
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	491a      	ldr	r1, [pc, #104]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635a:	4313      	orrs	r3, r2
 800635c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	4913      	ldr	r1, [pc, #76]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006378:	4313      	orrs	r3, r2
 800637a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	490b      	ldr	r1, [pc, #44]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006396:	4313      	orrs	r3, r2
 8006398:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	4904      	ldr	r1, [pc, #16]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3748      	adds	r7, #72	; 0x48
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
 80063c8:	40007000 	.word	0x40007000
 80063cc:	10908100 	.word	0x10908100

080063d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e049      	b.n	8006476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fb fff0 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f000 fde4 	bl	8006fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e049      	b.n	8006524 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f841 	bl	800652c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f000 fd8d 	bl	8006fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <HAL_TIM_IC_Start+0x1a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e023      	b.n	80065a2 <HAL_TIM_IC_Start+0x62>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b04      	cmp	r3, #4
 800655e:	d104      	bne.n	800656a <HAL_TIM_IC_Start+0x2a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e01b      	b.n	80065a2 <HAL_TIM_IC_Start+0x62>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d104      	bne.n	800657a <HAL_TIM_IC_Start+0x3a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e013      	b.n	80065a2 <HAL_TIM_IC_Start+0x62>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b0c      	cmp	r3, #12
 800657e:	d104      	bne.n	800658a <HAL_TIM_IC_Start+0x4a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006586:	b2db      	uxtb	r3, r3
 8006588:	e00b      	b.n	80065a2 <HAL_TIM_IC_Start+0x62>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b10      	cmp	r3, #16
 800658e:	d104      	bne.n	800659a <HAL_TIM_IC_Start+0x5a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006596:	b2db      	uxtb	r3, r3
 8006598:	e003      	b.n	80065a2 <HAL_TIM_IC_Start+0x62>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <HAL_TIM_IC_Start+0x74>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e013      	b.n	80065dc <HAL_TIM_IC_Start+0x9c>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d104      	bne.n	80065c4 <HAL_TIM_IC_Start+0x84>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	e00b      	b.n	80065dc <HAL_TIM_IC_Start+0x9c>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d104      	bne.n	80065d4 <HAL_TIM_IC_Start+0x94>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e003      	b.n	80065dc <HAL_TIM_IC_Start+0x9c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d102      	bne.n	80065ea <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d001      	beq.n	80065ee <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e083      	b.n	80066f6 <HAL_TIM_IC_Start+0x1b6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_IC_Start+0xbe>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fc:	e023      	b.n	8006646 <HAL_TIM_IC_Start+0x106>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d104      	bne.n	800660e <HAL_TIM_IC_Start+0xce>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800660c:	e01b      	b.n	8006646 <HAL_TIM_IC_Start+0x106>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d104      	bne.n	800661e <HAL_TIM_IC_Start+0xde>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800661c:	e013      	b.n	8006646 <HAL_TIM_IC_Start+0x106>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b0c      	cmp	r3, #12
 8006622:	d104      	bne.n	800662e <HAL_TIM_IC_Start+0xee>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800662c:	e00b      	b.n	8006646 <HAL_TIM_IC_Start+0x106>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b10      	cmp	r3, #16
 8006632:	d104      	bne.n	800663e <HAL_TIM_IC_Start+0xfe>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800663c:	e003      	b.n	8006646 <HAL_TIM_IC_Start+0x106>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <HAL_TIM_IC_Start+0x116>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006654:	e013      	b.n	800667e <HAL_TIM_IC_Start+0x13e>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b04      	cmp	r3, #4
 800665a:	d104      	bne.n	8006666 <HAL_TIM_IC_Start+0x126>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006664:	e00b      	b.n	800667e <HAL_TIM_IC_Start+0x13e>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d104      	bne.n	8006676 <HAL_TIM_IC_Start+0x136>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006674:	e003      	b.n	800667e <HAL_TIM_IC_Start+0x13e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ff60 	bl	800754c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_TIM_IC_Start+0x1c0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_TIM_IC_Start+0x174>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d009      	beq.n	80066b4 <HAL_TIM_IC_Start+0x174>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a17      	ldr	r2, [pc, #92]	; (8006704 <HAL_TIM_IC_Start+0x1c4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_TIM_IC_Start+0x174>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a16      	ldr	r2, [pc, #88]	; (8006708 <HAL_TIM_IC_Start+0x1c8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d115      	bne.n	80066e0 <HAL_TIM_IC_Start+0x1a0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	4b14      	ldr	r3, [pc, #80]	; (800670c <HAL_TIM_IC_Start+0x1cc>)
 80066bc:	4013      	ands	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d015      	beq.n	80066f2 <HAL_TIM_IC_Start+0x1b2>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066cc:	d011      	beq.n	80066f2 <HAL_TIM_IC_Start+0x1b2>
    {
      __HAL_TIM_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066de:	e008      	b.n	80066f2 <HAL_TIM_IC_Start+0x1b2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e000      	b.n	80066f4 <HAL_TIM_IC_Start+0x1b4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40000400 	.word	0x40000400
 8006708:	40014000 	.word	0x40014000
 800670c:	00010007 	.word	0x00010007

08006710 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_TIM_IC_Start_IT+0x1e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e023      	b.n	8006776 <HAL_TIM_IC_Start_IT+0x66>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_TIM_IC_Start_IT+0x2e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e01b      	b.n	8006776 <HAL_TIM_IC_Start_IT+0x66>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d104      	bne.n	800674e <HAL_TIM_IC_Start_IT+0x3e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e013      	b.n	8006776 <HAL_TIM_IC_Start_IT+0x66>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d104      	bne.n	800675e <HAL_TIM_IC_Start_IT+0x4e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	e00b      	b.n	8006776 <HAL_TIM_IC_Start_IT+0x66>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b10      	cmp	r3, #16
 8006762:	d104      	bne.n	800676e <HAL_TIM_IC_Start_IT+0x5e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800676a:	b2db      	uxtb	r3, r3
 800676c:	e003      	b.n	8006776 <HAL_TIM_IC_Start_IT+0x66>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006774:	b2db      	uxtb	r3, r3
 8006776:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <HAL_TIM_IC_Start_IT+0x78>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e013      	b.n	80067b0 <HAL_TIM_IC_Start_IT+0xa0>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d104      	bne.n	8006798 <HAL_TIM_IC_Start_IT+0x88>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e00b      	b.n	80067b0 <HAL_TIM_IC_Start_IT+0xa0>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b08      	cmp	r3, #8
 800679c:	d104      	bne.n	80067a8 <HAL_TIM_IC_Start_IT+0x98>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e003      	b.n	80067b0 <HAL_TIM_IC_Start_IT+0xa0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d102      	bne.n	80067be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80067b8:	7b7b      	ldrb	r3, [r7, #13]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d001      	beq.n	80067c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0ce      	b.n	8006960 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_IC_Start_IT+0xc2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d0:	e023      	b.n	800681a <HAL_TIM_IC_Start_IT+0x10a>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_IC_Start_IT+0xd2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067e0:	e01b      	b.n	800681a <HAL_TIM_IC_Start_IT+0x10a>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_IC_Start_IT+0xe2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f0:	e013      	b.n	800681a <HAL_TIM_IC_Start_IT+0x10a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b0c      	cmp	r3, #12
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_IC_Start_IT+0xf2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006800:	e00b      	b.n	800681a <HAL_TIM_IC_Start_IT+0x10a>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b10      	cmp	r3, #16
 8006806:	d104      	bne.n	8006812 <HAL_TIM_IC_Start_IT+0x102>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006810:	e003      	b.n	800681a <HAL_TIM_IC_Start_IT+0x10a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <HAL_TIM_IC_Start_IT+0x11a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006828:	e013      	b.n	8006852 <HAL_TIM_IC_Start_IT+0x142>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d104      	bne.n	800683a <HAL_TIM_IC_Start_IT+0x12a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006838:	e00b      	b.n	8006852 <HAL_TIM_IC_Start_IT+0x142>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d104      	bne.n	800684a <HAL_TIM_IC_Start_IT+0x13a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006848:	e003      	b.n	8006852 <HAL_TIM_IC_Start_IT+0x142>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b0c      	cmp	r3, #12
 8006856:	d841      	bhi.n	80068dc <HAL_TIM_IC_Start_IT+0x1cc>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_TIM_IC_Start_IT+0x150>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006895 	.word	0x08006895
 8006864:	080068dd 	.word	0x080068dd
 8006868:	080068dd 	.word	0x080068dd
 800686c:	080068dd 	.word	0x080068dd
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068dd 	.word	0x080068dd
 8006878:	080068dd 	.word	0x080068dd
 800687c:	080068dd 	.word	0x080068dd
 8006880:	080068b9 	.word	0x080068b9
 8006884:	080068dd 	.word	0x080068dd
 8006888:	080068dd 	.word	0x080068dd
 800688c:	080068dd 	.word	0x080068dd
 8006890:	080068cb 	.word	0x080068cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0202 	orr.w	r2, r2, #2
 80068a2:	60da      	str	r2, [r3, #12]
      break;
 80068a4:	e01d      	b.n	80068e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0204 	orr.w	r2, r2, #4
 80068b4:	60da      	str	r2, [r3, #12]
      break;
 80068b6:	e014      	b.n	80068e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	60da      	str	r2, [r3, #12]
      break;
 80068c8:	e00b      	b.n	80068e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0210 	orr.w	r2, r2, #16
 80068d8:	60da      	str	r2, [r3, #12]
      break;
 80068da:	e002      	b.n	80068e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d13a      	bne.n	800695e <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2201      	movs	r2, #1
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fe2b 	bl	800754c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <HAL_TIM_IC_Start_IT+0x258>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_TIM_IC_Start_IT+0x20e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d009      	beq.n	800691e <HAL_TIM_IC_Start_IT+0x20e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a17      	ldr	r2, [pc, #92]	; (800696c <HAL_TIM_IC_Start_IT+0x25c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_TIM_IC_Start_IT+0x20e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a15      	ldr	r2, [pc, #84]	; (8006970 <HAL_TIM_IC_Start_IT+0x260>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d115      	bne.n	800694a <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <HAL_TIM_IC_Start_IT+0x264>)
 8006926:	4013      	ands	r3, r2
 8006928:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b06      	cmp	r3, #6
 800692e:	d015      	beq.n	800695c <HAL_TIM_IC_Start_IT+0x24c>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006936:	d011      	beq.n	800695c <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006948:	e008      	b.n	800695c <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e000      	b.n	800695e <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40000400 	.word	0x40000400
 8006970:	40014000 	.word	0x40014000
 8006974:	00010007 	.word	0x00010007

08006978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b02      	cmp	r3, #2
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0202 	mvn.w	r2, #2
 80069a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fb f8fa 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 faec 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 faf3 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0204 	mvn.w	r2, #4
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fb f8d0 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fac2 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fac9 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d122      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d11b      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0208 	mvn.w	r2, #8
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2204      	movs	r2, #4
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fb f8a6 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa98 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa9f 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d122      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0210 	mvn.w	r2, #16
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fb f87c 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa6e 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa75 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d10e      	bne.n	8006afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d107      	bne.n	8006afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0201 	mvn.w	r2, #1
 8006af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa48 	bl	8006f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	d10e      	bne.n	8006b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b14:	2b80      	cmp	r3, #128	; 0x80
 8006b16:	d107      	bne.n	8006b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fdb0 	bl	8007688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	d10e      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d107      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fda3 	bl	800769c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d10e      	bne.n	8006b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d107      	bne.n	8006b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fa23 	bl	8006fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d10e      	bne.n	8006bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d107      	bne.n	8006bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f06f 0220 	mvn.w	r2, #32
 8006ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fd63 	bl	8007674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e088      	b.n	8006ce6 <HAL_TIM_IC_ConfigChannel+0x130>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11b      	bne.n	8006c1a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6819      	ldr	r1, [r3, #0]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f000 faff 	bl	80071f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 020c 	bic.w	r2, r2, #12
 8006c04:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6999      	ldr	r1, [r3, #24]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	619a      	str	r2, [r3, #24]
 8006c18:	e060      	b.n	8006cdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d11c      	bne.n	8006c5a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6819      	ldr	r1, [r3, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f000 fb6b 	bl	800730a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c42:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6999      	ldr	r1, [r3, #24]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	021a      	lsls	r2, r3, #8
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	619a      	str	r2, [r3, #24]
 8006c58:	e040      	b.n	8006cdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6819      	ldr	r1, [r3, #0]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f000 fbb8 	bl	80073e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 020c 	bic.w	r2, r2, #12
 8006c82:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69d9      	ldr	r1, [r3, #28]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	61da      	str	r2, [r3, #28]
 8006c96:	e021      	b.n	8006cdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b0c      	cmp	r3, #12
 8006c9c:	d11c      	bne.n	8006cd8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f000 fbd5 	bl	800745c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	021a      	lsls	r2, r3, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	61da      	str	r2, [r3, #28]
 8006cd6:	e001      	b.n	8006cdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_TIM_ConfigClockSource+0x1c>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0b6      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x18a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d46:	d03e      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0xd8>
 8006d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4c:	f200 8087 	bhi.w	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d54:	f000 8086 	beq.w	8006e64 <HAL_TIM_ConfigClockSource+0x176>
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5c:	d87f      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d5e:	2b70      	cmp	r3, #112	; 0x70
 8006d60:	d01a      	beq.n	8006d98 <HAL_TIM_ConfigClockSource+0xaa>
 8006d62:	2b70      	cmp	r3, #112	; 0x70
 8006d64:	d87b      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d66:	2b60      	cmp	r3, #96	; 0x60
 8006d68:	d050      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x11e>
 8006d6a:	2b60      	cmp	r3, #96	; 0x60
 8006d6c:	d877      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d6e:	2b50      	cmp	r3, #80	; 0x50
 8006d70:	d03c      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0xfe>
 8006d72:	2b50      	cmp	r3, #80	; 0x50
 8006d74:	d873      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d058      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0x13e>
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d86f      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d7e:	2b30      	cmp	r3, #48	; 0x30
 8006d80:	d064      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x15e>
 8006d82:	2b30      	cmp	r3, #48	; 0x30
 8006d84:	d86b      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d060      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x15e>
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d867      	bhi.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d05c      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x15e>
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d05a      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x15e>
 8006d96:	e062      	b.n	8006e5e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f000 fbb0 	bl	800750c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	609a      	str	r2, [r3, #8]
      break;
 8006dc4:	e04f      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6899      	ldr	r1, [r3, #8]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f000 fb99 	bl	800750c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006de8:	609a      	str	r2, [r3, #8]
      break;
 8006dea:	e03c      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	6859      	ldr	r1, [r3, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f000 fa57 	bl	80072ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2150      	movs	r1, #80	; 0x50
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fb66 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006e0a:	e02c      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	6859      	ldr	r1, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f000 fab3 	bl	8007384 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2160      	movs	r1, #96	; 0x60
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fb56 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006e2a:	e01c      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f000 fa37 	bl	80072ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2140      	movs	r1, #64	; 0x40
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fb46 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006e4a:	e00c      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f000 fb3d 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006e5c:	e003      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]
      break;
 8006e62:	e000      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e031      	b.n	8006efc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f90e 	bl	80070cc <TIM_SlaveTimer_SetConfig>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e018      	b.n	8006efc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ee8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b0c      	cmp	r3, #12
 8006f16:	d831      	bhi.n	8006f7c <HAL_TIM_ReadCapturedValue+0x78>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f55 	.word	0x08006f55
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f5f 	.word	0x08006f5f
 8006f34:	08006f7d 	.word	0x08006f7d
 8006f38:	08006f7d 	.word	0x08006f7d
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f7d 	.word	0x08006f7d
 8006f48:	08006f7d 	.word	0x08006f7d
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006f73 	.word	0x08006f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	60fb      	str	r3, [r7, #12]

      break;
 8006f5c:	e00f      	b.n	8006f7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	60fb      	str	r3, [r7, #12]

      break;
 8006f66:	e00a      	b.n	8006f7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	60fb      	str	r3, [r7, #12]

      break;
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	60fb      	str	r3, [r7, #12]

      break;
 8006f7a:	e000      	b.n	8006f7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f7c:	bf00      	nop
  }

  return tmpreg;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a32      	ldr	r2, [pc, #200]	; (80070b8 <TIM_Base_SetConfig+0xdc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_Base_SetConfig+0x28>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffa:	d003      	beq.n	8007004 <TIM_Base_SetConfig+0x28>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a2f      	ldr	r2, [pc, #188]	; (80070bc <TIM_Base_SetConfig+0xe0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d108      	bne.n	8007016 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <TIM_Base_SetConfig+0xdc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <TIM_Base_SetConfig+0x6a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007024:	d00f      	beq.n	8007046 <TIM_Base_SetConfig+0x6a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a24      	ldr	r2, [pc, #144]	; (80070bc <TIM_Base_SetConfig+0xe0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00b      	beq.n	8007046 <TIM_Base_SetConfig+0x6a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a23      	ldr	r2, [pc, #140]	; (80070c0 <TIM_Base_SetConfig+0xe4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d007      	beq.n	8007046 <TIM_Base_SetConfig+0x6a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a22      	ldr	r2, [pc, #136]	; (80070c4 <TIM_Base_SetConfig+0xe8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_Base_SetConfig+0x6a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a21      	ldr	r2, [pc, #132]	; (80070c8 <TIM_Base_SetConfig+0xec>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d108      	bne.n	8007058 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <TIM_Base_SetConfig+0xdc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_Base_SetConfig+0xc0>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a0e      	ldr	r2, [pc, #56]	; (80070c0 <TIM_Base_SetConfig+0xe4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_Base_SetConfig+0xc0>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a0d      	ldr	r2, [pc, #52]	; (80070c4 <TIM_Base_SetConfig+0xe8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0xc0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <TIM_Base_SetConfig+0xec>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d103      	bne.n	80070a4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	615a      	str	r2, [r3, #20]
}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800

080070cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b70      	cmp	r3, #112	; 0x70
 8007118:	d01a      	beq.n	8007150 <TIM_SlaveTimer_SetConfig+0x84>
 800711a:	2b70      	cmp	r3, #112	; 0x70
 800711c:	d860      	bhi.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
 800711e:	2b60      	cmp	r3, #96	; 0x60
 8007120:	d054      	beq.n	80071cc <TIM_SlaveTimer_SetConfig+0x100>
 8007122:	2b60      	cmp	r3, #96	; 0x60
 8007124:	d85c      	bhi.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
 8007126:	2b50      	cmp	r3, #80	; 0x50
 8007128:	d046      	beq.n	80071b8 <TIM_SlaveTimer_SetConfig+0xec>
 800712a:	2b50      	cmp	r3, #80	; 0x50
 800712c:	d858      	bhi.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d019      	beq.n	8007166 <TIM_SlaveTimer_SetConfig+0x9a>
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d854      	bhi.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
 8007136:	2b30      	cmp	r3, #48	; 0x30
 8007138:	d055      	beq.n	80071e6 <TIM_SlaveTimer_SetConfig+0x11a>
 800713a:	2b30      	cmp	r3, #48	; 0x30
 800713c:	d850      	bhi.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
 800713e:	2b20      	cmp	r3, #32
 8007140:	d051      	beq.n	80071e6 <TIM_SlaveTimer_SetConfig+0x11a>
 8007142:	2b20      	cmp	r3, #32
 8007144:	d84c      	bhi.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d04d      	beq.n	80071e6 <TIM_SlaveTimer_SetConfig+0x11a>
 800714a:	2b10      	cmp	r3, #16
 800714c:	d04b      	beq.n	80071e6 <TIM_SlaveTimer_SetConfig+0x11a>
 800714e:	e047      	b.n	80071e0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68d9      	ldr	r1, [r3, #12]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f000 f9d4 	bl	800750c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007164:	e040      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b05      	cmp	r3, #5
 800716c:	d101      	bne.n	8007172 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e03b      	b.n	80071ea <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a1a      	ldr	r2, [r3, #32]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007198:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
      break;
 80071b6:	e017      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	6899      	ldr	r1, [r3, #8]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	461a      	mov	r2, r3
 80071c6:	f000 f871 	bl	80072ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80071ca:	e00d      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	6899      	ldr	r1, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	461a      	mov	r2, r3
 80071da:	f000 f8d3 	bl	8007384 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80071de:	e003      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
      break;
 80071e4:	e000      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80071e6:	bf00      	nop
  }

  return status;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a20      	ldr	r2, [pc, #128]	; (80072a0 <TIM_TI1_SetConfig+0xac>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00b      	beq.n	800723a <TIM_TI1_SetConfig+0x46>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007228:	d007      	beq.n	800723a <TIM_TI1_SetConfig+0x46>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <TIM_TI1_SetConfig+0xb0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_TI1_SetConfig+0x46>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <TIM_TI1_SetConfig+0xb4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <TIM_TI1_SetConfig+0x4a>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <TIM_TI1_SetConfig+0x4c>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e003      	b.n	800725e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	b2db      	uxtb	r3, r3
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f023 030a 	bic.w	r3, r3, #10
 8007278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f003 030a 	and.w	r3, r3, #10
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40014000 	.word	0x40014000

080072ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 030a 	bic.w	r3, r3, #10
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800730a:	b480      	push	{r7}
 800730c:	b087      	sub	sp, #28
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f023 0210 	bic.w	r2, r3, #16
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007336:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	031b      	lsls	r3, r3, #12
 800734e:	b29b      	uxth	r3, r3
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800735c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	621a      	str	r2, [r3, #32]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f023 0210 	bic.w	r2, r3, #16
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	031b      	lsls	r3, r3, #12
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	621a      	str	r2, [r3, #32]
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f023 0303 	bic.w	r3, r3, #3
 8007410:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007420:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	b2db      	uxtb	r3, r3
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007434:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	621a      	str	r2, [r3, #32]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007488:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800749a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	031b      	lsls	r3, r3, #12
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	031b      	lsls	r3, r3, #12
 80074b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f043 0307 	orr.w	r3, r3, #7
 80074f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	609a      	str	r2, [r3, #8]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	021a      	lsls	r2, r3, #8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	431a      	orrs	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	2201      	movs	r2, #1
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	43db      	mvns	r3, r3
 800756e:	401a      	ands	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1a      	ldr	r2, [r3, #32]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	fa01 f303 	lsl.w	r3, r1, r3
 8007584:	431a      	orrs	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e054      	b.n	800765a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a24      	ldr	r2, [pc, #144]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d108      	bne.n	80075ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00e      	beq.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007618:	d009      	beq.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a13      	ldr	r2, [pc, #76]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d004      	beq.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a11      	ldr	r2, [pc, #68]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d10c      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	4313      	orrs	r3, r2
 800763e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40012c00 	.word	0x40012c00
 800766c:	40000400 	.word	0x40000400
 8007670:	40014000 	.word	0x40014000

08007674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e040      	b.n	8007744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fa ffda 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	; 0x24
 80076dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f82c 	bl	800774c <UART_SetConfig>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e022      	b.n	8007744 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f956 	bl	80079b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800771a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800772a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9dd 	bl	8007afc <UART_CheckIdleState>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b8a      	ldr	r3, [pc, #552]	; (80079a0 <UART_SetConfig+0x254>)
 8007778:	4013      	ands	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	6979      	ldr	r1, [r7, #20]
 8007780:	430b      	orrs	r3, r1
 8007782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a78      	ldr	r2, [pc, #480]	; (80079a4 <UART_SetConfig+0x258>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d120      	bne.n	800780a <UART_SetConfig+0xbe>
 80077c8:	4b77      	ldr	r3, [pc, #476]	; (80079a8 <UART_SetConfig+0x25c>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f003 0303 	and.w	r3, r3, #3
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d817      	bhi.n	8007804 <UART_SetConfig+0xb8>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <UART_SetConfig+0x90>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077f9 	.word	0x080077f9
 80077e4:	080077ff 	.word	0x080077ff
 80077e8:	080077f3 	.word	0x080077f3
 80077ec:	2300      	movs	r3, #0
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e01d      	b.n	800782e <UART_SetConfig+0xe2>
 80077f2:	2302      	movs	r3, #2
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e01a      	b.n	800782e <UART_SetConfig+0xe2>
 80077f8:	2304      	movs	r3, #4
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e017      	b.n	800782e <UART_SetConfig+0xe2>
 80077fe:	2308      	movs	r3, #8
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e014      	b.n	800782e <UART_SetConfig+0xe2>
 8007804:	2310      	movs	r3, #16
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e011      	b.n	800782e <UART_SetConfig+0xe2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a67      	ldr	r2, [pc, #412]	; (80079ac <UART_SetConfig+0x260>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d102      	bne.n	800781a <UART_SetConfig+0xce>
 8007814:	2300      	movs	r3, #0
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e009      	b.n	800782e <UART_SetConfig+0xe2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a64      	ldr	r2, [pc, #400]	; (80079b0 <UART_SetConfig+0x264>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d102      	bne.n	800782a <UART_SetConfig+0xde>
 8007824:	2300      	movs	r3, #0
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e001      	b.n	800782e <UART_SetConfig+0xe2>
 800782a:	2310      	movs	r3, #16
 800782c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d15b      	bne.n	80078f0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007838:	7ffb      	ldrb	r3, [r7, #31]
 800783a:	2b08      	cmp	r3, #8
 800783c:	d827      	bhi.n	800788e <UART_SetConfig+0x142>
 800783e:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0xf8>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	08007869 	.word	0x08007869
 8007848:	08007871 	.word	0x08007871
 800784c:	08007879 	.word	0x08007879
 8007850:	0800788f 	.word	0x0800788f
 8007854:	0800787f 	.word	0x0800787f
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
 8007864:	08007887 	.word	0x08007887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007868:	f7fe fc06 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 800786c:	61b8      	str	r0, [r7, #24]
        break;
 800786e:	e013      	b.n	8007898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007870:	f7fe fc24 	bl	80060bc <HAL_RCC_GetPCLK2Freq>
 8007874:	61b8      	str	r0, [r7, #24]
        break;
 8007876:	e00f      	b.n	8007898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007878:	4b4e      	ldr	r3, [pc, #312]	; (80079b4 <UART_SetConfig+0x268>)
 800787a:	61bb      	str	r3, [r7, #24]
        break;
 800787c:	e00c      	b.n	8007898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800787e:	f7fe fb85 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 8007882:	61b8      	str	r0, [r7, #24]
        break;
 8007884:	e008      	b.n	8007898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	61bb      	str	r3, [r7, #24]
        break;
 800788c:	e004      	b.n	8007898 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	77bb      	strb	r3, [r7, #30]
        break;
 8007896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d074      	beq.n	8007988 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	441a      	add	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b0f      	cmp	r3, #15
 80078ba:	d916      	bls.n	80078ea <UART_SetConfig+0x19e>
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c2:	d212      	bcs.n	80078ea <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f023 030f 	bic.w	r3, r3, #15
 80078cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	b29a      	uxth	r2, r3
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	4313      	orrs	r3, r2
 80078de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	89fa      	ldrh	r2, [r7, #14]
 80078e6:	60da      	str	r2, [r3, #12]
 80078e8:	e04e      	b.n	8007988 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	77bb      	strb	r3, [r7, #30]
 80078ee:	e04b      	b.n	8007988 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078f0:	7ffb      	ldrb	r3, [r7, #31]
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d827      	bhi.n	8007946 <UART_SetConfig+0x1fa>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0x1b0>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007929 	.word	0x08007929
 8007904:	08007931 	.word	0x08007931
 8007908:	08007947 	.word	0x08007947
 800790c:	08007937 	.word	0x08007937
 8007910:	08007947 	.word	0x08007947
 8007914:	08007947 	.word	0x08007947
 8007918:	08007947 	.word	0x08007947
 800791c:	0800793f 	.word	0x0800793f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fe fbaa 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 8007924:	61b8      	str	r0, [r7, #24]
        break;
 8007926:	e013      	b.n	8007950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007928:	f7fe fbc8 	bl	80060bc <HAL_RCC_GetPCLK2Freq>
 800792c:	61b8      	str	r0, [r7, #24]
        break;
 800792e:	e00f      	b.n	8007950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007930:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <UART_SetConfig+0x268>)
 8007932:	61bb      	str	r3, [r7, #24]
        break;
 8007934:	e00c      	b.n	8007950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007936:	f7fe fb29 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 800793a:	61b8      	str	r0, [r7, #24]
        break;
 800793c:	e008      	b.n	8007950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007942:	61bb      	str	r3, [r7, #24]
        break;
 8007944:	e004      	b.n	8007950 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	77bb      	strb	r3, [r7, #30]
        break;
 800794e:	bf00      	nop
    }

    if (pclk != 0U)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	085a      	lsrs	r2, r3, #1
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	441a      	add	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	b29b      	uxth	r3, r3
 800796a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d908      	bls.n	8007984 <UART_SetConfig+0x238>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007978:	d204      	bcs.n	8007984 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	e001      	b.n	8007988 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007994:	7fbb      	ldrb	r3, [r7, #30]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	efff69f3 	.word	0xefff69f3
 80079a4:	40013800 	.word	0x40013800
 80079a8:	40021000 	.word	0x40021000
 80079ac:	40004400 	.word	0x40004400
 80079b0:	40004800 	.word	0x40004800
 80079b4:	007a1200 	.word	0x007a1200

080079b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01a      	beq.n	8007ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab6:	d10a      	bne.n	8007ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b0c:	f7fa feb8 	bl	8002880 <HAL_GetTick>
 8007b10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d10e      	bne.n	8007b3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f82d 	bl	8007b8e <UART_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e023      	b.n	8007b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d10e      	bne.n	8007b6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f817 	bl	8007b8e <UART_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e00d      	b.n	8007b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b09c      	sub	sp, #112	; 0x70
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9e:	e0a5      	b.n	8007cec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	f000 80a1 	beq.w	8007cec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007baa:	f7fa fe69 	bl	8002880 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d302      	bcc.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d13e      	bne.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007be0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007be4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e6      	bne.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	663b      	str	r3, [r7, #96]	; 0x60
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c12:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e5      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e067      	b.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d04f      	beq.n	8007cec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c5a:	d147      	bne.n	8007cec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
 8007c86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e6      	bne.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cb8:	623a      	str	r2, [r7, #32]
 8007cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	69f9      	ldr	r1, [r7, #28]
 8007cbe:	6a3a      	ldr	r2, [r7, #32]
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e5      	bne.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e010      	b.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69da      	ldr	r2, [r3, #28]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2300      	movne	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	f43f af4a 	beq.w	8007ba0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3770      	adds	r7, #112	; 0x70
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <__errno>:
 8007d18:	4b01      	ldr	r3, [pc, #4]	; (8007d20 <__errno+0x8>)
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000018 	.word	0x20000018

08007d24 <__libc_init_array>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4d0d      	ldr	r5, [pc, #52]	; (8007d5c <__libc_init_array+0x38>)
 8007d28:	4c0d      	ldr	r4, [pc, #52]	; (8007d60 <__libc_init_array+0x3c>)
 8007d2a:	1b64      	subs	r4, r4, r5
 8007d2c:	10a4      	asrs	r4, r4, #2
 8007d2e:	2600      	movs	r6, #0
 8007d30:	42a6      	cmp	r6, r4
 8007d32:	d109      	bne.n	8007d48 <__libc_init_array+0x24>
 8007d34:	4d0b      	ldr	r5, [pc, #44]	; (8007d64 <__libc_init_array+0x40>)
 8007d36:	4c0c      	ldr	r4, [pc, #48]	; (8007d68 <__libc_init_array+0x44>)
 8007d38:	f000 f8da 	bl	8007ef0 <_init>
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	10a4      	asrs	r4, r4, #2
 8007d40:	2600      	movs	r6, #0
 8007d42:	42a6      	cmp	r6, r4
 8007d44:	d105      	bne.n	8007d52 <__libc_init_array+0x2e>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4c:	4798      	blx	r3
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7ee      	b.n	8007d30 <__libc_init_array+0xc>
 8007d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d56:	4798      	blx	r3
 8007d58:	3601      	adds	r6, #1
 8007d5a:	e7f2      	b.n	8007d42 <__libc_init_array+0x1e>
 8007d5c:	08007f50 	.word	0x08007f50
 8007d60:	08007f50 	.word	0x08007f50
 8007d64:	08007f50 	.word	0x08007f50
 8007d68:	08007f54 	.word	0x08007f54

08007d6c <malloc>:
 8007d6c:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <malloc+0xc>)
 8007d6e:	4601      	mov	r1, r0
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	f000 b82b 	b.w	8007dcc <_malloc_r>
 8007d76:	bf00      	nop
 8007d78:	20000018 	.word	0x20000018

08007d7c <memset>:
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <sbrk_aligned>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	4e0e      	ldr	r6, [pc, #56]	; (8007dc8 <sbrk_aligned+0x3c>)
 8007d90:	460c      	mov	r4, r1
 8007d92:	6831      	ldr	r1, [r6, #0]
 8007d94:	4605      	mov	r5, r0
 8007d96:	b911      	cbnz	r1, 8007d9e <sbrk_aligned+0x12>
 8007d98:	f000 f88c 	bl	8007eb4 <_sbrk_r>
 8007d9c:	6030      	str	r0, [r6, #0]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f887 	bl	8007eb4 <_sbrk_r>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d00a      	beq.n	8007dc0 <sbrk_aligned+0x34>
 8007daa:	1cc4      	adds	r4, r0, #3
 8007dac:	f024 0403 	bic.w	r4, r4, #3
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d007      	beq.n	8007dc4 <sbrk_aligned+0x38>
 8007db4:	1a21      	subs	r1, r4, r0
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f87c 	bl	8007eb4 <_sbrk_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d101      	bne.n	8007dc4 <sbrk_aligned+0x38>
 8007dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	20000550 	.word	0x20000550

08007dcc <_malloc_r>:
 8007dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd0:	1ccd      	adds	r5, r1, #3
 8007dd2:	f025 0503 	bic.w	r5, r5, #3
 8007dd6:	3508      	adds	r5, #8
 8007dd8:	2d0c      	cmp	r5, #12
 8007dda:	bf38      	it	cc
 8007ddc:	250c      	movcc	r5, #12
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	4607      	mov	r7, r0
 8007de2:	db01      	blt.n	8007de8 <_malloc_r+0x1c>
 8007de4:	42a9      	cmp	r1, r5
 8007de6:	d905      	bls.n	8007df4 <_malloc_r+0x28>
 8007de8:	230c      	movs	r3, #12
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	2600      	movs	r6, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df4:	4e2e      	ldr	r6, [pc, #184]	; (8007eb0 <_malloc_r+0xe4>)
 8007df6:	f000 f86d 	bl	8007ed4 <__malloc_lock>
 8007dfa:	6833      	ldr	r3, [r6, #0]
 8007dfc:	461c      	mov	r4, r3
 8007dfe:	bb34      	cbnz	r4, 8007e4e <_malloc_r+0x82>
 8007e00:	4629      	mov	r1, r5
 8007e02:	4638      	mov	r0, r7
 8007e04:	f7ff ffc2 	bl	8007d8c <sbrk_aligned>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	d14d      	bne.n	8007eaa <_malloc_r+0xde>
 8007e0e:	6834      	ldr	r4, [r6, #0]
 8007e10:	4626      	mov	r6, r4
 8007e12:	2e00      	cmp	r6, #0
 8007e14:	d140      	bne.n	8007e98 <_malloc_r+0xcc>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	eb04 0803 	add.w	r8, r4, r3
 8007e20:	f000 f848 	bl	8007eb4 <_sbrk_r>
 8007e24:	4580      	cmp	r8, r0
 8007e26:	d13a      	bne.n	8007e9e <_malloc_r+0xd2>
 8007e28:	6821      	ldr	r1, [r4, #0]
 8007e2a:	3503      	adds	r5, #3
 8007e2c:	1a6d      	subs	r5, r5, r1
 8007e2e:	f025 0503 	bic.w	r5, r5, #3
 8007e32:	3508      	adds	r5, #8
 8007e34:	2d0c      	cmp	r5, #12
 8007e36:	bf38      	it	cc
 8007e38:	250c      	movcc	r5, #12
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f7ff ffa5 	bl	8007d8c <sbrk_aligned>
 8007e42:	3001      	adds	r0, #1
 8007e44:	d02b      	beq.n	8007e9e <_malloc_r+0xd2>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	442b      	add	r3, r5
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	e00e      	b.n	8007e6c <_malloc_r+0xa0>
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	1b52      	subs	r2, r2, r5
 8007e52:	d41e      	bmi.n	8007e92 <_malloc_r+0xc6>
 8007e54:	2a0b      	cmp	r2, #11
 8007e56:	d916      	bls.n	8007e86 <_malloc_r+0xba>
 8007e58:	1961      	adds	r1, r4, r5
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	6025      	str	r5, [r4, #0]
 8007e5e:	bf18      	it	ne
 8007e60:	6059      	strne	r1, [r3, #4]
 8007e62:	6863      	ldr	r3, [r4, #4]
 8007e64:	bf08      	it	eq
 8007e66:	6031      	streq	r1, [r6, #0]
 8007e68:	5162      	str	r2, [r4, r5]
 8007e6a:	604b      	str	r3, [r1, #4]
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f104 060b 	add.w	r6, r4, #11
 8007e72:	f000 f835 	bl	8007ee0 <__malloc_unlock>
 8007e76:	f026 0607 	bic.w	r6, r6, #7
 8007e7a:	1d23      	adds	r3, r4, #4
 8007e7c:	1af2      	subs	r2, r6, r3
 8007e7e:	d0b6      	beq.n	8007dee <_malloc_r+0x22>
 8007e80:	1b9b      	subs	r3, r3, r6
 8007e82:	50a3      	str	r3, [r4, r2]
 8007e84:	e7b3      	b.n	8007dee <_malloc_r+0x22>
 8007e86:	6862      	ldr	r2, [r4, #4]
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	bf0c      	ite	eq
 8007e8c:	6032      	streq	r2, [r6, #0]
 8007e8e:	605a      	strne	r2, [r3, #4]
 8007e90:	e7ec      	b.n	8007e6c <_malloc_r+0xa0>
 8007e92:	4623      	mov	r3, r4
 8007e94:	6864      	ldr	r4, [r4, #4]
 8007e96:	e7b2      	b.n	8007dfe <_malloc_r+0x32>
 8007e98:	4634      	mov	r4, r6
 8007e9a:	6876      	ldr	r6, [r6, #4]
 8007e9c:	e7b9      	b.n	8007e12 <_malloc_r+0x46>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	603b      	str	r3, [r7, #0]
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	f000 f81c 	bl	8007ee0 <__malloc_unlock>
 8007ea8:	e7a1      	b.n	8007dee <_malloc_r+0x22>
 8007eaa:	6025      	str	r5, [r4, #0]
 8007eac:	e7de      	b.n	8007e6c <_malloc_r+0xa0>
 8007eae:	bf00      	nop
 8007eb0:	2000054c 	.word	0x2000054c

08007eb4 <_sbrk_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d06      	ldr	r5, [pc, #24]	; (8007ed0 <_sbrk_r+0x1c>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	f7f9 ffc0 	bl	8001e44 <_sbrk>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_sbrk_r+0x1a>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_sbrk_r+0x1a>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	20000554 	.word	0x20000554

08007ed4 <__malloc_lock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__malloc_lock+0x8>)
 8007ed6:	f000 b809 	b.w	8007eec <__retarget_lock_acquire_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000558 	.word	0x20000558

08007ee0 <__malloc_unlock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__malloc_unlock+0x8>)
 8007ee2:	f000 b804 	b.w	8007eee <__retarget_lock_release_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	20000558 	.word	0x20000558

08007eec <__retarget_lock_acquire_recursive>:
 8007eec:	4770      	bx	lr

08007eee <__retarget_lock_release_recursive>:
 8007eee:	4770      	bx	lr

08007ef0 <_init>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr

08007efc <_fini>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr
