
Clover_LV_Shock_Sensors_F334R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007b90  08007b90  00017b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd8  08007bd8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007bd8  08007bd8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bd8  08007bd8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000004a8  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000520  20000520  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019794  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e63  00000000  00000000  0003983c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001380  00000000  00000000  0003ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a53  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e419  00000000  00000000  000639db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce187  00000000  00000000  00081df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ff7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ac8  00000000  00000000  0014ffcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b74 	.word	0x08007b74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08007b74 	.word	0x08007b74

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <GAS_getHclkClk>:
/*
 * uint32_t GAS_getHclkClk(void)
 * Return: HCLK frequency in Hz
 */
uint32_t GAS_getHclkClk(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
	//Get SYSCLK in Hz.
	uint32_t sysclk_freq = HAL_RCC_GetSysClockFreq();
 8000aba:	f005 f8e3 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8000abe:	6238      	str	r0, [r7, #32]
	//Get AHB prescaler.
	uint32_t ahb_prescaler;
	uint32_t ahbClkDiv;
	uint32_t flash_latency;
	RCC_ClkInitTypeDef clk_init_struct;
	HAL_RCC_GetClockConfig(&clk_init_struct, &flash_latency);
 8000ac0:	f107 0214 	add.w	r2, r7, #20
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 f995 	bl	8005df8 <HAL_RCC_GetClockConfig>

	ahbClkDiv = clk_init_struct.AHBCLKDivider;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	61fb      	str	r3, [r7, #28]
	switch(ahbClkDiv)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	2bf0      	cmp	r3, #240	; 0xf0
 8000ad6:	d046      	beq.n	8000b66 <GAS_getHclkClk+0xb2>
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2bf0      	cmp	r3, #240	; 0xf0
 8000adc:	d847      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2be0      	cmp	r3, #224	; 0xe0
 8000ae2:	d03c      	beq.n	8000b5e <GAS_getHclkClk+0xaa>
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	2be0      	cmp	r3, #224	; 0xe0
 8000ae8:	d841      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	2bd0      	cmp	r3, #208	; 0xd0
 8000aee:	d033      	beq.n	8000b58 <GAS_getHclkClk+0xa4>
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	2bd0      	cmp	r3, #208	; 0xd0
 8000af4:	d83b      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	2bc0      	cmp	r3, #192	; 0xc0
 8000afa:	d02a      	beq.n	8000b52 <GAS_getHclkClk+0x9e>
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	2bc0      	cmp	r3, #192	; 0xc0
 8000b00:	d835      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	2bb0      	cmp	r3, #176	; 0xb0
 8000b06:	d021      	beq.n	8000b4c <GAS_getHclkClk+0x98>
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2bb0      	cmp	r3, #176	; 0xb0
 8000b0c:	d82f      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	2ba0      	cmp	r3, #160	; 0xa0
 8000b12:	d018      	beq.n	8000b46 <GAS_getHclkClk+0x92>
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2ba0      	cmp	r3, #160	; 0xa0
 8000b18:	d829      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2b90      	cmp	r3, #144	; 0x90
 8000b1e:	d00f      	beq.n	8000b40 <GAS_getHclkClk+0x8c>
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b90      	cmp	r3, #144	; 0x90
 8000b24:	d823      	bhi.n	8000b6e <GAS_getHclkClk+0xba>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <GAS_getHclkClk+0x80>
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2b80      	cmp	r3, #128	; 0x80
 8000b30:	d003      	beq.n	8000b3a <GAS_getHclkClk+0x86>
 8000b32:	e01c      	b.n	8000b6e <GAS_getHclkClk+0xba>
	{
		case RCC_SYSCLK_DIV1:
			ahb_prescaler = 1; break;
 8000b34:	2301      	movs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
 8000b38:	e019      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV2:
			ahb_prescaler = 2; break;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3e:	e016      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV4:
			ahb_prescaler = 4; break;
 8000b40:	2304      	movs	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
 8000b44:	e013      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV8:
			ahb_prescaler = 8; break;
 8000b46:	2308      	movs	r3, #8
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	e010      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV16:
			ahb_prescaler = 16; break;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b50:	e00d      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV64:
			ahb_prescaler = 64; break;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
 8000b56:	e00a      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV128:
			ahb_prescaler = 128; break;
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	e007      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV256:
			ahb_prescaler = 256; break;
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
 8000b64:	e003      	b.n	8000b6e <GAS_getHclkClk+0xba>
		case RCC_SYSCLK_DIV512:
			ahb_prescaler = 512; break;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6c:	bf00      	nop
	}

	uint32_t hclk_freq = sysclk_freq / ahb_prescaler;
 8000b6e:	6a3a      	ldr	r2, [r7, #32]
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	61bb      	str	r3, [r7, #24]

	return hclk_freq;
 8000b78:	69bb      	ldr	r3, [r7, #24]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <GAS_Adc_init>:
static void GAS_Adc_startAdc(GAS_Adc_adc_t *adc);

SensorHubADC_t SensorHubADC;

void GAS_Adc_init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

#ifdef __USE_ADC1__
		GAS_Adc_adc_t *adc1 = &GAS_Adc_adc1;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <GAS_Adc_init+0x44>)
 8000b8c:	607b      	str	r3, [r7, #4]

		adc1->hadc = &hadc1;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <GAS_Adc_init+0x48>)
 8000b92:	601a      	str	r2, [r3, #0]

		adc1->dataLength = ((adc1->hadc->Instance->SQR1)>>20U)+1;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	0d1b      	lsrs	r3, r3, #20
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	605a      	str	r2, [r3, #4]
		adc1->data = (uint32_t*)malloc(adc1->dataLength*sizeof(uint32_t));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 ff20 	bl	80079f0 <malloc>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

		GAS_Adc_startAdc(adc1);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f809 	bl	8000bd0 <GAS_Adc_startAdc>
		adc2->dataLength = ((adc2->hadc->Instance->SQR1)>>20U)+1;
		adc2->data = (uint32_t*)malloc(adc2->dataLength*sizeof(uint32_t));

		GAS_Adc_startAdc(adc2);
#endif;
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000094 	.word	0x20000094
 8000bcc:	2000011c 	.word	0x2000011c

08000bd0 <GAS_Adc_startAdc>:



//TODO: Non DMA functions
static void GAS_Adc_startAdc(GAS_Adc_adc_t *adc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_Start_DMA(adc->hadc, adc->data, adc->dataLength) != HAL_OK)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6899      	ldr	r1, [r3, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	461a      	mov	r2, r3
 8000be6:	f001 fe83 	bl	80028f0 <HAL_ADC_Start_DMA>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <GAS_Adc_startAdc+0x24>
	{
		GAS_Adc_initErrorTrap();
 8000bf0:	f000 f804 	bl	8000bfc <GAS_Adc_initErrorTrap>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <GAS_Adc_initErrorTrap>:

static void GAS_Adc_initErrorTrap(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
	__disable_irq();
	while(1);
 8000c04:	e7fe      	b.n	8000c04 <GAS_Adc_initErrorTrap+0x8>
	...

08000c08 <GAS_Adc_getValue>:
}

void GAS_Adc_getValue(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
#ifdef __USE_ADC1__
	SensorHubADC.ADC1_IN1 = GAS_Adc_adc1.data[0];
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <GAS_Adc_getValue+0x44>)
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <GAS_Adc_getValue+0x48>)
 8000c16:	801a      	strh	r2, [r3, #0]
	SensorHubADC.ADC1_IN2 = GAS_Adc_adc1.data[1];
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <GAS_Adc_getValue+0x44>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <GAS_Adc_getValue+0x48>)
 8000c24:	805a      	strh	r2, [r3, #2]
	SensorHubADC.ADC1_IN3 = GAS_Adc_adc1.data[2];
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <GAS_Adc_getValue+0x44>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <GAS_Adc_getValue+0x48>)
 8000c32:	809a      	strh	r2, [r3, #4]
	SensorHubADC.ADC1_IN4 = GAS_Adc_adc1.data[3];
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <GAS_Adc_getValue+0x44>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	330c      	adds	r3, #12
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <GAS_Adc_getValue+0x48>)
 8000c40:	80da      	strh	r2, [r3, #6]
	SensorHubADC.ADC2_IN1 = GAS_Adc_adc2.data[0];
	SensorHubADC.ADC2_IN2 = GAS_Adc_adc2.data[1];
	SensorHubADC.ADC2_IN3 = GAS_Adc_adc2.data[2];
	SensorHubADC.ADC2_IN4 = GAS_Adc_adc2.data[3];
#endif
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20000094 	.word	0x20000094
 8000c50:	200000a0 	.word	0x200000a0

08000c54 <GAS_Can_txSetting>:
#endif
uint32_t STM32_msgWSS_ID = 0x00334B03;
#endif

void GAS_Can_txSetting(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
#ifdef __USE_ADC1__
	canTxHeader_ADC1.ExtId = STM32_msgADC1_ID;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <GAS_Can_txSetting+0x44>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <GAS_Can_txSetting+0x48>)
 8000c5e:	6053      	str	r3, [r2, #4]
	canTxHeader_ADC1.IDE = CAN_ID_EXT;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <GAS_Can_txSetting+0x48>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	609a      	str	r2, [r3, #8]
	canTxHeader_ADC1.RTR = CAN_RTR_DATA;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <GAS_Can_txSetting+0x48>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
	canTxHeader_ADC1.DLC = 8;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <GAS_Can_txSetting+0x48>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	611a      	str	r2, [r3, #16]
	canTxHeader_ADC2.ExtId = STM32_msgADC2_ID;
	canTxHeader_ADC2.IDE = CAN_ID_EXT;
	canTxHeader_ADC2.RTR = CAN_RTR_DATA;
	canTxHeader_ADC2.DLC = 8;
#endif
	canTxHeader_WSS.ExtId = STM32_msgWSS_ID;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <GAS_Can_txSetting+0x4c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <GAS_Can_txSetting+0x50>)
 8000c78:	6053      	str	r3, [r2, #4]
	canTxHeader_WSS.IDE = CAN_ID_EXT;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <GAS_Can_txSetting+0x50>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	609a      	str	r2, [r3, #8]
	canTxHeader_WSS.RTR = CAN_RTR_DATA;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <GAS_Can_txSetting+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
	canTxHeader_WSS.DLC = 8;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <GAS_Can_txSetting+0x50>)
 8000c88:	2208      	movs	r2, #8
 8000c8a:	611a      	str	r2, [r3, #16]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	200000a8 	.word	0x200000a8
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	200000c8 	.word	0x200000c8

08000ca8 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	//No rx required.
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	GAS_Can_txSetting();
 8000cbc:	f7ff ffca 	bl	8000c54 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8000cc0:	f7ff fff2 	bl	8000ca8 <GAS_Can_rxSetting>
	if(HAL_CAN_Start(&hcan) != HAL_OK) {
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <GAS_Can_init+0x34>)
 8000cc6:	f002 fc9e 	bl	8003606 <HAL_CAN_Start>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <GAS_Can_init+0x1c>
		Error_Handler();
 8000cd0:	f000 fea6 	bl	8001a20 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <GAS_Can_init+0x34>)
 8000cd8:	f002 fde9 	bl	80038ae <HAL_CAN_ActivateNotification>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <GAS_Can_init+0x2e>
	{
		Error_Handler();
 8000ce2:	f000 fe9d 	bl	8001a20 <Error_Handler>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000248 	.word	0x20000248

08000cf0 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	//Modify them according to GAS_BuildConfig.h
	stm32_msgWSS.B.WSS1_RPM = TickToRPM_TIM2(SensorHubPWM.Interval2);
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <GAS_Can_sendMessage+0x100>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f8bb 	bl	8000e74 <TickToRPM_TIM2>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000d04:	801a      	strh	r2, [r3, #0]
	stm32_msgWSS.B.WSS2_RPM = TickToRPM_TIM3(SensorHubPWM.Interval3);
 8000d06:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <GAS_Can_sendMessage+0x100>)
 8000d08:	8a1b      	ldrh	r3, [r3, #16]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f8ee 	bl	8000eec <TickToRPM_TIM3>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000d16:	805a      	strh	r2, [r3, #2]
		stm32_msgWSS.B.dutyFlag.S.TIM1_ERROR = 0;
	}
#endif

#ifdef __USE_TIM2__
	if(SensorHubPWM.DutyRatio2 > dutyUpperBound || SensorHubPWM.DutyRatio2 < dutyLowerBound) {
 8000d18:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <GAS_Can_sendMessage+0x100>)
 8000d1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <GAS_Can_sendMessage+0x108>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fe9c 	bl	8000a60 <__aeabi_dcmpgt>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10a      	bne.n	8000d44 <GAS_Can_sendMessage+0x54>
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <GAS_Can_sendMessage+0x100>)
 8000d30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <GAS_Can_sendMessage+0x10c>)
 8000d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3a:	f7ff fe73 	bl	8000a24 <__aeabi_dcmplt>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <GAS_Can_sendMessage+0x60>
		stm32_msgWSS.B.dutyFlag.S.TIM2_ERROR = 1;
 8000d44:	4a2b      	ldr	r2, [pc, #172]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000d46:	7913      	ldrb	r3, [r2, #4]
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	7113      	strb	r3, [r2, #4]
 8000d4e:	e004      	b.n	8000d5a <GAS_Can_sendMessage+0x6a>
	} else{
		stm32_msgWSS.B.dutyFlag.S.TIM2_ERROR = 0;
 8000d50:	4a28      	ldr	r2, [pc, #160]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000d52:	7913      	ldrb	r3, [r2, #4]
 8000d54:	f36f 0341 	bfc	r3, #1, #1
 8000d58:	7113      	strb	r3, [r2, #4]
	}
#endif

#ifdef __USE_TIM3__
	if(SensorHubPWM.DutyRatio3 > dutyUpperBound || SensorHubPWM.DutyRatio3 < dutyLowerBound) {
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <GAS_Can_sendMessage+0x100>)
 8000d5c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <GAS_Can_sendMessage+0x108>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f7ff fe7b 	bl	8000a60 <__aeabi_dcmpgt>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10a      	bne.n	8000d86 <GAS_Can_sendMessage+0x96>
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <GAS_Can_sendMessage+0x100>)
 8000d72:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <GAS_Can_sendMessage+0x10c>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fe52 	bl	8000a24 <__aeabi_dcmplt>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <GAS_Can_sendMessage+0xa2>
		stm32_msgWSS.B.dutyFlag.S.TIM3_ERROR = 1;
 8000d86:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000d88:	7913      	ldrb	r3, [r2, #4]
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	7113      	strb	r3, [r2, #4]
 8000d90:	e004      	b.n	8000d9c <GAS_Can_sendMessage+0xac>
	} else{
		stm32_msgWSS.B.dutyFlag.S.TIM3_ERROR = 0;
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000d94:	7913      	ldrb	r3, [r2, #4]
 8000d96:	f36f 0382 	bfc	r3, #2, #1
 8000d9a:	7113      	strb	r3, [r2, #4]
	} else{
		stm32_msgWSS.B.dutyFlag.S.TIM15_ERROR = 0;
	}
#endif

	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <GAS_Can_sendMessage+0x110>)
 8000d9e:	f002 fd51 	bl	8003844 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <GAS_Can_sendMessage+0x114>)
 8000da6:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader_WSS, &stm32_msgWSS.TxData[0], &TxMailBox);
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <GAS_Can_sendMessage+0x114>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <GAS_Can_sendMessage+0x104>)
 8000dac:	4916      	ldr	r1, [pc, #88]	; (8000e08 <GAS_Can_sendMessage+0x118>)
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <GAS_Can_sendMessage+0x110>)
 8000db0:	f002 fc6d 	bl	800368e <HAL_CAN_AddTxMessage>
	else{
		HAL_GPIO_WritePin(GPIOB, LED01_Pin, GPIO_PIN_RESET);
	}*/

#ifdef __USE_ADC1__
	stm32_msgADC1.B.IN1 = SensorHubADC.ADC1_IN1;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <GAS_Can_sendMessage+0x11c>)
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <GAS_Can_sendMessage+0x120>)
 8000dba:	801a      	strh	r2, [r3, #0]
	stm32_msgADC1.B.IN2 = SensorHubADC.ADC1_IN2;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <GAS_Can_sendMessage+0x11c>)
 8000dbe:	885a      	ldrh	r2, [r3, #2]
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <GAS_Can_sendMessage+0x120>)
 8000dc2:	805a      	strh	r2, [r3, #2]
	stm32_msgADC1.B.IN3 = SensorHubADC.ADC1_IN3;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <GAS_Can_sendMessage+0x11c>)
 8000dc6:	889a      	ldrh	r2, [r3, #4]
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <GAS_Can_sendMessage+0x120>)
 8000dca:	809a      	strh	r2, [r3, #4]
	stm32_msgADC1.B.IN4 = SensorHubADC.ADC1_IN4;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <GAS_Can_sendMessage+0x11c>)
 8000dce:	88da      	ldrh	r2, [r3, #6]
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <GAS_Can_sendMessage+0x120>)
 8000dd2:	80da      	strh	r2, [r3, #6]
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000dd4:	480a      	ldr	r0, [pc, #40]	; (8000e00 <GAS_Can_sendMessage+0x110>)
 8000dd6:	f002 fd35 	bl	8003844 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <GAS_Can_sendMessage+0x114>)
 8000dde:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader_ADC1, &stm32_msgADC1.TxData[0], &TxMailBox);
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <GAS_Can_sendMessage+0x114>)
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <GAS_Can_sendMessage+0x120>)
 8000de4:	490b      	ldr	r1, [pc, #44]	; (8000e14 <GAS_Can_sendMessage+0x124>)
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <GAS_Can_sendMessage+0x110>)
 8000de8:	f002 fc51 	bl	800368e <HAL_CAN_AddTxMessage>
	stm32_msgADC2.B.IN3 = SensorHubADC.ADC2_IN3;
	stm32_msgADC2.B.IN4 = SensorHubADC.ADC2_IN4;
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader_ADC2, &stm32_msgADC2.TxData[0], &TxMailBox);
#endif
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000f0 	.word	0x200000f0
 8000df4:	200000e0 	.word	0x200000e0
 8000df8:	08007b98 	.word	0x08007b98
 8000dfc:	08007b90 	.word	0x08007b90
 8000e00:	20000248 	.word	0x20000248
 8000e04:	200000e8 	.word	0x200000e8
 8000e08:	200000c8 	.word	0x200000c8
 8000e0c:	200000a0 	.word	0x200000a0
 8000e10:	200000c0 	.word	0x200000c0
 8000e14:	200000a8 	.word	0x200000a8

08000e18 <GAS_Pwm_init>:

const double dutyLowerBound = 0.0;
const double dutyUpperBound = 1.0;

void GAS_Pwm_init()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
#ifdef __USE_TIM1__
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); //main channel
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2); //indirect channel
#endif
#ifdef __USE_TIM2__
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //main channel
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <GAS_Pwm_init+0x28>)
 8000e20:	f005 faf2 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2); //indirect channel
 8000e24:	2104      	movs	r1, #4
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <GAS_Pwm_init+0x28>)
 8000e28:	f005 fa06 	bl	8006238 <HAL_TIM_IC_Start>
#endif
#ifdef __USE_TIM3__
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //main channel
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <GAS_Pwm_init+0x2c>)
 8000e30:	f005 faea 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2); //indirect channel
 8000e34:	2104      	movs	r1, #4
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <GAS_Pwm_init+0x2c>)
 8000e38:	f005 f9fe 	bl	8006238 <HAL_TIM_IC_Start>
#endif
#ifdef __USE_TIM15__
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1); //main channel
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2); //indirect channel
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000320 	.word	0x20000320
 8000e44:	2000036c 	.word	0x2000036c

08000e48 <PCLK1TIM>:
 * Quite a surprise, stock HAL does not provide a function to look up the clock frequency for timer peripherals.
 * This is a user implemented function that returns "APB1 timer clocks (MHz)" field set on the .ioc configuration.
 * TIM 2,3,6,7 run on this clock.
 * Checkout associated JIRA project for design intentions.
 * */
uint32_t PCLK1TIM(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint32_t PCLK1 = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f004 ff8f 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8000e52:	6078      	str	r0, [r7, #4]

	if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <PCLK1TIM+0x28>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <PCLK1TIM+0x1c>
	{
		return PCLK1;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	e001      	b.n	8000e68 <PCLK1TIM+0x20>
	}
	else
	{
		return (2 * PCLK1);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	005b      	lsls	r3, r3, #1
	}
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000

08000e74 <TickToRPM_TIM2>:
 *
 * LL_TIM_GetPrescaler seems to provide the exactly desired value, that is, the TIMx_PSC in effect, but this method belongs to low-layer files, not HAL.
 * But I do not want to harm the level of abstraction for this project, so I am now just settling with this design.
 * */
uint16_t TickToRPM_TIM2(uint32_t Interval)
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	return (2.5/(((double)Interval * (htim2.Init.Prescaler+1))/PCLK1TIM()));
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fae5 	bl	800044c <__aeabi_ui2d>
 8000e82:	4604      	mov	r4, r0
 8000e84:	460d      	mov	r5, r1
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <TickToRPM_TIM2+0x70>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fadd 	bl	800044c <__aeabi_ui2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4620      	mov	r0, r4
 8000e98:	4629      	mov	r1, r5
 8000e9a:	f7ff fb51 	bl	8000540 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4614      	mov	r4, r2
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	f7ff ffcf 	bl	8000e48 <PCLK1TIM>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff facd 	bl	800044c <__aeabi_ui2d>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	4629      	mov	r1, r5
 8000eba:	f7ff fc6b 	bl	8000794 <__aeabi_ddiv>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <TickToRPM_TIM2+0x74>)
 8000ec8:	f7ff fc64 	bl	8000794 <__aeabi_ddiv>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fdce 	bl	8000a74 <__aeabi_d2uiz>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29b      	uxth	r3, r3
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee4:	20000320 	.word	0x20000320
 8000ee8:	40040000 	.word	0x40040000

08000eec <TickToRPM_TIM3>:
 * TIM3 - 16bit Counter.
 *
 * Ditto
 * */
uint16_t TickToRPM_TIM3(uint16_t Interval)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	return (2.5/(((double)Interval * (htim3.Init.Prescaler+1))/PCLK1TIM()));
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff faa7 	bl	800044c <__aeabi_ui2d>
 8000efe:	4604      	mov	r4, r0
 8000f00:	460d      	mov	r5, r1
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <TickToRPM_TIM3+0x74>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa9f 	bl	800044c <__aeabi_ui2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	4629      	mov	r1, r5
 8000f16:	f7ff fb13 	bl	8000540 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4614      	mov	r4, r2
 8000f20:	461d      	mov	r5, r3
 8000f22:	f7ff ff91 	bl	8000e48 <PCLK1TIM>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa8f 	bl	800044c <__aeabi_ui2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4620      	mov	r0, r4
 8000f34:	4629      	mov	r1, r5
 8000f36:	f7ff fc2d 	bl	8000794 <__aeabi_ddiv>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <TickToRPM_TIM3+0x78>)
 8000f44:	f7ff fc26 	bl	8000794 <__aeabi_ddiv>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fd90 	bl	8000a74 <__aeabi_d2uiz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29b      	uxth	r3, r3
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f60:	2000036c 	.word	0x2000036c
 8000f64:	40040000 	.word	0x40040000

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ffc2 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <GAS_Scheduler_init>:
void GAS_Scheduler(void);

int b;

void GAS_Scheduler_init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 * Note:
 * An alias for GAS_getHclkClk().
 */
GAS_INLINE uint32_t GAS_getSystemCoreClock(void)
{
	return GAS_getHclkClk();
 8001006:	f7ff fd55 	bl	8000ab4 <GAS_getHclkClk>
 800100a:	4603      	mov	r3, r0
	uint32_t systemClockFreq = GAS_getSystemCoreClock(); //HCLK in HZ
 800100c:	607b      	str	r3, [r7, #4]

	SysTick_Config(systemClockFreq/1000);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <GAS_Scheduler_init+0x38>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	099b      	lsrs	r3, r3, #6
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffcf 	bl	8000fbc <SysTick_Config>

	//GAS_Vadc_init(); //실행 중 reset
	GAS_Adc_init(); //실행 중 reset
 800101e:	f7ff fdb1 	bl	8000b84 <GAS_Adc_init>
	GAS_Pwm_init();
 8001022:	f7ff fef9 	bl	8000e18 <GAS_Pwm_init>
	GAS_Can_init();
 8001026:	f7ff fe47 	bl	8000cb8 <GAS_Can_init>
	gTask.flag_initialized = True;
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <GAS_Scheduler_init+0x3c>)
 800102c:	2201      	movs	r2, #1
 800102e:	711a      	strb	r2, [r3, #4]

}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	10624dd3 	.word	0x10624dd3
 800103c:	20000114 	.word	0x20000114

08001040 <GAS_Scheduler_taskCounter_1ms>:

void GAS_Scheduler_taskCounter_1ms(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	GAS_Adc_getValue();
 8001044:	f7ff fde0 	bl	8000c08 <GAS_Adc_getValue>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	GAS_Can_sendMessage();
 8001050:	f7ff fe4e 	bl	8000cf0 <GAS_Can_sendMessage>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	// HAL_GPIO_WritePin(GPIOB, LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_TogglePin(GPIOB, LED00_Pin/*|LED02_Pin|LED01_Pin|LED00_Pin*/);
	//HAL_GPIO_TogglePin(GPIOC, LED10_Pin|LED11_Pin);

	//LED03이 Reset LED
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <GAS_Scheduler_taskCounter_1000ms>:

void GAS_Scheduler_taskCounter_1000ms(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_SYSTICK_Callback>:

//Ref: https://jexe.tistory.com/4
void HAL_SYSTICK_Callback(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_SYSTICK_Callback+0x88>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_SYSTICK_Callback+0x88>)
 8001080:	6013      	str	r3, [r2, #0]
	gTask.flag_1ms = True;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_SYSTICK_Callback+0x8c>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
	if(gTimerCnt % 10 == 0)
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_SYSTICK_Callback+0x88>)
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_SYSTICK_Callback+0x90>)
 800108e:	fb83 2301 	smull	r2, r3, r3, r1
 8001092:	109a      	asrs	r2, r3, #2
 8001094:	17cb      	asrs	r3, r1, #31
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	1aca      	subs	r2, r1, r3
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d102      	bne.n	80010ac <HAL_SYSTICK_Callback+0x38>
	{
		gTask.flag_10ms = True;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_SYSTICK_Callback+0x8c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	705a      	strb	r2, [r3, #1]
	}
	if(gTimerCnt % 100 == 0)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_SYSTICK_Callback+0x88>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_SYSTICK_Callback+0x94>)
 80010b2:	fb83 1302 	smull	r1, r3, r3, r2
 80010b6:	1159      	asrs	r1, r3, #5
 80010b8:	17d3      	asrs	r3, r2, #31
 80010ba:	1acb      	subs	r3, r1, r3
 80010bc:	2164      	movs	r1, #100	; 0x64
 80010be:	fb01 f303 	mul.w	r3, r1, r3
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <HAL_SYSTICK_Callback+0x5a>
	{
		gTask.flag_100ms = True;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_SYSTICK_Callback+0x8c>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	709a      	strb	r2, [r3, #2]
	}
	if(gTimerCnt % 1000 == 0)
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_SYSTICK_Callback+0x88>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_SYSTICK_Callback+0x98>)
 80010d4:	fb83 1302 	smull	r1, r3, r3, r2
 80010d8:	1199      	asrs	r1, r3, #6
 80010da:	17d3      	asrs	r3, r2, #31
 80010dc:	1acb      	subs	r3, r1, r3
 80010de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <HAL_SYSTICK_Callback+0x7e>
	{
		gTask.flag_1000ms = True;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_SYSTICK_Callback+0x8c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	70da      	strb	r2, [r3, #3]
	}
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000110 	.word	0x20000110
 8001100:	20000114 	.word	0x20000114
 8001104:	66666667 	.word	0x66666667
 8001108:	51eb851f 	.word	0x51eb851f
 800110c:	10624dd3 	.word	0x10624dd3

08001110 <GAS_Scheduler>:

void GAS_Scheduler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	if(gTask.flag_1ms == True)
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <GAS_Scheduler+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d104      	bne.n	8001128 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <GAS_Scheduler+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 8001124:	f7ff ff8c 	bl	8001040 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <GAS_Scheduler+0x58>)
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d104      	bne.n	800113c <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <GAS_Scheduler+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 8001138:	f7ff ff88 	bl	800104c <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <GAS_Scheduler+0x58>)
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <GAS_Scheduler+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 800114c:	f7ff ff84 	bl	8001058 <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <GAS_Scheduler+0x58>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d104      	bne.n	8001164 <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <GAS_Scheduler+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 8001160:	f7ff ff81 	bl	8001066 <GAS_Scheduler_taskCounter_1000ms>
	}
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000114 	.word	0x20000114

0800116c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <MX_ADC1_Init+0x130>)
 8001190:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001194:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <MX_ADC1_Init+0x130>)
 8001198:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <MX_ADC1_Init+0x130>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a4:	4b3d      	ldr	r3, [pc, #244]	; (800129c <MX_ADC1_Init+0x130>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MX_ADC1_Init+0x130>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b0:	4b3a      	ldr	r3, [pc, #232]	; (800129c <MX_ADC1_Init+0x130>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <MX_ADC1_Init+0x130>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <MX_ADC1_Init+0x130>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <MX_ADC1_Init+0x130>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <MX_ADC1_Init+0x130>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <MX_ADC1_Init+0x130>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <MX_ADC1_Init+0x130>)
 80011da:	2204      	movs	r2, #4
 80011dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_ADC1_Init+0x130>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_ADC1_Init+0x130>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ea:	482c      	ldr	r0, [pc, #176]	; (800129c <MX_ADC1_Init+0x130>)
 80011ec:	f001 f9ee 	bl	80025cc <HAL_ADC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011f6:	f000 fc13 	bl	8001a20 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4825      	ldr	r0, [pc, #148]	; (800129c <MX_ADC1_Init+0x130>)
 8001206:	f001 ff0d 	bl	8003024 <HAL_ADCEx_MultiModeConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001210:	f000 fc06 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001214:	2301      	movs	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001218:	2301      	movs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001220:	2302      	movs	r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_ADC1_Init+0x130>)
 8001232:	f001 fc37 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800123c:	f000 fbf0 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001240:	2302      	movs	r3, #2
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001244:	2302      	movs	r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_ADC1_Init+0x130>)
 800124e:	f001 fc29 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001258:	f000 fbe2 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800125c:	2303      	movs	r3, #3
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001260:	2303      	movs	r3, #3
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_ADC1_Init+0x130>)
 800126a:	f001 fc1b 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001274:	f000 fbd4 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001278:	2304      	movs	r3, #4
 800127a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800127c:	2304      	movs	r3, #4
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_ADC1_Init+0x130>)
 8001286:	f001 fc0d 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001290:	f000 fbc6 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000011c 	.word	0x2000011c

080012a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012b8:	4a3c      	ldr	r2, [pc, #240]	; (80013ac <MX_ADC2_Init+0x10c>)
 80012ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012c4:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80012d0:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012f2:	2204      	movs	r2, #4
 80012f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_ADC2_Init+0x108>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_ADC2_Init+0x108>)
 8001300:	2204      	movs	r2, #4
 8001302:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <MX_ADC2_Init+0x108>)
 8001306:	2200      	movs	r2, #0
 8001308:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <MX_ADC2_Init+0x108>)
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001310:	4825      	ldr	r0, [pc, #148]	; (80013a8 <MX_ADC2_Init+0x108>)
 8001312:	f001 f95b 	bl	80025cc <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800131c:	f000 fb80 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001320:	2301      	movs	r3, #1
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001324:	2301      	movs	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	481a      	ldr	r0, [pc, #104]	; (80013a8 <MX_ADC2_Init+0x108>)
 800133e:	f001 fbb1 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001348:	f000 fb6a 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800134c:	2302      	movs	r3, #2
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001350:	2302      	movs	r3, #2
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_ADC2_Init+0x108>)
 800135a:	f001 fba3 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001364:	f000 fb5c 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001368:	2303      	movs	r3, #3
 800136a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800136c:	2303      	movs	r3, #3
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_ADC2_Init+0x108>)
 8001376:	f001 fb95 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001380:	f000 fb4e 	bl	8001a20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001384:	2304      	movs	r3, #4
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001388:	2304      	movs	r3, #4
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_ADC2_Init+0x108>)
 8001392:	f001 fb87 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800139c:	f000 fb40 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000016c 	.word	0x2000016c
 80013ac:	50000100 	.word	0x50000100

080013b0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d0:	d156      	bne.n	8001480 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_ADC_MspInit+0x190>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a59      	ldr	r2, [pc, #356]	; (8001540 <HAL_ADC_MspInit+0x190>)
 80013da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013dc:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_ADC_MspInit+0x190>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10b      	bne.n	80013fc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e4:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	4a56      	ldr	r2, [pc, #344]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6153      	str	r3, [r2, #20]
 80013f0:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_ADC_MspInit+0x194>)
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	6153      	str	r3, [r2, #20]
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_ADC_MspInit+0x194>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001414:	230f      	movs	r3, #15
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f002 ff47 	bl	80042bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800142e:	4b46      	ldr	r3, [pc, #280]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001430:	4a46      	ldr	r2, [pc, #280]	; (800154c <HAL_ADC_MspInit+0x19c>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_ADC_MspInit+0x198>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001446:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001454:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001458:	2220      	movs	r2, #32
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_ADC_MspInit+0x198>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001462:	4839      	ldr	r0, [pc, #228]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001464:	f002 fd93 	bl	8003f8e <HAL_DMA_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800146e:	f000 fad7 	bl	8001a20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a34      	ldr	r2, [pc, #208]	; (8001548 <HAL_ADC_MspInit+0x198>)
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
 8001478:	4a33      	ldr	r2, [pc, #204]	; (8001548 <HAL_ADC_MspInit+0x198>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800147e:	e05a      	b.n	8001536 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_ADC_MspInit+0x1a0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d155      	bne.n	8001536 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_ADC_MspInit+0x190>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <HAL_ADC_MspInit+0x190>)
 8001492:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_ADC_MspInit+0x190>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10b      	bne.n	80014b4 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_ADC_MspInit+0x194>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6153      	str	r3, [r2, #20]
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014be:	6153      	str	r3, [r2, #20]
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_ADC_MspInit+0x194>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014cc:	23f0      	movs	r3, #240	; 0xf0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f002 feeb 	bl	80042bc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_ADC_MspInit+0x1a8>)
 80014ea:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 8001500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001504:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 8001508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 8001510:	2220      	movs	r2, #32
 8001512:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 800151c:	f002 fd37 	bl	8003f8e <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8001526:	f000 fa7b 	bl	8001a20 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_ADC_MspInit+0x1a4>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000244 	.word	0x20000244
 8001544:	40021000 	.word	0x40021000
 8001548:	200001bc 	.word	0x200001bc
 800154c:	40020008 	.word	0x40020008
 8001550:	50000100 	.word	0x50000100
 8001554:	20000200 	.word	0x20000200
 8001558:	4002001c 	.word	0x4002001c

0800155c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_CAN_Init+0x64>)
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <MX_CAN_Init+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_CAN_Init+0x64>)
 8001568:	2206      	movs	r2, #6
 800156a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_CAN_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_CAN_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_CAN_Init+0x64>)
 800157a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800157e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_CAN_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_CAN_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_CAN_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_CAN_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_CAN_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_CAN_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_CAN_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_CAN_Init+0x64>)
 80015ac:	f001 ff30 	bl	8003410 <HAL_CAN_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80015b6:	f000 fa33 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000248 	.word	0x20000248
 80015c4:	40006400 	.word	0x40006400

080015c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_CAN_MspInit+0xa0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d139      	bne.n	800165e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_CAN_MspInit+0xa4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a1f      	ldr	r2, [pc, #124]	; (800166c <HAL_CAN_MspInit+0xa4>)
 80015f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_CAN_MspInit+0xa4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_CAN_MspInit+0xa4>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_CAN_MspInit+0xa4>)
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_CAN_MspInit+0xa4>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800161a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800162c:	2309      	movs	r3, #9
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f002 fe3f 	bl	80042bc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2014      	movs	r0, #20
 8001644:	f002 fc6d 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001648:	2014      	movs	r0, #20
 800164a:	f002 fc86 	bl	8003f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2015      	movs	r0, #21
 8001654:	f002 fc65 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001658:	2015      	movs	r0, #21
 800165a:	f002 fc7e 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40006400 	.word	0x40006400
 800166c:	40021000 	.word	0x40021000

08001670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_DMA_Init+0x48>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <MX_DMA_Init+0x48>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_DMA_Init+0x48>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	200b      	movs	r0, #11
 8001694:	f002 fc45 	bl	8003f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001698:	200b      	movs	r0, #11
 800169a:	f002 fc5e 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	200c      	movs	r0, #12
 80016a4:	f002 fc3d 	bl	8003f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016a8:	200c      	movs	r0, #12
 80016aa:	f002 fc56 	bl	8003f5a <HAL_NVIC_EnableIRQ>

}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000

080016bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <MX_GPIO_Init+0xe8>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_GPIO_Init+0xe8>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6153      	str	r3, [r2, #20]
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_GPIO_Init+0xe8>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|LED11_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0xec>)
 800173a:	f002 ff31 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	21f0      	movs	r1, #240	; 0xf0
 8001742:	481a      	ldr	r0, [pc, #104]	; (80017ac <MX_GPIO_Init+0xf0>)
 8001744:	f002 ff2c 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED10_Pin|LED11_Pin;
 8001748:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_GPIO_Init+0xec>)
 8001762:	f002 fdab 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN01_Pin|BTN00_Pin;
 8001766:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0xec>)
 800177c:	f002 fd9e 	bl	80042bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED03_Pin|LED02_Pin|LED01_Pin|LED00_Pin;
 8001780:	23f0      	movs	r3, #240	; 0xf0
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_GPIO_Init+0xf0>)
 8001798:	f002 fd90 	bl	80042bc <HAL_GPIO_Init>

}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000800 	.word	0x48000800
 80017ac:	48000400 	.word	0x48000400

080017b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_I2C1_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <MX_I2C1_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_I2C1_Init+0x74>)
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <MX_I2C1_Init+0x7c>)
 80017be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_I2C1_Init+0x74>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_I2C1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_I2C1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_I2C1_Init+0x74>)
 80017ec:	f002 ff0a 	bl	8004604 <HAL_I2C_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017f6:	f000 f913 	bl	8001a20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fa:	2100      	movs	r1, #0
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <MX_I2C1_Init+0x74>)
 80017fe:	f002 ff90 	bl	8004722 <HAL_I2CEx_ConfigAnalogFilter>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001808:	f000 f90a 	bl	8001a20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_I2C1_Init+0x74>)
 8001810:	f002 ffd2 	bl	80047b8 <HAL_I2CEx_ConfigDigitalFilter>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 f901 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000270 	.word	0x20000270
 8001828:	40005400 	.word	0x40005400
 800182c:	2000090e 	.word	0x2000090e

08001830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_I2C_MspInit+0x7c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d128      	bne.n	80018a4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_I2C_MspInit+0x80>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_I2C_MspInit+0x80>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_I2C_MspInit+0x80>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800186a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001870:	2312      	movs	r3, #18
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187c:	2304      	movs	r3, #4
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <HAL_I2C_MspInit+0x84>)
 8001888:	f002 fd18 	bl	80042bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_I2C_MspInit+0x80>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_I2C_MspInit+0x80>)
 8001892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001896:	61d3      	str	r3, [r2, #28]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_I2C_MspInit+0x80>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400

080018b8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_IWDG_Init+0x34>)
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <MX_IWDG_Init+0x38>)
 80018c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_IWDG_Init+0x34>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_IWDG_Init+0x34>)
 80018ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018ce:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_IWDG_Init+0x34>)
 80018d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_IWDG_Init+0x34>)
 80018da:	f002 ffb9 	bl	8004850 <HAL_IWDG_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80018e4:	f000 f89c 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200002bc 	.word	0x200002bc
 80018f0:	40003000 	.word	0x40003000

080018f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f8:	f000 fde4 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fc:	f000 f82a 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001900:	f7ff fedc 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001904:	f7ff feb4 	bl	8001670 <MX_DMA_Init>
  MX_ADC1_Init();
 8001908:	f7ff fc30 	bl	800116c <MX_ADC1_Init>
  MX_ADC2_Init();
 800190c:	f7ff fcc8 	bl	80012a0 <MX_ADC2_Init>
  MX_CAN_Init();
 8001910:	f7ff fe24 	bl	800155c <MX_CAN_Init>
  MX_I2C1_Init();
 8001914:	f7ff ff4c 	bl	80017b0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001918:	f000 f968 	bl	8001bec <MX_TIM1_Init>
  MX_TIM2_Init();
 800191c:	f000 fa0a 	bl	8001d34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001920:	f000 faa6 	bl	8001e70 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001924:	f000 fb44 	bl	8001fb0 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001928:	f000 fccc 	bl	80022c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800192c:	f000 fcfa 	bl	8002324 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8001930:	f7ff ffc2 	bl	80018b8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  a = 1;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <main+0x58>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]
  GAS_Scheduler_init();
 800193a:	f7ff fb61 	bl	8001000 <GAS_Scheduler_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(GPIOB, LED00_Pin);
	  //HAL_Delay(100);
	  GAS_Scheduler();
 800193e:	f7ff fbe7 	bl	8001110 <GAS_Scheduler>
	  HAL_IWDG_Refresh(&hiwdg);
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <main+0x5c>)
 8001944:	f002 ffd3 	bl	80048ee <HAL_IWDG_Refresh>
	  GAS_Scheduler();
 8001948:	e7f9      	b.n	800193e <main+0x4a>
 800194a:	bf00      	nop
 800194c:	200002cc 	.word	0x200002cc
 8001950:	200002bc 	.word	0x200002bc

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	; 0x58
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195e:	2228      	movs	r2, #40	; 0x28
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f006 f84c 	bl	8007a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800198a:	230b      	movs	r3, #11
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800198e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001998:	2301      	movs	r3, #1
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199c:	2310      	movs	r3, #16
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019a0:	2301      	movs	r3, #1
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a4:	2302      	movs	r3, #2
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 ffa9 	bl	8004910 <HAL_RCC_OscConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019c4:	f000 f82c 	bl	8001a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c8:	230f      	movs	r3, #15
 80019ca:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019cc:	2302      	movs	r3, #2
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 ffd1 	bl	800598c <HAL_RCC_ClockConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80019f0:	f000 f816 	bl	8001a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80019f4:	f241 0321 	movw	r3, #4129	; 0x1021
 80019f8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a06:	463b      	mov	r3, r7
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 fa27 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a14:	f000 f804 	bl	8001a20 <Error_Handler>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3758      	adds	r7, #88	; 0x58
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <Error_Handler+0x8>
	...

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_MspInit+0x44>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_MspInit+0x44>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6193      	str	r3, [r2, #24]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_MspInit+0x44>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_MspInit+0x44>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_MspInit+0x44>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_MspInit+0x44>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac0:	f000 fd46 	bl	8002550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001ac4:	f7ff fad6 	bl	8001074 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA1_Channel1_IRQHandler+0x10>)
 8001ad2:	f002 fb02 	bl	80040da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001bc 	.word	0x200001bc

08001ae0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <DMA1_Channel2_IRQHandler+0x10>)
 8001ae6:	f002 faf8 	bl	80040da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000200 	.word	0x20000200

08001af4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <CAN_RX0_IRQHandler+0x10>)
 8001afa:	f001 fefe 	bl	80038fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000248 	.word	0x20000248

08001b08 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <CAN_RX1_IRQHandler+0x10>)
 8001b0e:	f001 fef4 	bl	80038fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000248 	.word	0x20000248

08001b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, LED02_Pin);
 8001b20:	2120      	movs	r1, #32
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <TIM2_IRQHandler+0x18>)
 8001b24:	f002 fd54 	bl	80045d0 <HAL_GPIO_TogglePin>
  HAL_TIM_IRQHandler(&htim2);
 8001b28:	4803      	ldr	r0, [pc, #12]	; (8001b38 <TIM2_IRQHandler+0x1c>)
 8001b2a:	f004 fda1 	bl	8006670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	48000400 	.word	0x48000400
 8001b38:	20000320 	.word	0x20000320

08001b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, LED03_Pin);
 8001b40:	2110      	movs	r1, #16
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <TIM3_IRQHandler+0x18>)
 8001b44:	f002 fd44 	bl	80045d0 <HAL_GPIO_TogglePin>
  HAL_TIM_IRQHandler(&htim3);
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <TIM3_IRQHandler+0x1c>)
 8001b4a:	f004 fd91 	bl	8006670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	48000400 	.word	0x48000400
 8001b58:	2000036c 	.word	0x2000036c

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f005 ff06 	bl	800799c <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20003000 	.word	0x20003000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	200002d0 	.word	0x200002d0
 8001bc4:	20000520 	.word	0x20000520

08001bc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b090      	sub	sp, #64	; 0x40
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c28:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c2a:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <MX_TIM1_Init+0x144>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c54:	4835      	ldr	r0, [pc, #212]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c56:	f004 fa37 	bl	80060c8 <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c60:	f7ff fede 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482e      	ldr	r0, [pc, #184]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c72:	f004 feb8 	bl	80069e6 <HAL_TIM_ConfigClockSource>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c7c:	f7ff fed0 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c80:	482a      	ldr	r0, [pc, #168]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001c82:	f004 fa78 	bl	8006176 <HAL_TIM_IC_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c8c:	f7ff fec8 	bl	8001a20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c90:	2304      	movs	r3, #4
 8001c92:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c94:	2350      	movs	r3, #80	; 0x50
 8001c96:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4820      	ldr	r0, [pc, #128]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001cac:	f004 ff64 	bl	8006b78 <HAL_TIM_SlaveConfigSynchro>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001cb6:	f7ff feb3 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4816      	ldr	r0, [pc, #88]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001cd4:	f004 fdeb 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001cde:	f7ff fe9f 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001cf4:	f004 fddb 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001cfe:	f7ff fe8f 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_TIM1_Init+0x140>)
 8001d14:	f005 fa82 	bl	800721c <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001d1e:	f7ff fe7f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3740      	adds	r7, #64	; 0x40
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200002d4 	.word	0x200002d4
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b090      	sub	sp, #64	; 0x40
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2048 - 1;
 8001d78:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9a:	4834      	ldr	r0, [pc, #208]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001d9c:	f004 f994 	bl	80060c8 <HAL_TIM_Base_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001da6:	f7ff fe3b 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db4:	4619      	mov	r1, r3
 8001db6:	482d      	ldr	r0, [pc, #180]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001db8:	f004 fe15 	bl	80069e6 <HAL_TIM_ConfigClockSource>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001dc2:	f7ff fe2d 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001dc6:	4829      	ldr	r0, [pc, #164]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001dc8:	f004 f9d5 	bl	8006176 <HAL_TIM_IC_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001dd2:	f7ff fe25 	bl	8001a20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001dda:	2350      	movs	r3, #80	; 0x50
 8001ddc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	481e      	ldr	r0, [pc, #120]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001df2:	f004 fec1 	bl	8006b78 <HAL_TIM_SlaveConfigSynchro>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001dfc:	f7ff fe10 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4814      	ldr	r0, [pc, #80]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001e1a:	f004 fd48 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001e24:	f7ff fdfc 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2204      	movs	r2, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001e3a:	f004 fd38 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8001e44:	f7ff fdec 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM2_Init+0x138>)
 8001e56:	f005 f9e1 	bl	800721c <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0x130>
  {
    Error_Handler();
 8001e60:	f7ff fdde 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3740      	adds	r7, #64	; 0x40
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000320 	.word	0x20000320

08001e70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b090      	sub	sp, #64	; 0x40
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eac:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001eae:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <MX_TIM3_Init+0x13c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2048 - 1;
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001eb4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001eb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed4:	4834      	ldr	r0, [pc, #208]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001ed6:	f004 f8f7 	bl	80060c8 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001ee0:	f7ff fd9e 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eee:	4619      	mov	r1, r3
 8001ef0:	482d      	ldr	r0, [pc, #180]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001ef2:	f004 fd78 	bl	80069e6 <HAL_TIM_ConfigClockSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001efc:	f7ff fd90 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f00:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001f02:	f004 f938 	bl	8006176 <HAL_TIM_IC_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001f0c:	f7ff fd88 	bl	8001a20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f10:	2304      	movs	r3, #4
 8001f12:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f14:	2350      	movs	r3, #80	; 0x50
 8001f16:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481f      	ldr	r0, [pc, #124]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001f2c:	f004 fe24 	bl	8006b78 <HAL_TIM_SlaveConfigSynchro>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f36:	f7ff fd73 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4815      	ldr	r0, [pc, #84]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001f54:	f004 fcab 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001f5e:	f7ff fd5f 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f62:	2302      	movs	r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001f74:	f004 fc9b 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001f7e:	f7ff fd4f 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <MX_TIM3_Init+0x138>)
 8001f90:	f005 f944 	bl	800721c <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8001f9a:	f7ff fd41 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	3740      	adds	r7, #64	; 0x40
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000036c 	.word	0x2000036c
 8001fac:	40000400 	.word	0x40000400

08001fb0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b090      	sub	sp, #64	; 0x40
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001fec:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <MX_TIM15_Init+0x13c>)
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <MX_TIM15_Init+0x140>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <MX_TIM15_Init+0x13c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <MX_TIM15_Init+0x13c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002004:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800200c:	4b37      	ldr	r3, [pc, #220]	; (80020ec <MX_TIM15_Init+0x13c>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002018:	4834      	ldr	r0, [pc, #208]	; (80020ec <MX_TIM15_Init+0x13c>)
 800201a:	f004 f855 	bl	80060c8 <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002024:	f7ff fcfc 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800202e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002032:	4619      	mov	r1, r3
 8002034:	482d      	ldr	r0, [pc, #180]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002036:	f004 fcd6 	bl	80069e6 <HAL_TIM_ConfigClockSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002040:	f7ff fcee 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002044:	4829      	ldr	r0, [pc, #164]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002046:	f004 f896 	bl	8006176 <HAL_TIM_IC_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8002050:	f7ff fce6 	bl	8001a20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002054:	2304      	movs	r3, #4
 8002056:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002058:	2350      	movs	r3, #80	; 0x50
 800205a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	481f      	ldr	r0, [pc, #124]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002070:	f004 fd82 	bl	8006b78 <HAL_TIM_SlaveConfigSynchro>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800207a:	f7ff fcd1 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002082:	2301      	movs	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	4815      	ldr	r0, [pc, #84]	; (80020ec <MX_TIM15_Init+0x13c>)
 8002098:	f004 fc09 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80020a2:	f7ff fcbd 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80020a6:	2302      	movs	r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80020aa:	2302      	movs	r3, #2
 80020ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	2204      	movs	r2, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <MX_TIM15_Init+0x13c>)
 80020b8:	f004 fbf9 	bl	80068ae <HAL_TIM_IC_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 80020c2:	f7ff fcad 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <MX_TIM15_Init+0x13c>)
 80020d4:	f005 f8a2 	bl	800721c <HAL_TIMEx_MasterConfigSynchronization>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80020de:	f7ff fc9f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	3740      	adds	r7, #64	; 0x40
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003b8 	.word	0x200003b8
 80020f0:	40014000 	.word	0x40014000

080020f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b090      	sub	sp, #64	; 0x40
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_TIM_Base_MspInit+0x1b8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d12a      	bne.n	800216c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800211c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002120:	6193      	str	r3, [r2, #24]
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4a5f      	ldr	r2, [pc, #380]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	6153      	str	r3, [r2, #20]
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002158:	2306      	movs	r3, #6
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002166:	f002 f8a9 	bl	80042bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800216a:	e09b      	b.n	80022a4 <HAL_TIM_Base_MspInit+0x1b0>
  else if(tim_baseHandle->Instance==TIM2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d132      	bne.n	80021dc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002176:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	623b      	str	r3, [r7, #32]
 800218c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4a47      	ldr	r2, [pc, #284]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	6153      	str	r3, [r2, #20]
 800219a:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b8:	2301      	movs	r3, #1
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f002 f879 	bl	80042bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	201c      	movs	r0, #28
 80021d0:	f001 fea7 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d4:	201c      	movs	r0, #28
 80021d6:	f001 fec0 	bl	8003f5a <HAL_NVIC_EnableIRQ>
}
 80021da:	e063      	b.n	80022a4 <HAL_TIM_Base_MspInit+0x1b0>
  else if(tim_baseHandle->Instance==TIM3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_TIM_Base_MspInit+0x1c0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d130      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002208:	6153      	str	r3, [r2, #20]
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002226:	2302      	movs	r3, #2
 8002228:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222e:	4619      	mov	r1, r3
 8002230:	4821      	ldr	r0, [pc, #132]	; (80022b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8002232:	f002 f843 	bl	80042bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	201d      	movs	r0, #29
 800223c:	f001 fe71 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002240:	201d      	movs	r0, #29
 8002242:	f001 fe8a 	bl	8003f5a <HAL_NVIC_EnableIRQ>
}
 8002246:	e02d      	b.n	80022a4 <HAL_TIM_Base_MspInit+0x1b0>
  else if(tim_baseHandle->Instance==TIM15)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_TIM_Base_MspInit+0x1c8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d128      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6193      	str	r3, [r2, #24]
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002274:	6153      	str	r3, [r2, #20]
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002294:	2301      	movs	r3, #1
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229c:	4619      	mov	r1, r3
 800229e:	4808      	ldr	r0, [pc, #32]	; (80022c0 <HAL_TIM_Base_MspInit+0x1cc>)
 80022a0:	f002 f80c 	bl	80042bc <HAL_GPIO_Init>
}
 80022a4:	bf00      	nop
 80022a6:	3740      	adds	r7, #64	; 0x40
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40000400 	.word	0x40000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	40014000 	.word	0x40014000
 80022c0:	48000400 	.word	0x48000400

080022c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <MX_USART1_UART_Init+0x5c>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80022d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_USART1_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_USART1_UART_Init+0x58>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART1_UART_Init+0x58>)
 8002308:	f005 f814 	bl	8007334 <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002312:	f7ff fb85 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000404 	.word	0x20000404
 8002320:	40013800 	.word	0x40013800

08002324 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <MX_USART3_UART_Init+0x58>)
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <MX_USART3_UART_Init+0x5c>)
 800232c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002330:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_USART3_UART_Init+0x58>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_USART3_UART_Init+0x58>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <MX_USART3_UART_Init+0x58>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002368:	f004 ffe4 	bl	8007334 <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002372:	f7ff fb55 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000488 	.word	0x20000488
 8002380:	40004800 	.word	0x40004800

08002384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <HAL_UART_MspInit+0xdc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d12a      	bne.n	80023fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_UART_MspInit+0xe0>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <HAL_UART_MspInit+0xe0>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6193      	str	r3, [r2, #24]
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_UART_MspInit+0xe0>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_UART_MspInit+0xe0>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_UART_MspInit+0xe0>)
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	6153      	str	r3, [r2, #20]
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_UART_MspInit+0xe0>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e8:	2307      	movs	r3, #7
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f6:	f001 ff61 	bl	80042bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023fa:	e02d      	b.n	8002458 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_UART_MspInit+0xe4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d128      	bne.n	8002458 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_UART_MspInit+0xe0>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_UART_MspInit+0xe0>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_UART_MspInit+0xe0>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_UART_MspInit+0xe0>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_UART_MspInit+0xe0>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6153      	str	r3, [r2, #20]
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_UART_MspInit+0xe0>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002436:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002448:	2307      	movs	r3, #7
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <HAL_UART_MspInit+0xe8>)
 8002454:	f001 ff32 	bl	80042bc <HAL_GPIO_Init>
}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	; 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40013800 	.word	0x40013800
 8002464:	40021000 	.word	0x40021000
 8002468:	40004800 	.word	0x40004800
 800246c:	48000400 	.word	0x48000400

08002470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopForever+0x6>)
  ldr r1, =_edata
 8002476:	490e      	ldr	r1, [pc, #56]	; (80024b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <LoopForever+0xe>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800248c:	4c0b      	ldr	r4, [pc, #44]	; (80024bc <LoopForever+0x16>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800249a:	f7ff fb95 	bl	8001bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f005 fa83 	bl	80079a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a2:	f7ff fa27 	bl	80018f4 <main>

080024a6 <LoopForever>:

LoopForever:
    b LoopForever
 80024a6:	e7fe      	b.n	80024a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024b4:	08007be0 	.word	0x08007be0
  ldr r2, =_sbss
 80024b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024bc:	20000520 	.word	0x20000520

080024c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_2_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_Init+0x28>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_Init+0x28>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f001 fd19 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	200f      	movs	r0, #15
 80024dc:	f000 f808 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7ff faa4 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000

080024f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x54>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_InitTick+0x58>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f001 fd31 	bl	8003f76 <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00e      	b.n	800253c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d80a      	bhi.n	800253a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f001 fcf9 	bl	8003f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <HAL_InitTick+0x5c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000008 	.word	0x20000008
 8002548:	20000010 	.word	0x20000010
 800254c:	2000000c 	.word	0x2000000c

08002550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x20>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x24>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_IncTick+0x24>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000010 	.word	0x20000010
 8002574:	2000050c 	.word	0x2000050c

08002578 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;  
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	2000050c 	.word	0x2000050c

08002590 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b09a      	sub	sp, #104	; 0x68
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e172      	b.n	80028d2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d176      	bne.n	80026ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d152      	bne.n	80026ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fec5 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d13b      	bne.n	80026ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fe85 	bl	8003344 <ADC_Disable>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d12f      	bne.n	80026ac <HAL_ADC_Init+0xe0>
 800264c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002650:	2b00      	cmp	r3, #0
 8002652:	d12b      	bne.n	80026ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800265c:	f023 0302 	bic.w	r3, r3, #2
 8002660:	f043 0202 	orr.w	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002676:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002686:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002688:	4b94      	ldr	r3, [pc, #592]	; (80028dc <HAL_ADC_Init+0x310>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a94      	ldr	r2, [pc, #592]	; (80028e0 <HAL_ADC_Init+0x314>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9a      	lsrs	r2, r3, #18
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800269e:	e002      	b.n	80026a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f9      	bne.n	80026a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d110      	bne.n	80026ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f023 0312 	bic.w	r3, r3, #18
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 80df 	bne.w	80028b8 <HAL_ADC_Init+0x2ec>
 80026fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 80da 	bne.w	80028b8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 80d2 	bne.w	80028b8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800271c:	f043 0202 	orr.w	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_ADC_Init+0x318>)
 8002726:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002730:	d102      	bne.n	8002738 <HAL_ADC_Init+0x16c>
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_ADC_Init+0x31c>)
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e002      	b.n	800273e <HAL_ADC_Init+0x172>
 8002738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800273c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_ADC_Init+0x192>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADC_Init+0x192>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_ADC_Init+0x194>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11c      	bne.n	800279e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002764:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_ADC_Init+0x1ba>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Init+0x1ba>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_ADC_Init+0x1bc>
 8002786:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800278c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7e5b      	ldrb	r3, [r3, #25]
 80027a2:	035b      	lsls	r3, r3, #13
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027a8:	2a01      	cmp	r2, #1
 80027aa:	d002      	beq.n	80027b2 <HAL_ADC_Init+0x1e6>
 80027ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_Init+0x1e8>
 80027b2:	2200      	movs	r2, #0
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c4:	4313      	orrs	r3, r2
 80027c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d11b      	bne.n	800280a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7e5b      	ldrb	r3, [r3, #25]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	3b01      	subs	r3, #1
 80027e0:	045a      	lsls	r2, r3, #17
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ea:	663b      	str	r3, [r7, #96]	; 0x60
 80027ec:	e00d      	b.n	800280a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	2b01      	cmp	r3, #1
 8002810:	d007      	beq.n	8002822 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	4313      	orrs	r3, r2
 800281c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800281e:	4313      	orrs	r3, r2
 8002820:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	d114      	bne.n	800285a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800283e:	f023 0302 	bic.w	r3, r3, #2
 8002842:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
 8002848:	039a      	lsls	r2, r3, #14
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4313      	orrs	r3, r2
 8002854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002856:	4313      	orrs	r3, r2
 8002858:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_ADC_Init+0x320>)
 8002862:	4013      	ands	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800286a:	430b      	orrs	r3, r1
 800286c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10c      	bne.n	8002890 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f023 010f 	bic.w	r1, r3, #15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
 800288e:	e007      	b.n	80028a0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 020f 	bic.w	r2, r2, #15
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f023 0303 	bic.w	r3, r3, #3
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
 80028b6:	e00a      	b.n	80028ce <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f023 0312 	bic.w	r3, r3, #18
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3768      	adds	r7, #104	; 0x68
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000008 	.word	0x20000008
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	50000300 	.word	0x50000300
 80028e8:	50000100 	.word	0x50000100
 80028ec:	fff0c007 	.word	0xfff0c007

080028f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80b9 	bne.w	8002a82 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_ADC_Start_DMA+0x2e>
 800291a:	2302      	movs	r3, #2
 800291c:	e0b4      	b.n	8002a88 <HAL_ADC_Start_DMA+0x198>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_ADC_Start_DMA+0x1a0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 80a0 	bne.w	8002a74 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fca1 	bl	800327c <ADC_Enable>
 800293a:	4603      	mov	r3, r0
 800293c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 8092 	bne.w	8002a6a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800295a:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_ADC_Start_DMA+0x1a0>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_ADC_Start_DMA+0x80>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296e:	d115      	bne.n	800299c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d027      	beq.n	80029da <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800299a:	e01e      	b.n	80029da <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b0:	d004      	beq.n	80029bc <HAL_ADC_Start_DMA+0xcc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a37      	ldr	r2, [pc, #220]	; (8002a94 <HAL_ADC_Start_DMA+0x1a4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d10e      	bne.n	80029da <HAL_ADC_Start_DMA+0xea>
 80029bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	d106      	bne.n	80029f6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f023 0206 	bic.w	r2, r3, #6
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
 80029f4:	e002      	b.n	80029fc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <HAL_ADC_Start_DMA+0x1a8>)
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_ADC_Start_DMA+0x1ac>)
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <HAL_ADC_Start_DMA+0x1b0>)
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	221c      	movs	r2, #28
 8002a22:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0210 	orr.w	r2, r2, #16
 8002a32:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	4619      	mov	r1, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f001 fae2 	bl	800401c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0204 	orr.w	r2, r2, #4
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e00d      	b.n	8002a86 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a72:	e008      	b.n	8002a86 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a80:	e001      	b.n	8002a86 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	50000300 	.word	0x50000300
 8002a94:	50000100 	.word	0x50000100
 8002a98:	080031b1 	.word	0x080031b1
 8002a9c:	0800322b 	.word	0x0800322b
 8002aa0:	08003247 	.word	0x08003247

08002aa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b09b      	sub	sp, #108	; 0x6c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x22>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e2a4      	b.n	8003010 <HAL_ADC_ConfigChannel+0x56c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 8288 	bne.w	8002fee <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d81c      	bhi.n	8002b20 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	461a      	mov	r2, r3
 8002afa:	231f      	movs	r3, #31
 8002afc:	4093      	lsls	r3, r2
 8002afe:	43db      	mvns	r3, r3
 8002b00:	4019      	ands	r1, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa00 f203 	lsl.w	r2, r0, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1e:	e063      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d81e      	bhi.n	8002b66 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	3b1e      	subs	r3, #30
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4019      	ands	r1, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	3b1e      	subs	r3, #30
 8002b58:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34
 8002b64:	e040      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b0e      	cmp	r3, #14
 8002b6c:	d81e      	bhi.n	8002bac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	3b3c      	subs	r3, #60	; 0x3c
 8002b82:	221f      	movs	r2, #31
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	3b3c      	subs	r3, #60	; 0x3c
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8002baa:	e01d      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	3b5a      	subs	r3, #90	; 0x5a
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	4019      	ands	r1, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	3b5a      	subs	r3, #90	; 0x5a
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80e5 	bne.w	8002dc2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d91c      	bls.n	8002c3a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6999      	ldr	r1, [r3, #24]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b1e      	subs	r3, #30
 8002c12:	2207      	movs	r2, #7
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	4019      	ands	r1, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6898      	ldr	r0, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b1e      	subs	r3, #30
 8002c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	e019      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6959      	ldr	r1, [r3, #20]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4019      	ands	r1, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6898      	ldr	r0, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	fa00 f203 	lsl.w	r2, r0, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d84f      	bhi.n	8002d30 <HAL_ADC_ConfigChannel+0x28c>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_ADC_ConfigChannel+0x1f4>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002ccb 	.word	0x08002ccb
 8002ca0:	08002ced 	.word	0x08002ced
 8002ca4:	08002d0f 	.word	0x08002d0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cae:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <HAL_ADC_ConfigChannel+0x45c>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	0691      	lsls	r1, r2, #26
 8002cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cc6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cc8:	e07e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cd0:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_ADC_ConfigChannel+0x45c>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	0691      	lsls	r1, r2, #26
 8002cda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ce8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cea:	e06d      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002cf2:	4b83      	ldr	r3, [pc, #524]	; (8002f00 <HAL_ADC_ConfigChannel+0x45c>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	0691      	lsls	r1, r2, #26
 8002cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d0c:	e05c      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d14:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_ADC_ConfigChannel+0x45c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	0691      	lsls	r1, r2, #26
 8002d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d20:	430a      	orrs	r2, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d2e:	e04b      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	069b      	lsls	r3, r3, #26
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	069b      	lsls	r3, r3, #26
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	069b      	lsls	r3, r3, #26
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dbe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002dc0:	e001      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002dc6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x344>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x344>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_ADC_ConfigChannel+0x346>
 8002de8:	2300      	movs	r3, #0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 810a 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d00f      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	400a      	ands	r2, r1
 8002e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e16:	e049      	b.n	8002eac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d91c      	bls.n	8002e74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6999      	ldr	r1, [r3, #24]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b1b      	subs	r3, #27
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4019      	ands	r1, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6898      	ldr	r0, [r3, #8]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	3b1b      	subs	r3, #27
 8002e66:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	619a      	str	r2, [r3, #24]
 8002e72:	e01b      	b.n	8002eac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6959      	ldr	r1, [r3, #20]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	2207      	movs	r2, #7
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	4019      	ands	r1, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6898      	ldr	r0, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_ADC_ConfigChannel+0x460>)
 8002eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002edc:	2b12      	cmp	r3, #18
 8002ede:	f040 8091 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 808a 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef8:	d108      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x468>
 8002efa:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_ADC_ConfigChannel+0x464>)
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e008      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x46e>
 8002f00:	83fff000 	.word	0x83fff000
 8002f04:	50000300 	.word	0x50000300
 8002f08:	50000100 	.word	0x50000100
 8002f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x48e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x48e>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x490>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d150      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x4b6>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x4b6>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x4b8>
 8002f5a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d13c      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d11d      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x500>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f70:	d118      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7e:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_ADC_ConfigChannel+0x578>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_ADC_ConfigChannel+0x57c>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9a      	lsrs	r2, r3, #18
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f94:	e002      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f9      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fa2:	e02e      	b.n	8003002 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b11      	cmp	r3, #17
 8002faa:	d10b      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x520>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fc2:	e01e      	b.n	8003002 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b12      	cmp	r3, #18
 8002fca:	d11a      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fd8:	e013      	b.n	8003002 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fec:	e00a      	b.n	8003004 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003000:	e000      	b.n	8003004 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003002:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800300c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003010:	4618      	mov	r0, r3
 8003012:	376c      	adds	r7, #108	; 0x6c
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	20000008 	.word	0x20000008
 8003020:	431bde83 	.word	0x431bde83

08003024 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003024:	b480      	push	{r7}
 8003026:	b099      	sub	sp, #100	; 0x64
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800303c:	d102      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	e002      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003048:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0a2      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800305e:	2302      	movs	r3, #2
 8003060:	e09b      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d17f      	bne.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d179      	bne.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003084:	4b49      	ldr	r3, [pc, #292]	; (80031ac <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8003086:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d040      	beq.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030a2:	035b      	lsls	r3, r3, #13
 80030a4:	430b      	orrs	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d15c      	bne.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80030ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d14b      	bne.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80030f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030fc:	f023 030f 	bic.w	r3, r3, #15
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	430a      	orrs	r2, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800310e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003110:	e03c      	b.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800311c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d123      	bne.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003160:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003162:	2b00      	cmp	r3, #0
 8003164:	d112      	bne.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800316e:	f023 030f 	bic.w	r3, r3, #15
 8003172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003174:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003176:	e009      	b.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800318a:	e000      	b.n	800318e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800318c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800319a:	4618      	mov	r0, r3
 800319c:	3764      	adds	r7, #100	; 0x64
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	50000100 	.word	0x50000100
 80031ac:	50000300 	.word	0x50000300

080031b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d126      	bne.n	8003218 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d115      	bne.n	8003210 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff f9bd 	bl	8002590 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003216:	e004      	b.n	8003222 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff f9b3 	bl	80025a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff f9a3 	bl	80025b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <ADC_Enable+0x2c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <ADC_Enable+0x2c>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <ADC_Enable+0x2e>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d143      	bne.n	8003336 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b22      	ldr	r3, [pc, #136]	; (8003340 <ADC_Enable+0xc4>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0210 	orr.w	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e02f      	b.n	8003338 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80032e8:	f7ff f946 	bl	8002578 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032ee:	e01b      	b.n	8003328 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f0:	f7ff f942 	bl	8002578 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d914      	bls.n	8003328 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d00d      	beq.n	8003328 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f043 0210 	orr.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e007      	b.n	8003338 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d1dc      	bne.n	80032f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	8000003f 	.word	0x8000003f

08003344 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d108      	bne.n	8003370 <ADC_Disable+0x2c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <ADC_Disable+0x2c>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <ADC_Disable+0x2e>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d047      	beq.n	8003406 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030d 	and.w	r3, r3, #13
 8003380:	2b01      	cmp	r3, #1
 8003382:	d10f      	bne.n	80033a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0202 	orr.w	r2, r2, #2
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2203      	movs	r2, #3
 800339a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800339c:	f7ff f8ec 	bl	8002578 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033a2:	e029      	b.n	80033f8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e023      	b.n	8003408 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033c0:	f7ff f8da 	bl	8002578 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d914      	bls.n	80033f8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d10d      	bne.n	80033f8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e007      	b.n	8003408 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d0dc      	beq.n	80033c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0ed      	b.n	80035fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe f8ca 	bl	80015c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7ff f898 	bl	8002578 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800344a:	e012      	b.n	8003472 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800344c:	f7ff f894 	bl	8002578 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b0a      	cmp	r3, #10
 8003458:	d90b      	bls.n	8003472 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2205      	movs	r2, #5
 800346a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0c5      	b.n	80035fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0e5      	beq.n	800344c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0202 	bic.w	r2, r2, #2
 800348e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003490:	f7ff f872 	bl	8002578 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003496:	e012      	b.n	80034be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003498:	f7ff f86e 	bl	8002578 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b0a      	cmp	r3, #10
 80034a4:	d90b      	bls.n	80034be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2205      	movs	r2, #5
 80034b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e09f      	b.n	80035fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e007      	b.n	80034f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7e5b      	ldrb	r3, [r3, #25]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d108      	bne.n	8003510 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e007      	b.n	8003520 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7e9b      	ldrb	r3, [r3, #26]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e007      	b.n	800354a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0220 	bic.w	r2, r2, #32
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7edb      	ldrb	r3, [r3, #27]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d108      	bne.n	8003564 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0210 	bic.w	r2, r2, #16
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e007      	b.n	8003574 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0210 	orr.w	r2, r2, #16
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e007      	b.n	800359e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7f5b      	ldrb	r3, [r3, #29]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0204 	orr.w	r2, r2, #4
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	1e5a      	subs	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d12e      	bne.n	8003678 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003632:	f7fe ffa1 	bl	8002578 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003638:	e012      	b.n	8003660 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800363a:	f7fe ff9d 	bl	8002578 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b0a      	cmp	r3, #10
 8003646:	d90b      	bls.n	8003660 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2205      	movs	r2, #5
 8003658:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e012      	b.n	8003686 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e006      	b.n	8003686 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800368e:	b480      	push	{r7}
 8003690:	b089      	sub	sp, #36	; 0x24
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d003      	beq.n	80036ba <HAL_CAN_AddTxMessage+0x2c>
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f040 80b8 	bne.w	800382a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a0 	beq.w	800381a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	0e1b      	lsrs	r3, r3, #24
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d907      	bls.n	80036fa <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e09e      	b.n	8003838 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036fa:	2201      	movs	r2, #1
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	6809      	ldr	r1, [r1, #0]
 800371a:	431a      	orrs	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3318      	adds	r3, #24
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	440b      	add	r3, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e00f      	b.n	8003748 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003732:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800373c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3318      	adds	r3, #24
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	440b      	add	r3, r1
 8003746:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6819      	ldr	r1, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3318      	adds	r3, #24
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	440b      	add	r3, r1
 8003758:	3304      	adds	r3, #4
 800375a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	7d1b      	ldrb	r3, [r3, #20]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d111      	bne.n	8003788 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3318      	adds	r3, #24
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	6811      	ldr	r1, [r2, #0]
 8003778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3318      	adds	r3, #24
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	440b      	add	r3, r1
 8003784:	3304      	adds	r3, #4
 8003786:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3307      	adds	r3, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	061a      	lsls	r2, r3, #24
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3306      	adds	r3, #6
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3305      	adds	r3, #5
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	4313      	orrs	r3, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	3204      	adds	r2, #4
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	4610      	mov	r0, r2
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6811      	ldr	r1, [r2, #0]
 80037b0:	ea43 0200 	orr.w	r2, r3, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3303      	adds	r3, #3
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	061a      	lsls	r2, r3, #24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3302      	adds	r3, #2
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3301      	adds	r3, #1
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	4313      	orrs	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	7812      	ldrb	r2, [r2, #0]
 80037e0:	4610      	mov	r0, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6811      	ldr	r1, [r2, #0]
 80037e6:	ea43 0200 	orr.w	r2, r3, r0
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3318      	adds	r3, #24
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6811      	ldr	r1, [r2, #0]
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3318      	adds	r3, #24
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	440b      	add	r3, r1
 8003814:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e00e      	b.n	8003838 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e006      	b.n	8003838 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3724      	adds	r7, #36	; 0x24
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003856:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d002      	beq.n	8003864 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800385e:	7afb      	ldrb	r3, [r7, #11]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d11d      	bne.n	80038a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3301      	adds	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d002      	beq.n	80038cc <HAL_CAN_ActivateNotification+0x1e>
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d109      	bne.n	80038e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6959      	ldr	r1, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e006      	b.n	80038ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08a      	sub	sp, #40	; 0x28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d07c      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d023      	beq.n	8003992 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f983 	bl	8003c68 <HAL_CAN_TxMailbox0CompleteCallback>
 8003962:	e016      	b.n	8003992 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
 8003976:	e00c      	b.n	8003992 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	e002      	b.n	8003992 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f989 	bl	8003ca4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d024      	beq.n	80039e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f963 	bl	8003c7c <HAL_CAN_TxMailbox1CompleteCallback>
 80039b6:	e016      	b.n	80039e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e00c      	b.n	80039e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
 80039de:	e002      	b.n	80039e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f969 	bl	8003cb8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d024      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f943 	bl	8003c90 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a0a:	e016      	b.n	8003a3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	e00c      	b.n	8003a3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e002      	b.n	8003a3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f949 	bl	8003ccc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2208      	movs	r2, #8
 8003a78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f93a 	bl	8003cf4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f921 	bl	8003ce0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2208      	movs	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f91c 	bl	8003d1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f903 	bl	8003d08 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00b      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f906 	bl	8003d30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d006      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8ff 	bl	8003d44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07b      	beq.n	8003c48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d072      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d043      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d03e      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc8:	2b60      	cmp	r3, #96	; 0x60
 8003bca:	d02b      	beq.n	8003c24 <HAL_CAN_IRQHandler+0x32a>
 8003bcc:	2b60      	cmp	r3, #96	; 0x60
 8003bce:	d82e      	bhi.n	8003c2e <HAL_CAN_IRQHandler+0x334>
 8003bd0:	2b50      	cmp	r3, #80	; 0x50
 8003bd2:	d022      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x320>
 8003bd4:	2b50      	cmp	r3, #80	; 0x50
 8003bd6:	d82a      	bhi.n	8003c2e <HAL_CAN_IRQHandler+0x334>
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d019      	beq.n	8003c10 <HAL_CAN_IRQHandler+0x316>
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d826      	bhi.n	8003c2e <HAL_CAN_IRQHandler+0x334>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d010      	beq.n	8003c06 <HAL_CAN_IRQHandler+0x30c>
 8003be4:	2b30      	cmp	r3, #48	; 0x30
 8003be6:	d822      	bhi.n	8003c2e <HAL_CAN_IRQHandler+0x334>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d002      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x2f8>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d005      	beq.n	8003bfc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003bf0:	e01d      	b.n	8003c2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	f043 0308 	orr.w	r3, r3, #8
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bfa:	e019      	b.n	8003c30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	f043 0310 	orr.w	r3, r3, #16
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c04:	e014      	b.n	8003c30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c0e:	e00f      	b.n	8003c30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c18:	e00a      	b.n	8003c30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c22:	e005      	b.n	8003c30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c2c:	e000      	b.n	8003c30 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2204      	movs	r2, #4
 8003c46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f87c 	bl	8003d58 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <__NVIC_SetPriorityGrouping>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <SysTick_Config>:
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed8:	d301      	bcc.n	8003ede <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00f      	b.n	8003efe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <SysTick_Config+0x40>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f7ff ff8e 	bl	8003e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <SysTick_Config+0x40>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <SysTick_Config+0x40>)
 8003ef8:	2207      	movs	r2, #7
 8003efa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000e010 	.word	0xe000e010

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff29 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f34:	f7ff ff3e 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff8e 	bl	8003e60 <NVIC_EncodePriority>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5d 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff31 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffa2 	bl	8003ec8 <SysTick_Config>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e037      	b.n	8004014 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f940 	bl	800427c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}  
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_DMA_Start_IT+0x20>
 8004038:	2302      	movs	r3, #2
 800403a:	e04a      	b.n	80040d2 <HAL_DMA_Start_IT+0xb6>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800404a:	2b01      	cmp	r3, #1
 800404c:	d13a      	bne.n	80040c4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f8d4 	bl	8004220 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 020e 	orr.w	r2, r2, #14
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e00f      	b.n	80040b2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 020a 	orr.w	r2, r2, #10
 80040a0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0204 	bic.w	r2, r2, #4
 80040b0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e005      	b.n	80040d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
 80040ce:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2204      	movs	r2, #4
 80040f8:	409a      	lsls	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d024      	beq.n	800414c <HAL_DMA_IRQHandler+0x72>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01f      	beq.n	800414c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0204 	bic.w	r2, r2, #4
 8004128:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2104      	movs	r1, #4
 8004134:	fa01 f202 	lsl.w	r2, r1, r2
 8004138:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d06a      	beq.n	8004218 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800414a:	e065      	b.n	8004218 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2202      	movs	r2, #2
 8004152:	409a      	lsls	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02c      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdc>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d027      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 020a 	bic.w	r2, r2, #10
 8004182:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	2102      	movs	r1, #2
 8004196:	fa01 f202 	lsl.w	r2, r1, r2
 800419a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d035      	beq.n	8004218 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80041b4:	e030      	b.n	8004218 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2208      	movs	r2, #8
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d028      	beq.n	8004218 <HAL_DMA_IRQHandler+0x13e>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d023      	beq.n	8004218 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020e 	bic.w	r2, r2, #14
 80041de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f202 	lsl.w	r2, r1, r2
 80041ee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
    }
  }
}  
 8004216:	e7ff      	b.n	8004218 <HAL_DMA_IRQHandler+0x13e>
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f202 	lsl.w	r2, r1, r2
 800423c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b10      	cmp	r3, #16
 800424c:	d108      	bne.n	8004260 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800425e:	e007      	b.n	8004270 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <DMA_CalcBaseAndBitshift+0x34>)
 800428c:	4413      	add	r3, r2
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <DMA_CalcBaseAndBitshift+0x38>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	009a      	lsls	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <DMA_CalcBaseAndBitshift+0x3c>)
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	bffdfff8 	.word	0xbffdfff8
 80042b4:	cccccccd 	.word	0xcccccccd
 80042b8:	40020000 	.word	0x40020000

080042bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ca:	e14e      	b.n	800456a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	4013      	ands	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8140 	beq.w	8004564 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d005      	beq.n	80042fc <HAL_GPIO_Init+0x40>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d130      	bne.n	800435e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004332:	2201      	movs	r2, #1
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 0201 	and.w	r2, r3, #1
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b03      	cmp	r3, #3
 8004368:	d017      	beq.n	800439a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d123      	bne.n	80043ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	08da      	lsrs	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3208      	adds	r2, #8
 80043ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	220f      	movs	r2, #15
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	08da      	lsrs	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3208      	adds	r2, #8
 80043e8:	6939      	ldr	r1, [r7, #16]
 80043ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	2203      	movs	r2, #3
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4013      	ands	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 0203 	and.w	r2, r3, #3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 809a 	beq.w	8004564 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004430:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_GPIO_Init+0x2cc>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4a54      	ldr	r2, [pc, #336]	; (8004588 <HAL_GPIO_Init+0x2cc>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6193      	str	r3, [r2, #24]
 800443c:	4b52      	ldr	r3, [pc, #328]	; (8004588 <HAL_GPIO_Init+0x2cc>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004448:	4a50      	ldr	r2, [pc, #320]	; (800458c <HAL_GPIO_Init+0x2d0>)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	3302      	adds	r3, #2
 8004450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	220f      	movs	r2, #15
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004472:	d013      	beq.n	800449c <HAL_GPIO_Init+0x1e0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a46      	ldr	r2, [pc, #280]	; (8004590 <HAL_GPIO_Init+0x2d4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00d      	beq.n	8004498 <HAL_GPIO_Init+0x1dc>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a45      	ldr	r2, [pc, #276]	; (8004594 <HAL_GPIO_Init+0x2d8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <HAL_GPIO_Init+0x1d8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a44      	ldr	r2, [pc, #272]	; (8004598 <HAL_GPIO_Init+0x2dc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_GPIO_Init+0x1d4>
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <HAL_GPIO_Init+0x1e2>
 8004490:	2305      	movs	r3, #5
 8004492:	e004      	b.n	800449e <HAL_GPIO_Init+0x1e2>
 8004494:	2302      	movs	r3, #2
 8004496:	e002      	b.n	800449e <HAL_GPIO_Init+0x1e2>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_GPIO_Init+0x1e2>
 800449c:	2300      	movs	r3, #0
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	f002 0203 	and.w	r2, r2, #3
 80044a4:	0092      	lsls	r2, r2, #2
 80044a6:	4093      	lsls	r3, r2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044ae:	4937      	ldr	r1, [pc, #220]	; (800458c <HAL_GPIO_Init+0x2d0>)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	3302      	adds	r3, #2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044bc:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_GPIO_Init+0x2e0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80044e0:	4a2e      	ldr	r2, [pc, #184]	; (800459c <HAL_GPIO_Init+0x2e0>)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044e6:	4b2d      	ldr	r3, [pc, #180]	; (800459c <HAL_GPIO_Init+0x2e0>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800450a:	4a24      	ldr	r2, [pc, #144]	; (800459c <HAL_GPIO_Init+0x2e0>)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_GPIO_Init+0x2e0>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	43db      	mvns	r3, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_GPIO_Init+0x2e0>)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_GPIO_Init+0x2e0>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800455e:	4a0f      	ldr	r2, [pc, #60]	; (800459c <HAL_GPIO_Init+0x2e0>)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3301      	adds	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	f47f aea9 	bne.w	80042cc <HAL_GPIO_Init+0x10>
  }
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40021000 	.word	0x40021000
 800458c:	40010000 	.word	0x40010000
 8004590:	48000400 	.word	0x48000400
 8004594:	48000800 	.word	0x48000800
 8004598:	48000c00 	.word	0x48000c00
 800459c:	40010400 	.word	0x40010400

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045bc:	e002      	b.n	80045c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43d9      	mvns	r1, r3
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	400b      	ands	r3, r1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	619a      	str	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e081      	b.n	800471a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd f900 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	e006      	b.n	800468c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800468a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d104      	bne.n	800469e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800469c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1a      	ldr	r2, [r3, #32]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b20      	cmp	r3, #32
 8004736:	d138      	bne.n	80047aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004742:	2302      	movs	r3, #2
 8004744:	e032      	b.n	80047ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2224      	movs	r2, #36	; 0x24
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004774:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d139      	bne.n	8004842 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047d8:	2302      	movs	r3, #2
 80047da:	e033      	b.n	8004844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800480a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e041      	b.n	80048e6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800486a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f245 5255 	movw	r2, #21845	; 0x5555
 8004874:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6852      	ldr	r2, [r2, #4]
 800487e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800488a:	f7fd fe75 	bl	8002578 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004890:	e00f      	b.n	80048b2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004892:	f7fd fe71 	bl	8002578 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b27      	cmp	r3, #39	; 0x27
 800489e:	d908      	bls.n	80048b2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e019      	b.n	80048e6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e8      	bne.n	8004892 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d005      	beq.n	80048da <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	611a      	str	r2, [r3, #16]
 80048d8:	e004      	b.n	80048e4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80048fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004916:	af00      	add	r7, sp, #0
 8004918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004920:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f001 b823 	b.w	800597c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 817d 	beq.w	8004c46 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800494c:	4bbc      	ldr	r3, [pc, #752]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b04      	cmp	r3, #4
 8004956:	d00c      	beq.n	8004972 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004958:	4bb9      	ldr	r3, [pc, #740]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d15c      	bne.n	8004a1e <HAL_RCC_OscConfig+0x10e>
 8004964:	4bb6      	ldr	r3, [pc, #728]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d155      	bne.n	8004a1e <HAL_RCC_OscConfig+0x10e>
 8004972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004976:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004986:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d102      	bne.n	80049a4 <HAL_RCC_OscConfig+0x94>
 800499e:	4ba8      	ldr	r3, [pc, #672]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	e015      	b.n	80049d0 <HAL_RCC_OscConfig+0xc0>
 80049a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80049b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80049c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80049c4:	fa93 f3a3 	rbit	r3, r3
 80049c8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049cc:	4b9c      	ldr	r3, [pc, #624]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049d4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80049dc:	fa92 f2a2 	rbit	r2, r2
 80049e0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80049e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80049e8:	fab2 f282 	clz	r2, r2
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	f002 021f 	and.w	r2, r2, #31
 80049f8:	2101      	movs	r1, #1
 80049fa:	fa01 f202 	lsl.w	r2, r1, r2
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 811f 	beq.w	8004c44 <HAL_RCC_OscConfig+0x334>
 8004a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 8116 	bne.w	8004c44 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f000 bfaf 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x12e>
 8004a30:	4b83      	ldr	r3, [pc, #524]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a82      	ldr	r2, [pc, #520]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e036      	b.n	8004aac <HAL_RCC_OscConfig+0x19c>
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x158>
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7b      	ldr	r2, [pc, #492]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b79      	ldr	r3, [pc, #484]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a78      	ldr	r2, [pc, #480]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e021      	b.n	8004aac <HAL_RCC_OscConfig+0x19c>
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x184>
 8004a7a:	4b71      	ldr	r3, [pc, #452]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a70      	ldr	r2, [pc, #448]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b6e      	ldr	r3, [pc, #440]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a6d      	ldr	r2, [pc, #436]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0x19c>
 8004a94:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a69      	ldr	r2, [pc, #420]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a66      	ldr	r2, [pc, #408]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aac:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f023 020f 	bic.w	r2, r3, #15
 8004ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	495f      	ldr	r1, [pc, #380]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d059      	beq.n	8004b8a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fd fd4f 	bl	8002578 <HAL_GetTick>
 8004ada:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fd4a 	bl	8002578 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b64      	cmp	r3, #100	; 0x64
 8004aee:	d902      	bls.n	8004af6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	f000 bf43 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
 8004af6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004afa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d102      	bne.n	8004b28 <HAL_RCC_OscConfig+0x218>
 8004b22:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	e015      	b.n	8004b54 <HAL_RCC_OscConfig+0x244>
 8004b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b2c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b40:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b50:	4b3b      	ldr	r3, [pc, #236]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b58:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b60:	fa92 f2a2 	rbit	r2, r2
 8004b64:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b68:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b6c:	fab2 f282 	clz	r2, r2
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	f042 0220 	orr.w	r2, r2, #32
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	f002 021f 	and.w	r2, r2, #31
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ab      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x1d0>
 8004b88:	e05d      	b.n	8004c46 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fcf5 	bl	8002578 <HAL_GetTick>
 8004b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fd fcf0 	bl	8002578 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b64      	cmp	r3, #100	; 0x64
 8004ba2:	d902      	bls.n	8004baa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	f000 bee9 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
 8004baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004bb6:	fa93 f3a3 	rbit	r3, r3
 8004bba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004bbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d102      	bne.n	8004bdc <HAL_RCC_OscConfig+0x2cc>
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	e015      	b.n	8004c08 <HAL_RCC_OscConfig+0x2f8>
 8004bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004bf8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCC_OscConfig+0x330>)
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c0c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c10:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c14:	fa92 f2a2 	rbit	r2, r2
 8004c18:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c1c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c20:	fab2 f282 	clz	r2, r2
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	f042 0220 	orr.w	r2, r2, #32
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f002 021f 	and.w	r2, r2, #31
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f202 	lsl.w	r2, r1, r2
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ab      	bne.n	8004b94 <HAL_RCC_OscConfig+0x284>
 8004c3c:	e003      	b.n	8004c46 <HAL_RCC_OscConfig+0x336>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 817d 	beq.w	8004f56 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c5c:	4ba6      	ldr	r3, [pc, #664]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00b      	beq.n	8004c80 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c68:	4ba3      	ldr	r3, [pc, #652]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d172      	bne.n	8004d5a <HAL_RCC_OscConfig+0x44a>
 8004c74:	4ba0      	ldr	r3, [pc, #640]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d16c      	bne.n	8004d5a <HAL_RCC_OscConfig+0x44a>
 8004c80:	2302      	movs	r3, #2
 8004c82:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x3a0>
 8004caa:	4b93      	ldr	r3, [pc, #588]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	e013      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3c8>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cd4:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004cde:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ce2:	fa92 f2a2 	rbit	r2, r2
 8004ce6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004cea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004cee:	fab2 f282 	clz	r2, r2
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f042 0220 	orr.w	r2, r2, #32
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	f002 021f 	and.w	r2, r2, #31
 8004cfe:	2101      	movs	r1, #1
 8004d00:	fa01 f202 	lsl.w	r2, r1, r2
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCC_OscConfig+0x410>
 8004d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f000 be2e 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b75      	ldr	r3, [pc, #468]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	21f8      	movs	r1, #248	; 0xf8
 8004d36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d3e:	fa91 f1a1 	rbit	r1, r1
 8004d42:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d46:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d4a:	fab1 f181 	clz	r1, r1
 8004d4e:	b2c9      	uxtb	r1, r1
 8004d50:	408b      	lsls	r3, r1
 8004d52:	4969      	ldr	r1, [pc, #420]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d58:	e0fd      	b.n	8004f56 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8088 	beq.w	8004e7c <HAL_RCC_OscConfig+0x56c>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	461a      	mov	r2, r3
 8004d94:	2301      	movs	r3, #1
 8004d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fd fbee 	bl	8002578 <HAL_GetTick>
 8004d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da2:	f7fd fbe9 	bl	8002578 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d902      	bls.n	8004db8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	f000 bde2 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
 8004db8:	2302      	movs	r3, #2
 8004dba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004dca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4d8>
 8004de2:	4b45      	ldr	r3, [pc, #276]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	e013      	b.n	8004e10 <HAL_RCC_OscConfig+0x500>
 8004de8:	2302      	movs	r3, #2
 8004dea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e0c:	4b3a      	ldr	r3, [pc, #232]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2202      	movs	r2, #2
 8004e12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e1a:	fa92 f2a2 	rbit	r2, r2
 8004e1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e26:	fab2 f282 	clz	r2, r2
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	f042 0220 	orr.w	r2, r2, #32
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	f002 021f 	and.w	r2, r2, #31
 8004e36:	2101      	movs	r1, #1
 8004e38:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0af      	beq.n	8004da2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	21f8      	movs	r1, #248	; 0xf8
 8004e58:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e60:	fa91 f1a1 	rbit	r1, r1
 8004e64:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e68:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e6c:	fab1 f181 	clz	r1, r1
 8004e70:	b2c9      	uxtb	r1, r1
 8004e72:	408b      	lsls	r3, r1
 8004e74:	4920      	ldr	r1, [pc, #128]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
 8004e7a:	e06c      	b.n	8004f56 <HAL_RCC_OscConfig+0x646>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fb66 	bl	8002578 <HAL_GetTick>
 8004eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb2:	f7fd fb61 	bl	8002578 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	f000 bd5a 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ece:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d104      	bne.n	8004efc <HAL_RCC_OscConfig+0x5ec>
 8004ef2:	4b01      	ldr	r3, [pc, #4]	; (8004ef8 <HAL_RCC_OscConfig+0x5e8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	e015      	b.n	8004f24 <HAL_RCC_OscConfig+0x614>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	2302      	movs	r3, #2
 8004efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f0e:	2302      	movs	r3, #2
 8004f10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f18:	fa93 f3a3 	rbit	r3, r3
 8004f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f20:	4bc8      	ldr	r3, [pc, #800]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2202      	movs	r2, #2
 8004f26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f2e:	fa92 f2a2 	rbit	r2, r2
 8004f32:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f36:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f042 0220 	orr.w	r2, r2, #32
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f002 021f 	and.w	r2, r2, #31
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ad      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8110 	beq.w	800518c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d079      	beq.n	8005070 <HAL_RCC_OscConfig+0x760>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4bab      	ldr	r3, [pc, #684]	; (8005248 <HAL_RCC_OscConfig+0x938>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fd fae7 	bl	8002578 <HAL_GetTick>
 8004faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb0:	f7fd fae2 	bl	8002578 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	f000 bcdb 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	fa93 f2a3 	rbit	r2, r3
 8004ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005004:	2202      	movs	r2, #2
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	fa93 f2a3 	rbit	r2, r3
 8005016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800501e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005020:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 8005022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005028:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800502c:	2102      	movs	r1, #2
 800502e:	6019      	str	r1, [r3, #0]
 8005030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005034:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	fa93 f1a3 	rbit	r1, r3
 800503e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005042:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005046:	6019      	str	r1, [r3, #0]
  return result;
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2101      	movs	r1, #1
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0a0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x6a0>
 800506e:	e08d      	b.n	800518c <HAL_RCC_OscConfig+0x87c>
 8005070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005074:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	fa93 f2a3 	rbit	r2, r3
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005092:	601a      	str	r2, [r3, #0]
  return result;
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800509c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b68      	ldr	r3, [pc, #416]	; (8005248 <HAL_RCC_OscConfig+0x938>)
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fd fa61 	bl	8002578 <HAL_GetTick>
 80050b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fd fa5c 	bl	8002578 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d902      	bls.n	80050d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	f000 bc55 	b.w	800597c <HAL_RCC_OscConfig+0x106c>
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050da:	2202      	movs	r2, #2
 80050dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	fa93 f2a3 	rbit	r2, r3
 80050ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	fa93 f2a3 	rbit	r2, r3
 8005110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005122:	2202      	movs	r2, #2
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	fa93 f2a3 	rbit	r2, r3
 8005134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005138:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800513c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 8005140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005146:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800514a:	2102      	movs	r1, #2
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005152:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	fa93 f1a3 	rbit	r1, r3
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005164:	6019      	str	r1, [r3, #0]
  return result;
 8005166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	fab3 f383 	clz	r3, r3
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d197      	bne.n	80050bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 81a1 	beq.w	80054e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b4:	4b23      	ldr	r3, [pc, #140]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4a22      	ldr	r2, [pc, #136]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	61d3      	str	r3, [r2, #28]
 80051c0:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <HAL_RCC_OscConfig+0x93c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d11a      	bne.n	8005224 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <HAL_RCC_OscConfig+0x93c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_RCC_OscConfig+0x93c>)
 80051f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fa:	f7fd f9bd 	bl	8002578 <HAL_GetTick>
 80051fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	e009      	b.n	8005218 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005204:	f7fd f9b8 	bl	8002578 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b64      	cmp	r3, #100	; 0x64
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e3b1      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_RCC_OscConfig+0x93c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ef      	beq.n	8005204 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d10d      	bne.n	8005250 <HAL_RCC_OscConfig+0x940>
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4a02      	ldr	r2, [pc, #8]	; (8005244 <HAL_RCC_OscConfig+0x934>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6213      	str	r3, [r2, #32]
 8005240:	e03c      	b.n	80052bc <HAL_RCC_OscConfig+0x9ac>
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000
 8005248:	10908120 	.word	0x10908120
 800524c:	40007000 	.word	0x40007000
 8005250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <HAL_RCC_OscConfig+0x96a>
 8005260:	4bc1      	ldr	r3, [pc, #772]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4ac0      	ldr	r2, [pc, #768]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	4bbe      	ldr	r3, [pc, #760]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	4abd      	ldr	r2, [pc, #756]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6213      	str	r3, [r2, #32]
 8005278:	e020      	b.n	80052bc <HAL_RCC_OscConfig+0x9ac>
 800527a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x994>
 800528a:	4bb7      	ldr	r3, [pc, #732]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	4ab6      	ldr	r2, [pc, #728]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	6213      	str	r3, [r2, #32]
 8005296:	4bb4      	ldr	r3, [pc, #720]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4ab3      	ldr	r2, [pc, #716]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6213      	str	r3, [r2, #32]
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0x9ac>
 80052a4:	4bb0      	ldr	r3, [pc, #704]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	4aaf      	ldr	r2, [pc, #700]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	6213      	str	r3, [r2, #32]
 80052b0:	4bad      	ldr	r3, [pc, #692]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	4aac      	ldr	r2, [pc, #688]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80052b6:	f023 0304 	bic.w	r3, r3, #4
 80052ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8081 	beq.w	80053d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ce:	f7fd f953 	bl	8002578 <HAL_GetTick>
 80052d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d8:	f7fd f94e 	bl	8002578 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e345      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052f8:	2202      	movs	r2, #2
 80052fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005300:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	fa93 f2a3 	rbit	r2, r3
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005318:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800531c:	2202      	movs	r2, #2
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005324:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	fa93 f2a3 	rbit	r2, r3
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005336:	601a      	str	r2, [r3, #0]
  return result;
 8005338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005340:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d102      	bne.n	800535c <HAL_RCC_OscConfig+0xa4c>
 8005356:	4b84      	ldr	r3, [pc, #528]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	e013      	b.n	8005384 <HAL_RCC_OscConfig+0xa74>
 800535c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005360:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005364:	2202      	movs	r2, #2
 8005366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	fa93 f2a3 	rbit	r2, r3
 8005376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	4b79      	ldr	r3, [pc, #484]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005388:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800538c:	2102      	movs	r1, #2
 800538e:	6011      	str	r1, [r2, #0]
 8005390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005394:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	fa92 f1a2 	rbit	r1, r2
 800539e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053a6:	6011      	str	r1, [r2, #0]
  return result;
 80053a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	fab2 f282 	clz	r2, r2
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	f002 021f 	and.w	r2, r2, #31
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f202 	lsl.w	r2, r1, r2
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d084      	beq.n	80052d8 <HAL_RCC_OscConfig+0x9c8>
 80053ce:	e07f      	b.n	80054d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d0:	f7fd f8d2 	bl	8002578 <HAL_GetTick>
 80053d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d8:	e00b      	b.n	80053f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fd f8cd 	bl	8002578 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e2c4      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
 80053f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053fa:	2202      	movs	r2, #2
 80053fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005402:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	fa93 f2a3 	rbit	r2, r3
 800540c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005410:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800541e:	2202      	movs	r2, #2
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005426:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fa93 f2a3 	rbit	r2, r3
 8005430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005434:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005438:	601a      	str	r2, [r3, #0]
  return result;
 800543a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005442:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005444:	fab3 f383 	clz	r3, r3
 8005448:	b2db      	uxtb	r3, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f043 0302 	orr.w	r3, r3, #2
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d102      	bne.n	800545e <HAL_RCC_OscConfig+0xb4e>
 8005458:	4b43      	ldr	r3, [pc, #268]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	e013      	b.n	8005486 <HAL_RCC_OscConfig+0xb76>
 800545e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005462:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005466:	2202      	movs	r2, #2
 8005468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	fa93 f2a3 	rbit	r2, r3
 8005478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	4b39      	ldr	r3, [pc, #228]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800548a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800548e:	2102      	movs	r1, #2
 8005490:	6011      	str	r1, [r2, #0]
 8005492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005496:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	fa92 f1a2 	rbit	r1, r2
 80054a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054a8:	6011      	str	r1, [r2, #0]
  return result;
 80054aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	fab2 f282 	clz	r2, r2
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	f002 021f 	and.w	r2, r2, #31
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d184      	bne.n	80053da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d8:	4b23      	ldr	r3, [pc, #140]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8242 	beq.w	800597a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054f6:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <HAL_RCC_OscConfig+0xc58>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b08      	cmp	r3, #8
 8005500:	f000 8213 	beq.w	800592a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b02      	cmp	r3, #2
 8005512:	f040 8162 	bne.w	80057da <HAL_RCC_OscConfig+0xeca>
 8005516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800551e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fa93 f2a3 	rbit	r2, r3
 8005532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005536:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800553a:	601a      	str	r2, [r3, #0]
  return result;
 800553c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005540:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005544:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005550:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	461a      	mov	r2, r3
 8005558:	2300      	movs	r3, #0
 800555a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fd f80c 	bl	8002578 <HAL_GetTick>
 8005560:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005564:	e00c      	b.n	8005580 <HAL_RCC_OscConfig+0xc70>
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800556c:	f7fd f804 	bl	8002578 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1fd      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
 8005580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005584:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800558c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005592:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	fa93 f2a3 	rbit	r2, r3
 800559c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055a4:	601a      	str	r2, [r3, #0]
  return result;
 80055a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <HAL_RCC_OscConfig+0xcba>
 80055c4:	4bb0      	ldr	r3, [pc, #704]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	e027      	b.n	800561a <HAL_RCC_OscConfig+0xd0a>
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	fa93 f2a3 	rbit	r2, r3
 80055e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f2a3 	rbit	r2, r3
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	4b9c      	ldr	r3, [pc, #624]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800561e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005622:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005626:	6011      	str	r1, [r2, #0]
 8005628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800562c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	fa92 f1a2 	rbit	r1, r2
 8005636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800563a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800563e:	6011      	str	r1, [r2, #0]
  return result;
 8005640:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005644:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	fab2 f282 	clz	r2, r2
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	f042 0220 	orr.w	r2, r2, #32
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	f002 021f 	and.w	r2, r2, #31
 800565a:	2101      	movs	r1, #1
 800565c:	fa01 f202 	lsl.w	r2, r1, r2
 8005660:	4013      	ands	r3, r2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d182      	bne.n	800556c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005666:	4b88      	ldr	r3, [pc, #544]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800566e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800567a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	430b      	orrs	r3, r1
 8005688:	497f      	ldr	r1, [pc, #508]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]
 800568e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005692:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005696:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800569a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	fa93 f2a3 	rbit	r2, r3
 80056aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056b2:	601a      	str	r2, [r3, #0]
  return result;
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	461a      	mov	r2, r3
 80056d0:	2301      	movs	r3, #1
 80056d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fc ff50 	bl	8002578 <HAL_GetTick>
 80056d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056dc:	e009      	b.n	80056f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056de:	f7fc ff4b 	bl	8002578 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e144      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	fa93 f2a3 	rbit	r2, r3
 800570e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005712:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005716:	601a      	str	r2, [r3, #0]
  return result;
 8005718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_RCC_OscConfig+0xe2c>
 8005736:	4b54      	ldr	r3, [pc, #336]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	e027      	b.n	800578c <HAL_RCC_OscConfig+0xe7c>
 800573c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005740:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005766:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800576a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005774:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	fa93 f2a3 	rbit	r2, r3
 800577e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005782:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	4b3f      	ldr	r3, [pc, #252]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005790:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005794:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005798:	6011      	str	r1, [r2, #0]
 800579a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800579e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	fa92 f1a2 	rbit	r1, r2
 80057a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057b0:	6011      	str	r1, [r2, #0]
  return result;
 80057b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	fab2 f282 	clz	r2, r2
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	f042 0220 	orr.w	r2, r2, #32
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f002 021f 	and.w	r2, r2, #31
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f202 	lsl.w	r2, r1, r2
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d082      	beq.n	80056de <HAL_RCC_OscConfig+0xdce>
 80057d8:	e0cf      	b.n	800597a <HAL_RCC_OscConfig+0x106a>
 80057da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	fa93 f2a3 	rbit	r2, r3
 80057f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057fe:	601a      	str	r2, [r3, #0]
  return result;
 8005800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005804:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005808:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005820:	f7fc feaa 	bl	8002578 <HAL_GetTick>
 8005824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005828:	e009      	b.n	800583e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582a:	f7fc fea5 	bl	8002578 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e09e      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
 800583e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005842:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800584a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005850:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	fa93 f2a3 	rbit	r2, r3
 800585a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005862:	601a      	str	r2, [r3, #0]
  return result;
 8005864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005868:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800586c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586e:	fab3 f383 	clz	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d104      	bne.n	800588c <HAL_RCC_OscConfig+0xf7c>
 8005882:	4b01      	ldr	r3, [pc, #4]	; (8005888 <HAL_RCC_OscConfig+0xf78>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	e029      	b.n	80058dc <HAL_RCC_OscConfig+0xfcc>
 8005888:	40021000 	.word	0x40021000
 800588c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005890:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	fa93 f2a3 	rbit	r2, r3
 80058a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	fa93 f2a3 	rbit	r2, r3
 80058ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <HAL_RCC_OscConfig+0x1078>)
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058e0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	fa92 f1a2 	rbit	r1, r2
 80058f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005900:	6011      	str	r1, [r2, #0]
  return result;
 8005902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005906:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	fab2 f282 	clz	r2, r2
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	f042 0220 	orr.w	r2, r2, #32
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	f002 021f 	and.w	r2, r2, #31
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f202 	lsl.w	r2, r1, r2
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d180      	bne.n	800582a <HAL_RCC_OscConfig+0xf1a>
 8005928:	e027      	b.n	800597a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800592a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e01e      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_RCC_OscConfig+0x1078>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005946:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800594a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800594e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	429a      	cmp	r2, r3
 800595c:	d10b      	bne.n	8005976 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800595e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005972:	429a      	cmp	r2, r3
 8005974:	d001      	beq.n	800597a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000

0800598c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b09e      	sub	sp, #120	; 0x78
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e162      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a4:	4b90      	ldr	r3, [pc, #576]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d910      	bls.n	80059d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b2:	4b8d      	ldr	r3, [pc, #564]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0207 	bic.w	r2, r3, #7
 80059ba:	498b      	ldr	r1, [pc, #556]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c2:	4b89      	ldr	r3, [pc, #548]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e14a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e0:	4b82      	ldr	r3, [pc, #520]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	497f      	ldr	r1, [pc, #508]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80dc 	beq.w	8005bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d13c      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xf6>
 8005a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xa6>
 8005a2c:	4b6f      	ldr	r3, [pc, #444]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	e00f      	b.n	8005a52 <HAL_RCC_ClockConfig+0xc6>
 8005a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a3a:	fa93 f3a3 	rbit	r3, r3
 8005a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a44:	663b      	str	r3, [r7, #96]	; 0x60
 8005a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a48:	fa93 f3a3 	rbit	r3, r3
 8005a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a4e:	4b67      	ldr	r3, [pc, #412]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a5a:	fa92 f2a2 	rbit	r2, r2
 8005a5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a62:	fab2 f282 	clz	r2, r2
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	f042 0220 	orr.w	r2, r2, #32
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	f002 021f 	and.w	r2, r2, #31
 8005a72:	2101      	movs	r1, #1
 8005a74:	fa01 f202 	lsl.w	r2, r1, r2
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d17b      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0f3      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d13c      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x178>
 8005a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	fab3 f383 	clz	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d102      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x128>
 8005aae:	4b4f      	ldr	r3, [pc, #316]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	e00f      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x148>
 8005ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abc:	fa93 f3a3 	rbit	r3, r3
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aca:	fa93 f3a3 	rbit	r3, r3
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad0:	4b46      	ldr	r3, [pc, #280]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ad8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005adc:	fa92 f2a2 	rbit	r2, r2
 8005ae0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae4:	fab2 f282 	clz	r2, r2
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	f042 0220 	orr.w	r2, r2, #32
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	f002 021f 	and.w	r2, r2, #31
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f202 	lsl.w	r2, r1, r2
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d13a      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0b2      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
 8005b04:	2302      	movs	r3, #2
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	fa93 f3a3 	rbit	r3, r3
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
 8005b26:	4b31      	ldr	r3, [pc, #196]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	e00d      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1bc>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	2302      	movs	r3, #2
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	fa93 f3a3 	rbit	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	4b29      	ldr	r3, [pc, #164]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2202      	movs	r2, #2
 8005b4a:	61ba      	str	r2, [r7, #24]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	fa92 f2a2 	rbit	r2, r2
 8005b52:	617a      	str	r2, [r7, #20]
  return result;
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	fab2 f282 	clz	r2, r2
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	f042 0220 	orr.w	r2, r2, #32
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	f002 021f 	and.w	r2, r2, #31
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e079      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f023 0203 	bic.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	491a      	ldr	r1, [pc, #104]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b88:	f7fc fcf6 	bl	8002578 <HAL_GetTick>
 8005b8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f7fc fcf2 	bl	8002578 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e061      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	4b11      	ldr	r3, [pc, #68]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 020c 	and.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1eb      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d214      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 0207 	bic.w	r2, r3, #7
 8005bce:	4906      	ldr	r1, [pc, #24]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e040      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
 8005be8:	40022000 	.word	0x40022000
 8005bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	491a      	ldr	r1, [pc, #104]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4912      	ldr	r1, [pc, #72]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c2e:	f000 f829 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8005c32:	4601      	mov	r1, r0
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	22f0      	movs	r2, #240	; 0xf0
 8005c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	fa92 f2a2 	rbit	r2, r2
 8005c46:	60fa      	str	r2, [r7, #12]
  return result;
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	fab2 f282 	clz	r2, r2
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	40d3      	lsrs	r3, r2
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <HAL_RCC_ClockConfig+0x2ec>)
 8005c54:	5cd3      	ldrb	r3, [r2, r3]
 8005c56:	fa21 f303 	lsr.w	r3, r1, r3
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <HAL_RCC_ClockConfig+0x2f0>)
 8005c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c5e:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <HAL_RCC_ClockConfig+0x2f4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fc fc44 	bl	80024f0 <HAL_InitTick>
  
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3778      	adds	r7, #120	; 0x78
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000
 8005c78:	08007ba0 	.word	0x08007ba0
 8005c7c:	20000008 	.word	0x20000008
 8005c80:	2000000c 	.word	0x2000000c

08005c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c9e:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x36>
 8005cb2:	e03c      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cb4:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cb6:	623b      	str	r3, [r7, #32]
      break;
 8005cb8:	e03c      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005cc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	fa92 f2a2 	rbit	r2, r2
 8005ccc:	607a      	str	r2, [r7, #4]
  return result;
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	fab2 f282 	clz	r2, r2
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	40d3      	lsrs	r3, r2
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cda:	5cd3      	ldrb	r3, [r2, r3]
 8005cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cde:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	220f      	movs	r2, #15
 8005ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	fa92 f2a2 	rbit	r2, r2
 8005cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	fab2 f282 	clz	r2, r2
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	40d3      	lsrs	r3, r2
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d0c:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1c:	e004      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	623b      	str	r3, [r7, #32]
      break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d30:	623b      	str	r3, [r7, #32]
      break;
 8005d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	372c      	adds	r7, #44	; 0x2c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40021000 	.word	0x40021000
 8005d48:	007a1200 	.word	0x007a1200
 8005d4c:	08007bb8 	.word	0x08007bb8
 8005d50:	08007bc8 	.word	0x08007bc8
 8005d54:	003d0900 	.word	0x003d0900

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000008 	.word	0x20000008

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d76:	f7ff ffef 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	fa92 f2a2 	rbit	r2, r2
 8005d90:	603a      	str	r2, [r7, #0]
  return result;
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	fab2 f282 	clz	r2, r2
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	40d3      	lsrs	r3, r2
 8005d9c:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40021000 	.word	0x40021000
 8005db0:	08007bb0 	.word	0x08007bb0

08005db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005dba:	f7ff ffcd 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005dc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005dcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	fa92 f2a2 	rbit	r2, r2
 8005dd4:	603a      	str	r2, [r7, #0]
  return result;
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	fab2 f282 	clz	r2, r2
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	40d3      	lsrs	r3, r2
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	08007bb0 	.word	0x08007bb0

08005df8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	220f      	movs	r2, #15
 8005e06:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e08:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 0203 	and.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005e14:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005e20:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	08db      	lsrs	r3, r3, #3
 8005e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <HAL_RCC_GetClockConfig+0x60>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0207 	and.w	r2, r3, #7
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40022000 	.word	0x40022000

08005e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b092      	sub	sp, #72	; 0x48
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80cd 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e80:	4b8e      	ldr	r3, [pc, #568]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10e      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8c:	4b8b      	ldr	r3, [pc, #556]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	4a8a      	ldr	r2, [pc, #552]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e96:	61d3      	str	r3, [r2, #28]
 8005e98:	4b88      	ldr	r3, [pc, #544]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eaa:	4b85      	ldr	r3, [pc, #532]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d118      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb6:	4b82      	ldr	r3, [pc, #520]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a81      	ldr	r2, [pc, #516]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec2:	f7fc fb59 	bl	8002578 <HAL_GetTick>
 8005ec6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec8:	e008      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fc fb55 	bl	8002578 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b64      	cmp	r3, #100	; 0x64
 8005ed6:	d901      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e0ea      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005edc:	4b78      	ldr	r3, [pc, #480]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ee8:	4b74      	ldr	r3, [pc, #464]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d07d      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d076      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f06:	4b6d      	ldr	r3, [pc, #436]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	fa93 f3a3 	rbit	r3, r3
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f20:	fab3 f383 	clz	r3, r3
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	4b66      	ldr	r3, [pc, #408]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	461a      	mov	r2, r3
 8005f30:	2301      	movs	r3, #1
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	fa93 f3a3 	rbit	r3, r3
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f44:	fab3 f383 	clz	r3, r3
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4b5d      	ldr	r3, [pc, #372]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	461a      	mov	r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f58:	4a58      	ldr	r2, [pc, #352]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d045      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fc fb06 	bl	8002578 <HAL_GetTick>
 8005f6c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f70:	f7fc fb02 	bl	8002578 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e095      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005f86:	2302      	movs	r3, #2
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	fa93 f3a3 	rbit	r3, r3
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	2302      	movs	r3, #2
 8005f94:	623b      	str	r3, [r7, #32]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	fa93 f3a3 	rbit	r3, r3
 8005f9c:	61fb      	str	r3, [r7, #28]
  return result;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa0:	fab3 f383 	clz	r3, r3
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d102      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005fb4:	4b41      	ldr	r3, [pc, #260]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	e007      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2202      	movs	r2, #2
 8005fcc:	613a      	str	r2, [r7, #16]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	fa92 f2a2 	rbit	r2, r2
 8005fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	fab2 f282 	clz	r2, r2
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	f002 021f 	and.w	r2, r2, #31
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f202 	lsl.w	r2, r1, r2
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0bd      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ff4:	4b31      	ldr	r3, [pc, #196]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	492e      	ldr	r1, [pc, #184]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006002:	4313      	orrs	r3, r2
 8006004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006006:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006018:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006026:	4b25      	ldr	r3, [pc, #148]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	4922      	ldr	r1, [pc, #136]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006034:	4313      	orrs	r3, r2
 8006036:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006044:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	f023 0210 	bic.w	r2, r3, #16
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	491a      	ldr	r1, [pc, #104]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006052:	4313      	orrs	r3, r2
 8006054:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	4913      	ldr	r1, [pc, #76]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006070:	4313      	orrs	r3, r2
 8006072:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	490b      	ldr	r1, [pc, #44]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608e:	4313      	orrs	r3, r2
 8006090:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	4904      	ldr	r1, [pc, #16]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3748      	adds	r7, #72	; 0x48
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40007000 	.word	0x40007000
 80060c4:	10908100 	.word	0x10908100

080060c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e049      	b.n	800616e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fc f800 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f000 fdaa 	bl	8006c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e049      	b.n	800621c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f841 	bl	8006224 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f000 fd53 	bl	8006c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_TIM_IC_Start+0x1a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800624e:	b2db      	uxtb	r3, r3
 8006250:	e023      	b.n	800629a <HAL_TIM_IC_Start+0x62>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d104      	bne.n	8006262 <HAL_TIM_IC_Start+0x2a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e01b      	b.n	800629a <HAL_TIM_IC_Start+0x62>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d104      	bne.n	8006272 <HAL_TIM_IC_Start+0x3a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800626e:	b2db      	uxtb	r3, r3
 8006270:	e013      	b.n	800629a <HAL_TIM_IC_Start+0x62>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d104      	bne.n	8006282 <HAL_TIM_IC_Start+0x4a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e00b      	b.n	800629a <HAL_TIM_IC_Start+0x62>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b10      	cmp	r3, #16
 8006286:	d104      	bne.n	8006292 <HAL_TIM_IC_Start+0x5a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e003      	b.n	800629a <HAL_TIM_IC_Start+0x62>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006298:	b2db      	uxtb	r3, r3
 800629a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <HAL_TIM_IC_Start+0x74>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e013      	b.n	80062d4 <HAL_TIM_IC_Start+0x9c>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d104      	bne.n	80062bc <HAL_TIM_IC_Start+0x84>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	e00b      	b.n	80062d4 <HAL_TIM_IC_Start+0x9c>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d104      	bne.n	80062cc <HAL_TIM_IC_Start+0x94>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e003      	b.n	80062d4 <HAL_TIM_IC_Start+0x9c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d102      	bne.n	80062e2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d001      	beq.n	80062e6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e083      	b.n	80063ee <HAL_TIM_IC_Start+0x1b6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_IC_Start+0xbe>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f4:	e023      	b.n	800633e <HAL_TIM_IC_Start+0x106>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_IC_Start+0xce>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006304:	e01b      	b.n	800633e <HAL_TIM_IC_Start+0x106>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d104      	bne.n	8006316 <HAL_TIM_IC_Start+0xde>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006314:	e013      	b.n	800633e <HAL_TIM_IC_Start+0x106>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b0c      	cmp	r3, #12
 800631a:	d104      	bne.n	8006326 <HAL_TIM_IC_Start+0xee>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006324:	e00b      	b.n	800633e <HAL_TIM_IC_Start+0x106>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b10      	cmp	r3, #16
 800632a:	d104      	bne.n	8006336 <HAL_TIM_IC_Start+0xfe>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006334:	e003      	b.n	800633e <HAL_TIM_IC_Start+0x106>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <HAL_TIM_IC_Start+0x116>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800634c:	e013      	b.n	8006376 <HAL_TIM_IC_Start+0x13e>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b04      	cmp	r3, #4
 8006352:	d104      	bne.n	800635e <HAL_TIM_IC_Start+0x126>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800635c:	e00b      	b.n	8006376 <HAL_TIM_IC_Start+0x13e>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d104      	bne.n	800636e <HAL_TIM_IC_Start+0x136>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800636c:	e003      	b.n	8006376 <HAL_TIM_IC_Start+0x13e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2201      	movs	r2, #1
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 ff26 	bl	80071d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <HAL_TIM_IC_Start+0x1c0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_TIM_IC_Start+0x174>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006396:	d009      	beq.n	80063ac <HAL_TIM_IC_Start+0x174>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <HAL_TIM_IC_Start+0x1c4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_TIM_IC_Start+0x174>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_TIM_IC_Start+0x1c8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d115      	bne.n	80063d8 <HAL_TIM_IC_Start+0x1a0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	4b14      	ldr	r3, [pc, #80]	; (8006404 <HAL_TIM_IC_Start+0x1cc>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	d015      	beq.n	80063ea <HAL_TIM_IC_Start+0x1b2>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d011      	beq.n	80063ea <HAL_TIM_IC_Start+0x1b2>
    {
      __HAL_TIM_ENABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0201 	orr.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	e008      	b.n	80063ea <HAL_TIM_IC_Start+0x1b2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e000      	b.n	80063ec <HAL_TIM_IC_Start+0x1b4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40000400 	.word	0x40000400
 8006400:	40014000 	.word	0x40014000
 8006404:	00010007 	.word	0x00010007

08006408 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_TIM_IC_Start_IT+0x1e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006422:	b2db      	uxtb	r3, r3
 8006424:	e023      	b.n	800646e <HAL_TIM_IC_Start_IT+0x66>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b04      	cmp	r3, #4
 800642a:	d104      	bne.n	8006436 <HAL_TIM_IC_Start_IT+0x2e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e01b      	b.n	800646e <HAL_TIM_IC_Start_IT+0x66>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b08      	cmp	r3, #8
 800643a:	d104      	bne.n	8006446 <HAL_TIM_IC_Start_IT+0x3e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006442:	b2db      	uxtb	r3, r3
 8006444:	e013      	b.n	800646e <HAL_TIM_IC_Start_IT+0x66>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d104      	bne.n	8006456 <HAL_TIM_IC_Start_IT+0x4e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e00b      	b.n	800646e <HAL_TIM_IC_Start_IT+0x66>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b10      	cmp	r3, #16
 800645a:	d104      	bne.n	8006466 <HAL_TIM_IC_Start_IT+0x5e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e003      	b.n	800646e <HAL_TIM_IC_Start_IT+0x66>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800646c:	b2db      	uxtb	r3, r3
 800646e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_TIM_IC_Start_IT+0x78>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e013      	b.n	80064a8 <HAL_TIM_IC_Start_IT+0xa0>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d104      	bne.n	8006490 <HAL_TIM_IC_Start_IT+0x88>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648c:	b2db      	uxtb	r3, r3
 800648e:	e00b      	b.n	80064a8 <HAL_TIM_IC_Start_IT+0xa0>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d104      	bne.n	80064a0 <HAL_TIM_IC_Start_IT+0x98>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e003      	b.n	80064a8 <HAL_TIM_IC_Start_IT+0xa0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d102      	bne.n	80064b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80064b0:	7b7b      	ldrb	r3, [r7, #13]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d001      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e0ce      	b.n	8006658 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_TIM_IC_Start_IT+0xc2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c8:	e023      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x10a>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d104      	bne.n	80064da <HAL_TIM_IC_Start_IT+0xd2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d8:	e01b      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x10a>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d104      	bne.n	80064ea <HAL_TIM_IC_Start_IT+0xe2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e8:	e013      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x10a>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_IC_Start_IT+0xf2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f8:	e00b      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x10a>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d104      	bne.n	800650a <HAL_TIM_IC_Start_IT+0x102>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006508:	e003      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x10a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <HAL_TIM_IC_Start_IT+0x11a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006520:	e013      	b.n	800654a <HAL_TIM_IC_Start_IT+0x142>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b04      	cmp	r3, #4
 8006526:	d104      	bne.n	8006532 <HAL_TIM_IC_Start_IT+0x12a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006530:	e00b      	b.n	800654a <HAL_TIM_IC_Start_IT+0x142>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b08      	cmp	r3, #8
 8006536:	d104      	bne.n	8006542 <HAL_TIM_IC_Start_IT+0x13a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006540:	e003      	b.n	800654a <HAL_TIM_IC_Start_IT+0x142>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d841      	bhi.n	80065d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <HAL_TIM_IC_Start_IT+0x150>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800658d 	.word	0x0800658d
 800655c:	080065d5 	.word	0x080065d5
 8006560:	080065d5 	.word	0x080065d5
 8006564:	080065d5 	.word	0x080065d5
 8006568:	0800659f 	.word	0x0800659f
 800656c:	080065d5 	.word	0x080065d5
 8006570:	080065d5 	.word	0x080065d5
 8006574:	080065d5 	.word	0x080065d5
 8006578:	080065b1 	.word	0x080065b1
 800657c:	080065d5 	.word	0x080065d5
 8006580:	080065d5 	.word	0x080065d5
 8006584:	080065d5 	.word	0x080065d5
 8006588:	080065c3 	.word	0x080065c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0202 	orr.w	r2, r2, #2
 800659a:	60da      	str	r2, [r3, #12]
      break;
 800659c:	e01d      	b.n	80065da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0204 	orr.w	r2, r2, #4
 80065ac:	60da      	str	r2, [r3, #12]
      break;
 80065ae:	e014      	b.n	80065da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0208 	orr.w	r2, r2, #8
 80065be:	60da      	str	r2, [r3, #12]
      break;
 80065c0:	e00b      	b.n	80065da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0210 	orr.w	r2, r2, #16
 80065d0:	60da      	str	r2, [r3, #12]
      break;
 80065d2:	e002      	b.n	80065da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d13a      	bne.n	8006656 <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2201      	movs	r2, #1
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fdf1 	bl	80071d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_TIM_IC_Start_IT+0x258>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_TIM_IC_Start_IT+0x20e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d009      	beq.n	8006616 <HAL_TIM_IC_Start_IT+0x20e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a17      	ldr	r2, [pc, #92]	; (8006664 <HAL_TIM_IC_Start_IT+0x25c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIM_IC_Start_IT+0x20e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a15      	ldr	r2, [pc, #84]	; (8006668 <HAL_TIM_IC_Start_IT+0x260>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d115      	bne.n	8006642 <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <HAL_TIM_IC_Start_IT+0x264>)
 800661e:	4013      	ands	r3, r2
 8006620:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b06      	cmp	r3, #6
 8006626:	d015      	beq.n	8006654 <HAL_TIM_IC_Start_IT+0x24c>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662e:	d011      	beq.n	8006654 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	e008      	b.n	8006654 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e000      	b.n	8006656 <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006654:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40000400 	.word	0x40000400
 8006668:	40014000 	.word	0x40014000
 800666c:	00010007 	.word	0x00010007

08006670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b02      	cmp	r3, #2
 8006684:	d122      	bne.n	80066cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d11b      	bne.n	80066cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0202 	mvn.w	r2, #2
 800669c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fab6 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 80066b8:	e005      	b.n	80066c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 faa8 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fab9 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d122      	bne.n	8006720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0204 	mvn.w	r2, #4
 80066f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa8c 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 800670c:	e005      	b.n	800671a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa7e 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fa8f 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b08      	cmp	r3, #8
 800672c:	d122      	bne.n	8006774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b08      	cmp	r3, #8
 800673a:	d11b      	bne.n	8006774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0208 	mvn.w	r2, #8
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2204      	movs	r2, #4
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa62 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa54 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fa65 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b10      	cmp	r3, #16
 8006780:	d122      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b10      	cmp	r3, #16
 800678e:	d11b      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0210 	mvn.w	r2, #16
 8006798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2208      	movs	r2, #8
 800679e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa38 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 80067b4:	e005      	b.n	80067c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa2a 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fa3b 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10e      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d107      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0201 	mvn.w	r2, #1
 80067ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa04 	bl	8006bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b80      	cmp	r3, #128	; 0x80
 8006800:	d10e      	bne.n	8006820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680c:	2b80      	cmp	r3, #128	; 0x80
 800680e:	d107      	bne.n	8006820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fd76 	bl	800730c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682e:	d10e      	bne.n	800684e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b80      	cmp	r3, #128	; 0x80
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fd69 	bl	8007320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d10e      	bne.n	800687a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d107      	bne.n	800687a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f9e9 	bl	8006c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b20      	cmp	r3, #32
 8006886:	d10e      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b20      	cmp	r3, #32
 8006894:	d107      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f06f 0220 	mvn.w	r2, #32
 800689e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fd29 	bl	80072f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e088      	b.n	80069de <HAL_TIM_IC_ConfigChannel+0x130>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11b      	bne.n	8006912 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6819      	ldr	r1, [r3, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f000 fac5 	bl	8006e78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 020c 	bic.w	r2, r2, #12
 80068fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6999      	ldr	r1, [r3, #24]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	619a      	str	r2, [r3, #24]
 8006910:	e060      	b.n	80069d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d11c      	bne.n	8006952 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6819      	ldr	r1, [r3, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f000 fb31 	bl	8006f8e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800693a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6999      	ldr	r1, [r3, #24]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	021a      	lsls	r2, r3, #8
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	619a      	str	r2, [r3, #24]
 8006950:	e040      	b.n	80069d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b08      	cmp	r3, #8
 8006956:	d11b      	bne.n	8006990 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f000 fb7e 	bl	8007068 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 020c 	bic.w	r2, r2, #12
 800697a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69d9      	ldr	r1, [r3, #28]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	61da      	str	r2, [r3, #28]
 800698e:	e021      	b.n	80069d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b0c      	cmp	r3, #12
 8006994:	d11c      	bne.n	80069d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	6819      	ldr	r1, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f000 fb9b 	bl	80070e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69d9      	ldr	r1, [r3, #28]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	021a      	lsls	r2, r3, #8
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	61da      	str	r2, [r3, #28]
 80069ce:	e001      	b.n	80069d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_ConfigClockSource+0x1c>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e0b6      	b.n	8006b70 <HAL_TIM_ConfigClockSource+0x18a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3e:	d03e      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0xd8>
 8006a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a44:	f200 8087 	bhi.w	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4c:	f000 8086 	beq.w	8006b5c <HAL_TIM_ConfigClockSource+0x176>
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a54:	d87f      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a56:	2b70      	cmp	r3, #112	; 0x70
 8006a58:	d01a      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0xaa>
 8006a5a:	2b70      	cmp	r3, #112	; 0x70
 8006a5c:	d87b      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a5e:	2b60      	cmp	r3, #96	; 0x60
 8006a60:	d050      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x11e>
 8006a62:	2b60      	cmp	r3, #96	; 0x60
 8006a64:	d877      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a66:	2b50      	cmp	r3, #80	; 0x50
 8006a68:	d03c      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0xfe>
 8006a6a:	2b50      	cmp	r3, #80	; 0x50
 8006a6c:	d873      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d058      	beq.n	8006b24 <HAL_TIM_ConfigClockSource+0x13e>
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d86f      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a76:	2b30      	cmp	r3, #48	; 0x30
 8006a78:	d064      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0x15e>
 8006a7a:	2b30      	cmp	r3, #48	; 0x30
 8006a7c:	d86b      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d060      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0x15e>
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d867      	bhi.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d05c      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0x15e>
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d05a      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0x15e>
 8006a8e:	e062      	b.n	8006b56 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6899      	ldr	r1, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f000 fb76 	bl	8007190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ab2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	609a      	str	r2, [r3, #8]
      break;
 8006abc:	e04f      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6899      	ldr	r1, [r3, #8]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f000 fb5f 	bl	8007190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ae0:	609a      	str	r2, [r3, #8]
      break;
 8006ae2:	e03c      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f000 fa1d 	bl	8006f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2150      	movs	r1, #80	; 0x50
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fb2c 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006b02:	e02c      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	6859      	ldr	r1, [r3, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	461a      	mov	r2, r3
 8006b12:	f000 fa79 	bl	8007008 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2160      	movs	r1, #96	; 0x60
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fb1c 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006b22:	e01c      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6859      	ldr	r1, [r3, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	461a      	mov	r2, r3
 8006b32:	f000 f9fd 	bl	8006f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2140      	movs	r1, #64	; 0x40
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fb0c 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006b42:	e00c      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f000 fb03 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006b54:	e003      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5a:	e000      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e031      	b.n	8006bf4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f8d4 	bl	8006d50 <TIM_SlaveTimer_SetConfig>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e018      	b.n	8006bf4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006be0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a32      	ldr	r2, [pc, #200]	; (8006d3c <TIM_Base_SetConfig+0xdc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_Base_SetConfig+0x28>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d003      	beq.n	8006c88 <TIM_Base_SetConfig+0x28>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a2f      	ldr	r2, [pc, #188]	; (8006d40 <TIM_Base_SetConfig+0xe0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <TIM_Base_SetConfig+0xdc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <TIM_Base_SetConfig+0x6a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d00f      	beq.n	8006cca <TIM_Base_SetConfig+0x6a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a24      	ldr	r2, [pc, #144]	; (8006d40 <TIM_Base_SetConfig+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_Base_SetConfig+0x6a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a23      	ldr	r2, [pc, #140]	; (8006d44 <TIM_Base_SetConfig+0xe4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_Base_SetConfig+0x6a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <TIM_Base_SetConfig+0xe8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_Base_SetConfig+0x6a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <TIM_Base_SetConfig+0xec>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d108      	bne.n	8006cdc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a0e      	ldr	r2, [pc, #56]	; (8006d3c <TIM_Base_SetConfig+0xdc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <TIM_Base_SetConfig+0xc0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a0e      	ldr	r2, [pc, #56]	; (8006d44 <TIM_Base_SetConfig+0xe4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d007      	beq.n	8006d20 <TIM_Base_SetConfig+0xc0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a0d      	ldr	r2, [pc, #52]	; (8006d48 <TIM_Base_SetConfig+0xe8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0xc0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <TIM_Base_SetConfig+0xec>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800

08006d50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b70      	cmp	r3, #112	; 0x70
 8006d9c:	d01a      	beq.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x84>
 8006d9e:	2b70      	cmp	r3, #112	; 0x70
 8006da0:	d860      	bhi.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
 8006da2:	2b60      	cmp	r3, #96	; 0x60
 8006da4:	d054      	beq.n	8006e50 <TIM_SlaveTimer_SetConfig+0x100>
 8006da6:	2b60      	cmp	r3, #96	; 0x60
 8006da8:	d85c      	bhi.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
 8006daa:	2b50      	cmp	r3, #80	; 0x50
 8006dac:	d046      	beq.n	8006e3c <TIM_SlaveTimer_SetConfig+0xec>
 8006dae:	2b50      	cmp	r3, #80	; 0x50
 8006db0:	d858      	bhi.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d019      	beq.n	8006dea <TIM_SlaveTimer_SetConfig+0x9a>
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d854      	bhi.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
 8006dba:	2b30      	cmp	r3, #48	; 0x30
 8006dbc:	d055      	beq.n	8006e6a <TIM_SlaveTimer_SetConfig+0x11a>
 8006dbe:	2b30      	cmp	r3, #48	; 0x30
 8006dc0:	d850      	bhi.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d051      	beq.n	8006e6a <TIM_SlaveTimer_SetConfig+0x11a>
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d84c      	bhi.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d04d      	beq.n	8006e6a <TIM_SlaveTimer_SetConfig+0x11a>
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d04b      	beq.n	8006e6a <TIM_SlaveTimer_SetConfig+0x11a>
 8006dd2:	e047      	b.n	8006e64 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	68d9      	ldr	r1, [r3, #12]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f000 f9d4 	bl	8007190 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006de8:	e040      	b.n	8006e6c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d101      	bne.n	8006df6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e03b      	b.n	8006e6e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a1a      	ldr	r2, [r3, #32]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	621a      	str	r2, [r3, #32]
      break;
 8006e3a:	e017      	b.n	8006e6c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	6899      	ldr	r1, [r3, #8]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f000 f871 	bl	8006f30 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006e4e:	e00d      	b.n	8006e6c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f000 f8d3 	bl	8007008 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006e62:	e003      	b.n	8006e6c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	75fb      	strb	r3, [r7, #23]
      break;
 8006e68:	e000      	b.n	8006e6c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006e6a:	bf00      	nop
  }

  return status;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f023 0201 	bic.w	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <TIM_TI1_SetConfig+0xac>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_TI1_SetConfig+0x46>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d007      	beq.n	8006ebe <TIM_TI1_SetConfig+0x46>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	; (8006f28 <TIM_TI1_SetConfig+0xb0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_TI1_SetConfig+0x46>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a1c      	ldr	r2, [pc, #112]	; (8006f2c <TIM_TI1_SetConfig+0xb4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <TIM_TI1_SetConfig+0x4a>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <TIM_TI1_SetConfig+0x4c>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	e003      	b.n	8006ee2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
 8006efc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f003 030a 	and.w	r3, r3, #10
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40000400 	.word	0x40000400
 8006f2c:	40014000 	.word	0x40014000

08006f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f023 0201 	bic.w	r2, r3, #1
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f023 030a 	bic.w	r3, r3, #10
 8006f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b087      	sub	sp, #28
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	f023 0210 	bic.w	r2, r3, #16
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	031b      	lsls	r3, r3, #12
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	621a      	str	r2, [r3, #32]
}
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	f023 0210 	bic.w	r2, r3, #16
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	031b      	lsls	r3, r3, #12
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	621a      	str	r2, [r3, #32]
}
 800705c:	bf00      	nop
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f023 0303 	bic.w	r3, r3, #3
 8007094:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80070b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	621a      	str	r2, [r3, #32]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800711e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	031b      	lsls	r3, r3, #12
 8007124:	b29b      	uxth	r3, r3
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	4313      	orrs	r3, r2
 800712a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007132:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	031b      	lsls	r3, r3, #12
 8007138:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	f043 0307 	orr.w	r3, r3, #7
 800717c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	609a      	str	r2, [r3, #8]
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	021a      	lsls	r2, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	609a      	str	r2, [r3, #8]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2201      	movs	r2, #1
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	43db      	mvns	r3, r3
 80071f2:	401a      	ands	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1a      	ldr	r2, [r3, #32]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	fa01 f303 	lsl.w	r3, r1, r3
 8007208:	431a      	orrs	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007230:	2302      	movs	r3, #2
 8007232:	e054      	b.n	80072de <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a24      	ldr	r2, [pc, #144]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007264:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a17      	ldr	r2, [pc, #92]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d009      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a11      	ldr	r2, [pc, #68]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10c      	bne.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40014000 	.word	0x40014000

080072f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e040      	b.n	80073c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fb f814 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2224      	movs	r2, #36	; 0x24
 8007360:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f82c 	bl	80073d0 <UART_SetConfig>
 8007378:	4603      	mov	r3, r0
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e022      	b.n	80073c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f956 	bl	800763c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800739e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f9dd 	bl	8007780 <UART_CheckIdleState>
 80073c6:	4603      	mov	r3, r0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b8a      	ldr	r3, [pc, #552]	; (8007624 <UART_SetConfig+0x254>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	430b      	orrs	r3, r1
 8007406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	430a      	orrs	r2, r1
 8007440:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a78      	ldr	r2, [pc, #480]	; (8007628 <UART_SetConfig+0x258>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d120      	bne.n	800748e <UART_SetConfig+0xbe>
 800744c:	4b77      	ldr	r3, [pc, #476]	; (800762c <UART_SetConfig+0x25c>)
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b03      	cmp	r3, #3
 8007456:	d817      	bhi.n	8007488 <UART_SetConfig+0xb8>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x90>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007471 	.word	0x08007471
 8007464:	0800747d 	.word	0x0800747d
 8007468:	08007483 	.word	0x08007483
 800746c:	08007477 	.word	0x08007477
 8007470:	2300      	movs	r3, #0
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e01d      	b.n	80074b2 <UART_SetConfig+0xe2>
 8007476:	2302      	movs	r3, #2
 8007478:	77fb      	strb	r3, [r7, #31]
 800747a:	e01a      	b.n	80074b2 <UART_SetConfig+0xe2>
 800747c:	2304      	movs	r3, #4
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	e017      	b.n	80074b2 <UART_SetConfig+0xe2>
 8007482:	2308      	movs	r3, #8
 8007484:	77fb      	strb	r3, [r7, #31]
 8007486:	e014      	b.n	80074b2 <UART_SetConfig+0xe2>
 8007488:	2310      	movs	r3, #16
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e011      	b.n	80074b2 <UART_SetConfig+0xe2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a67      	ldr	r2, [pc, #412]	; (8007630 <UART_SetConfig+0x260>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d102      	bne.n	800749e <UART_SetConfig+0xce>
 8007498:	2300      	movs	r3, #0
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e009      	b.n	80074b2 <UART_SetConfig+0xe2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a64      	ldr	r2, [pc, #400]	; (8007634 <UART_SetConfig+0x264>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d102      	bne.n	80074ae <UART_SetConfig+0xde>
 80074a8:	2300      	movs	r3, #0
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e001      	b.n	80074b2 <UART_SetConfig+0xe2>
 80074ae:	2310      	movs	r3, #16
 80074b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ba:	d15b      	bne.n	8007574 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80074bc:	7ffb      	ldrb	r3, [r7, #31]
 80074be:	2b08      	cmp	r3, #8
 80074c0:	d827      	bhi.n	8007512 <UART_SetConfig+0x142>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <UART_SetConfig+0xf8>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	08007513 	.word	0x08007513
 80074d8:	08007503 	.word	0x08007503
 80074dc:	08007513 	.word	0x08007513
 80074e0:	08007513 	.word	0x08007513
 80074e4:	08007513 	.word	0x08007513
 80074e8:	0800750b 	.word	0x0800750b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ec:	f7fe fc40 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80074f0:	61b8      	str	r0, [r7, #24]
        break;
 80074f2:	e013      	b.n	800751c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f4:	f7fe fc5e 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 80074f8:	61b8      	str	r0, [r7, #24]
        break;
 80074fa:	e00f      	b.n	800751c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074fc:	4b4e      	ldr	r3, [pc, #312]	; (8007638 <UART_SetConfig+0x268>)
 80074fe:	61bb      	str	r3, [r7, #24]
        break;
 8007500:	e00c      	b.n	800751c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007502:	f7fe fbbf 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8007506:	61b8      	str	r0, [r7, #24]
        break;
 8007508:	e008      	b.n	800751c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800750a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750e:	61bb      	str	r3, [r7, #24]
        break;
 8007510:	e004      	b.n	800751c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	77bb      	strb	r3, [r7, #30]
        break;
 800751a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d074      	beq.n	800760c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	005a      	lsls	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	441a      	add	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	fbb2 f3f3 	udiv	r3, r2, r3
 8007536:	b29b      	uxth	r3, r3
 8007538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b0f      	cmp	r3, #15
 800753e:	d916      	bls.n	800756e <UART_SetConfig+0x19e>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007546:	d212      	bcs.n	800756e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f023 030f 	bic.w	r3, r3, #15
 8007550:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	b29b      	uxth	r3, r3
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	b29a      	uxth	r2, r3
 800755e:	89fb      	ldrh	r3, [r7, #14]
 8007560:	4313      	orrs	r3, r2
 8007562:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	89fa      	ldrh	r2, [r7, #14]
 800756a:	60da      	str	r2, [r3, #12]
 800756c:	e04e      	b.n	800760c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	77bb      	strb	r3, [r7, #30]
 8007572:	e04b      	b.n	800760c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007574:	7ffb      	ldrb	r3, [r7, #31]
 8007576:	2b08      	cmp	r3, #8
 8007578:	d827      	bhi.n	80075ca <UART_SetConfig+0x1fa>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0x1b0>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075ad 	.word	0x080075ad
 8007588:	080075b5 	.word	0x080075b5
 800758c:	080075cb 	.word	0x080075cb
 8007590:	080075bb 	.word	0x080075bb
 8007594:	080075cb 	.word	0x080075cb
 8007598:	080075cb 	.word	0x080075cb
 800759c:	080075cb 	.word	0x080075cb
 80075a0:	080075c3 	.word	0x080075c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fe fbe4 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80075a8:	61b8      	str	r0, [r7, #24]
        break;
 80075aa:	e013      	b.n	80075d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ac:	f7fe fc02 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 80075b0:	61b8      	str	r0, [r7, #24]
        break;
 80075b2:	e00f      	b.n	80075d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b4:	4b20      	ldr	r3, [pc, #128]	; (8007638 <UART_SetConfig+0x268>)
 80075b6:	61bb      	str	r3, [r7, #24]
        break;
 80075b8:	e00c      	b.n	80075d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ba:	f7fe fb63 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 80075be:	61b8      	str	r0, [r7, #24]
        break;
 80075c0:	e008      	b.n	80075d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	61bb      	str	r3, [r7, #24]
        break;
 80075c8:	e004      	b.n	80075d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	77bb      	strb	r3, [r7, #30]
        break;
 80075d2:	bf00      	nop
    }

    if (pclk != 0U)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d018      	beq.n	800760c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	085a      	lsrs	r2, r3, #1
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	441a      	add	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d908      	bls.n	8007608 <UART_SetConfig+0x238>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d204      	bcs.n	8007608 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e001      	b.n	800760c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007618:	7fbb      	ldrb	r3, [r7, #30]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	efff69f3 	.word	0xefff69f3
 8007628:	40013800 	.word	0x40013800
 800762c:	40021000 	.word	0x40021000
 8007630:	40004400 	.word	0x40004400
 8007634:	40004800 	.word	0x40004800
 8007638:	007a1200 	.word	0x007a1200

0800763c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01a      	beq.n	8007752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800773a:	d10a      	bne.n	8007752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	605a      	str	r2, [r3, #4]
  }
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af02      	add	r7, sp, #8
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007790:	f7fa fef2 	bl	8002578 <HAL_GetTick>
 8007794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10e      	bne.n	80077c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f82d 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e023      	b.n	800780a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d10e      	bne.n	80077ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f817 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e00d      	b.n	800780a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b09c      	sub	sp, #112	; 0x70
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	4613      	mov	r3, r2
 8007820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007822:	e0a5      	b.n	8007970 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	f000 80a1 	beq.w	8007970 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fa fea3 	bl	8002578 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <UART_WaitOnFlagUntilTimeout+0x32>
 800783e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007840:	2b00      	cmp	r3, #0
 8007842:	d13e      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007858:	667b      	str	r3, [r7, #100]	; 0x64
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007864:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e6      	bne.n	8007844 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	663b      	str	r3, [r7, #96]	; 0x60
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007896:	64ba      	str	r2, [r7, #72]	; 0x48
 8007898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800789c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e067      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d04f      	beq.n	8007970 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078de:	d147      	bne.n	8007970 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
 800790a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800790e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	613b      	str	r3, [r7, #16]
   return(result);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	66bb      	str	r3, [r7, #104]	; 0x68
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800793c:	623a      	str	r2, [r7, #32]
 800793e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	69f9      	ldr	r1, [r7, #28]
 8007942:	6a3a      	ldr	r2, [r7, #32]
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	61bb      	str	r3, [r7, #24]
   return(result);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e010      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69da      	ldr	r2, [r3, #28]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4013      	ands	r3, r2
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	429a      	cmp	r2, r3
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	429a      	cmp	r2, r3
 800798c:	f43f af4a 	beq.w	8007824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3770      	adds	r7, #112	; 0x70
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <__errno>:
 800799c:	4b01      	ldr	r3, [pc, #4]	; (80079a4 <__errno+0x8>)
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000014 	.word	0x20000014

080079a8 <__libc_init_array>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4d0d      	ldr	r5, [pc, #52]	; (80079e0 <__libc_init_array+0x38>)
 80079ac:	4c0d      	ldr	r4, [pc, #52]	; (80079e4 <__libc_init_array+0x3c>)
 80079ae:	1b64      	subs	r4, r4, r5
 80079b0:	10a4      	asrs	r4, r4, #2
 80079b2:	2600      	movs	r6, #0
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	d109      	bne.n	80079cc <__libc_init_array+0x24>
 80079b8:	4d0b      	ldr	r5, [pc, #44]	; (80079e8 <__libc_init_array+0x40>)
 80079ba:	4c0c      	ldr	r4, [pc, #48]	; (80079ec <__libc_init_array+0x44>)
 80079bc:	f000 f8da 	bl	8007b74 <_init>
 80079c0:	1b64      	subs	r4, r4, r5
 80079c2:	10a4      	asrs	r4, r4, #2
 80079c4:	2600      	movs	r6, #0
 80079c6:	42a6      	cmp	r6, r4
 80079c8:	d105      	bne.n	80079d6 <__libc_init_array+0x2e>
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d0:	4798      	blx	r3
 80079d2:	3601      	adds	r6, #1
 80079d4:	e7ee      	b.n	80079b4 <__libc_init_array+0xc>
 80079d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079da:	4798      	blx	r3
 80079dc:	3601      	adds	r6, #1
 80079de:	e7f2      	b.n	80079c6 <__libc_init_array+0x1e>
 80079e0:	08007bd8 	.word	0x08007bd8
 80079e4:	08007bd8 	.word	0x08007bd8
 80079e8:	08007bd8 	.word	0x08007bd8
 80079ec:	08007bdc 	.word	0x08007bdc

080079f0 <malloc>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <malloc+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f000 b82b 	b.w	8007a50 <_malloc_r>
 80079fa:	bf00      	nop
 80079fc:	20000014 	.word	0x20000014

08007a00 <memset>:
 8007a00:	4402      	add	r2, r0
 8007a02:	4603      	mov	r3, r0
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d100      	bne.n	8007a0a <memset+0xa>
 8007a08:	4770      	bx	lr
 8007a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0e:	e7f9      	b.n	8007a04 <memset+0x4>

08007a10 <sbrk_aligned>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	4e0e      	ldr	r6, [pc, #56]	; (8007a4c <sbrk_aligned+0x3c>)
 8007a14:	460c      	mov	r4, r1
 8007a16:	6831      	ldr	r1, [r6, #0]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	b911      	cbnz	r1, 8007a22 <sbrk_aligned+0x12>
 8007a1c:	f000 f88c 	bl	8007b38 <_sbrk_r>
 8007a20:	6030      	str	r0, [r6, #0]
 8007a22:	4621      	mov	r1, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 f887 	bl	8007b38 <_sbrk_r>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	d00a      	beq.n	8007a44 <sbrk_aligned+0x34>
 8007a2e:	1cc4      	adds	r4, r0, #3
 8007a30:	f024 0403 	bic.w	r4, r4, #3
 8007a34:	42a0      	cmp	r0, r4
 8007a36:	d007      	beq.n	8007a48 <sbrk_aligned+0x38>
 8007a38:	1a21      	subs	r1, r4, r0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f87c 	bl	8007b38 <_sbrk_r>
 8007a40:	3001      	adds	r0, #1
 8007a42:	d101      	bne.n	8007a48 <sbrk_aligned+0x38>
 8007a44:	f04f 34ff 	mov.w	r4, #4294967295
 8007a48:	4620      	mov	r0, r4
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	20000514 	.word	0x20000514

08007a50 <_malloc_r>:
 8007a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4607      	mov	r7, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d905      	bls.n	8007a78 <_malloc_r+0x28>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	2600      	movs	r6, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	4e2e      	ldr	r6, [pc, #184]	; (8007b34 <_malloc_r+0xe4>)
 8007a7a:	f000 f86d 	bl	8007b58 <__malloc_lock>
 8007a7e:	6833      	ldr	r3, [r6, #0]
 8007a80:	461c      	mov	r4, r3
 8007a82:	bb34      	cbnz	r4, 8007ad2 <_malloc_r+0x82>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7ff ffc2 	bl	8007a10 <sbrk_aligned>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	4604      	mov	r4, r0
 8007a90:	d14d      	bne.n	8007b2e <_malloc_r+0xde>
 8007a92:	6834      	ldr	r4, [r6, #0]
 8007a94:	4626      	mov	r6, r4
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	d140      	bne.n	8007b1c <_malloc_r+0xcc>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	eb04 0803 	add.w	r8, r4, r3
 8007aa4:	f000 f848 	bl	8007b38 <_sbrk_r>
 8007aa8:	4580      	cmp	r8, r0
 8007aaa:	d13a      	bne.n	8007b22 <_malloc_r+0xd2>
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	3503      	adds	r5, #3
 8007ab0:	1a6d      	subs	r5, r5, r1
 8007ab2:	f025 0503 	bic.w	r5, r5, #3
 8007ab6:	3508      	adds	r5, #8
 8007ab8:	2d0c      	cmp	r5, #12
 8007aba:	bf38      	it	cc
 8007abc:	250c      	movcc	r5, #12
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ffa5 	bl	8007a10 <sbrk_aligned>
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d02b      	beq.n	8007b22 <_malloc_r+0xd2>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	442b      	add	r3, r5
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	e00e      	b.n	8007af0 <_malloc_r+0xa0>
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	1b52      	subs	r2, r2, r5
 8007ad6:	d41e      	bmi.n	8007b16 <_malloc_r+0xc6>
 8007ad8:	2a0b      	cmp	r2, #11
 8007ada:	d916      	bls.n	8007b0a <_malloc_r+0xba>
 8007adc:	1961      	adds	r1, r4, r5
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	6025      	str	r5, [r4, #0]
 8007ae2:	bf18      	it	ne
 8007ae4:	6059      	strne	r1, [r3, #4]
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	bf08      	it	eq
 8007aea:	6031      	streq	r1, [r6, #0]
 8007aec:	5162      	str	r2, [r4, r5]
 8007aee:	604b      	str	r3, [r1, #4]
 8007af0:	4638      	mov	r0, r7
 8007af2:	f104 060b 	add.w	r6, r4, #11
 8007af6:	f000 f835 	bl	8007b64 <__malloc_unlock>
 8007afa:	f026 0607 	bic.w	r6, r6, #7
 8007afe:	1d23      	adds	r3, r4, #4
 8007b00:	1af2      	subs	r2, r6, r3
 8007b02:	d0b6      	beq.n	8007a72 <_malloc_r+0x22>
 8007b04:	1b9b      	subs	r3, r3, r6
 8007b06:	50a3      	str	r3, [r4, r2]
 8007b08:	e7b3      	b.n	8007a72 <_malloc_r+0x22>
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	bf0c      	ite	eq
 8007b10:	6032      	streq	r2, [r6, #0]
 8007b12:	605a      	strne	r2, [r3, #4]
 8007b14:	e7ec      	b.n	8007af0 <_malloc_r+0xa0>
 8007b16:	4623      	mov	r3, r4
 8007b18:	6864      	ldr	r4, [r4, #4]
 8007b1a:	e7b2      	b.n	8007a82 <_malloc_r+0x32>
 8007b1c:	4634      	mov	r4, r6
 8007b1e:	6876      	ldr	r6, [r6, #4]
 8007b20:	e7b9      	b.n	8007a96 <_malloc_r+0x46>
 8007b22:	230c      	movs	r3, #12
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	4638      	mov	r0, r7
 8007b28:	f000 f81c 	bl	8007b64 <__malloc_unlock>
 8007b2c:	e7a1      	b.n	8007a72 <_malloc_r+0x22>
 8007b2e:	6025      	str	r5, [r4, #0]
 8007b30:	e7de      	b.n	8007af0 <_malloc_r+0xa0>
 8007b32:	bf00      	nop
 8007b34:	20000510 	.word	0x20000510

08007b38 <_sbrk_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d06      	ldr	r5, [pc, #24]	; (8007b54 <_sbrk_r+0x1c>)
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	f7fa f80a 	bl	8001b5c <_sbrk>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_sbrk_r+0x1a>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_sbrk_r+0x1a>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	20000518 	.word	0x20000518

08007b58 <__malloc_lock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__malloc_lock+0x8>)
 8007b5a:	f000 b809 	b.w	8007b70 <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	2000051c 	.word	0x2000051c

08007b64 <__malloc_unlock>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__malloc_unlock+0x8>)
 8007b66:	f000 b804 	b.w	8007b72 <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	2000051c 	.word	0x2000051c

08007b70 <__retarget_lock_acquire_recursive>:
 8007b70:	4770      	bx	lr

08007b72 <__retarget_lock_release_recursive>:
 8007b72:	4770      	bx	lr

08007b74 <_init>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

08007b80 <_fini>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr
